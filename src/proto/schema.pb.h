// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_schema_2eproto_metadata_getter(int index);
namespace DRPB {
class BoundedTensorSpecProto;
struct BoundedTensorSpecProtoDefaultTypeInternal;
extern BoundedTensorSpecProtoDefaultTypeInternal _BoundedTensorSpecProto_default_instance_;
class ChunkData;
struct ChunkDataDefaultTypeInternal;
extern ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
class ChunkData_Data;
struct ChunkData_DataDefaultTypeInternal;
extern ChunkData_DataDefaultTypeInternal _ChunkData_Data_default_instance_;
class DictValue;
struct DictValueDefaultTypeInternal;
extern DictValueDefaultTypeInternal _DictValue_default_instance_;
class DictValue_FieldsEntry_DoNotUse;
struct DictValue_FieldsEntry_DoNotUseDefaultTypeInternal;
extern DictValue_FieldsEntry_DoNotUseDefaultTypeInternal _DictValue_FieldsEntry_DoNotUse_default_instance_;
class FlatTrajectory;
struct FlatTrajectoryDefaultTypeInternal;
extern FlatTrajectoryDefaultTypeInternal _FlatTrajectory_default_instance_;
class FlatTrajectory_ChunkSlice;
struct FlatTrajectory_ChunkSliceDefaultTypeInternal;
extern FlatTrajectory_ChunkSliceDefaultTypeInternal _FlatTrajectory_ChunkSlice_default_instance_;
class FlatTrajectory_Column;
struct FlatTrajectory_ColumnDefaultTypeInternal;
extern FlatTrajectory_ColumnDefaultTypeInternal _FlatTrajectory_Column_default_instance_;
class KeyDistributionOptions;
struct KeyDistributionOptionsDefaultTypeInternal;
extern KeyDistributionOptionsDefaultTypeInternal _KeyDistributionOptions_default_instance_;
class KeyDistributionOptions_Heap;
struct KeyDistributionOptions_HeapDefaultTypeInternal;
extern KeyDistributionOptions_HeapDefaultTypeInternal _KeyDistributionOptions_Heap_default_instance_;
class KeyDistributionOptions_Prioritized;
struct KeyDistributionOptions_PrioritizedDefaultTypeInternal;
extern KeyDistributionOptions_PrioritizedDefaultTypeInternal _KeyDistributionOptions_Prioritized_default_instance_;
class KeyWithPriority;
struct KeyWithPriorityDefaultTypeInternal;
extern KeyWithPriorityDefaultTypeInternal _KeyWithPriority_default_instance_;
class ListValue;
struct ListValueDefaultTypeInternal;
extern ListValueDefaultTypeInternal _ListValue_default_instance_;
class NamedTupleValue;
struct NamedTupleValueDefaultTypeInternal;
extern NamedTupleValueDefaultTypeInternal _NamedTupleValue_default_instance_;
class NoneValue;
struct NoneValueDefaultTypeInternal;
extern NoneValueDefaultTypeInternal _NoneValue_default_instance_;
class PairValue;
struct PairValueDefaultTypeInternal;
extern PairValueDefaultTypeInternal _PairValue_default_instance_;
class PrioritizedItem;
struct PrioritizedItemDefaultTypeInternal;
extern PrioritizedItemDefaultTypeInternal _PrioritizedItem_default_instance_;
class RateLimiterCallStats;
struct RateLimiterCallStatsDefaultTypeInternal;
extern RateLimiterCallStatsDefaultTypeInternal _RateLimiterCallStats_default_instance_;
class RateLimiterInfo;
struct RateLimiterInfoDefaultTypeInternal;
extern RateLimiterInfoDefaultTypeInternal _RateLimiterInfo_default_instance_;
class ResourceHandleProto;
struct ResourceHandleProtoDefaultTypeInternal;
extern ResourceHandleProtoDefaultTypeInternal _ResourceHandleProto_default_instance_;
class ResourceHandleProto_DtypeAndShape;
struct ResourceHandleProto_DtypeAndShapeDefaultTypeInternal;
extern ResourceHandleProto_DtypeAndShapeDefaultTypeInternal _ResourceHandleProto_DtypeAndShape_default_instance_;
class SampleInfo;
struct SampleInfoDefaultTypeInternal;
extern SampleInfoDefaultTypeInternal _SampleInfo_default_instance_;
class SequenceRange;
struct SequenceRangeDefaultTypeInternal;
extern SequenceRangeDefaultTypeInternal _SequenceRange_default_instance_;
class SliceRange;
struct SliceRangeDefaultTypeInternal;
extern SliceRangeDefaultTypeInternal _SliceRange_default_instance_;
class StructuredValue;
struct StructuredValueDefaultTypeInternal;
extern StructuredValueDefaultTypeInternal _StructuredValue_default_instance_;
class TableInfo;
struct TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TensorProto;
struct TensorProtoDefaultTypeInternal;
extern TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
class TensorShapeProto;
struct TensorShapeProtoDefaultTypeInternal;
extern TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
class TensorShapeProto_Dim;
struct TensorShapeProto_DimDefaultTypeInternal;
extern TensorShapeProto_DimDefaultTypeInternal _TensorShapeProto_Dim_default_instance_;
class TensorSpecProto;
struct TensorSpecProtoDefaultTypeInternal;
extern TensorSpecProtoDefaultTypeInternal _TensorSpecProto_default_instance_;
class Timeout;
struct TimeoutDefaultTypeInternal;
extern TimeoutDefaultTypeInternal _Timeout_default_instance_;
class TupleValue;
struct TupleValueDefaultTypeInternal;
extern TupleValueDefaultTypeInternal _TupleValue_default_instance_;
class TypeSpecProto;
struct TypeSpecProtoDefaultTypeInternal;
extern TypeSpecProtoDefaultTypeInternal _TypeSpecProto_default_instance_;
class Uint128;
struct Uint128DefaultTypeInternal;
extern Uint128DefaultTypeInternal _Uint128_default_instance_;
class VariantTensorDataProto;
struct VariantTensorDataProtoDefaultTypeInternal;
extern VariantTensorDataProtoDefaultTypeInternal _VariantTensorDataProto_default_instance_;
}  // namespace DRPB
PROTOBUF_NAMESPACE_OPEN
template<> ::DRPB::BoundedTensorSpecProto* Arena::CreateMaybeMessage<::DRPB::BoundedTensorSpecProto>(Arena*);
template<> ::DRPB::ChunkData* Arena::CreateMaybeMessage<::DRPB::ChunkData>(Arena*);
template<> ::DRPB::ChunkData_Data* Arena::CreateMaybeMessage<::DRPB::ChunkData_Data>(Arena*);
template<> ::DRPB::DictValue* Arena::CreateMaybeMessage<::DRPB::DictValue>(Arena*);
template<> ::DRPB::DictValue_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage<::DRPB::DictValue_FieldsEntry_DoNotUse>(Arena*);
template<> ::DRPB::FlatTrajectory* Arena::CreateMaybeMessage<::DRPB::FlatTrajectory>(Arena*);
template<> ::DRPB::FlatTrajectory_ChunkSlice* Arena::CreateMaybeMessage<::DRPB::FlatTrajectory_ChunkSlice>(Arena*);
template<> ::DRPB::FlatTrajectory_Column* Arena::CreateMaybeMessage<::DRPB::FlatTrajectory_Column>(Arena*);
template<> ::DRPB::KeyDistributionOptions* Arena::CreateMaybeMessage<::DRPB::KeyDistributionOptions>(Arena*);
template<> ::DRPB::KeyDistributionOptions_Heap* Arena::CreateMaybeMessage<::DRPB::KeyDistributionOptions_Heap>(Arena*);
template<> ::DRPB::KeyDistributionOptions_Prioritized* Arena::CreateMaybeMessage<::DRPB::KeyDistributionOptions_Prioritized>(Arena*);
template<> ::DRPB::KeyWithPriority* Arena::CreateMaybeMessage<::DRPB::KeyWithPriority>(Arena*);
template<> ::DRPB::ListValue* Arena::CreateMaybeMessage<::DRPB::ListValue>(Arena*);
template<> ::DRPB::NamedTupleValue* Arena::CreateMaybeMessage<::DRPB::NamedTupleValue>(Arena*);
template<> ::DRPB::NoneValue* Arena::CreateMaybeMessage<::DRPB::NoneValue>(Arena*);
template<> ::DRPB::PairValue* Arena::CreateMaybeMessage<::DRPB::PairValue>(Arena*);
template<> ::DRPB::PrioritizedItem* Arena::CreateMaybeMessage<::DRPB::PrioritizedItem>(Arena*);
template<> ::DRPB::RateLimiterCallStats* Arena::CreateMaybeMessage<::DRPB::RateLimiterCallStats>(Arena*);
template<> ::DRPB::RateLimiterInfo* Arena::CreateMaybeMessage<::DRPB::RateLimiterInfo>(Arena*);
template<> ::DRPB::ResourceHandleProto* Arena::CreateMaybeMessage<::DRPB::ResourceHandleProto>(Arena*);
template<> ::DRPB::ResourceHandleProto_DtypeAndShape* Arena::CreateMaybeMessage<::DRPB::ResourceHandleProto_DtypeAndShape>(Arena*);
template<> ::DRPB::SampleInfo* Arena::CreateMaybeMessage<::DRPB::SampleInfo>(Arena*);
template<> ::DRPB::SequenceRange* Arena::CreateMaybeMessage<::DRPB::SequenceRange>(Arena*);
template<> ::DRPB::SliceRange* Arena::CreateMaybeMessage<::DRPB::SliceRange>(Arena*);
template<> ::DRPB::StructuredValue* Arena::CreateMaybeMessage<::DRPB::StructuredValue>(Arena*);
template<> ::DRPB::TableInfo* Arena::CreateMaybeMessage<::DRPB::TableInfo>(Arena*);
template<> ::DRPB::TensorProto* Arena::CreateMaybeMessage<::DRPB::TensorProto>(Arena*);
template<> ::DRPB::TensorShapeProto* Arena::CreateMaybeMessage<::DRPB::TensorShapeProto>(Arena*);
template<> ::DRPB::TensorShapeProto_Dim* Arena::CreateMaybeMessage<::DRPB::TensorShapeProto_Dim>(Arena*);
template<> ::DRPB::TensorSpecProto* Arena::CreateMaybeMessage<::DRPB::TensorSpecProto>(Arena*);
template<> ::DRPB::Timeout* Arena::CreateMaybeMessage<::DRPB::Timeout>(Arena*);
template<> ::DRPB::TupleValue* Arena::CreateMaybeMessage<::DRPB::TupleValue>(Arena*);
template<> ::DRPB::TypeSpecProto* Arena::CreateMaybeMessage<::DRPB::TypeSpecProto>(Arena*);
template<> ::DRPB::Uint128* Arena::CreateMaybeMessage<::DRPB::Uint128>(Arena*);
template<> ::DRPB::VariantTensorDataProto* Arena::CreateMaybeMessage<::DRPB::VariantTensorDataProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DRPB {

enum TypeSpecProto_TypeSpecClass : int {
  TypeSpecProto_TypeSpecClass_UNKNOWN = 0,
  TypeSpecProto_TypeSpecClass_SPARSE_TENSOR_SPEC = 1,
  TypeSpecProto_TypeSpecClass_INDEXED_SLICES_SPEC = 2,
  TypeSpecProto_TypeSpecClass_RAGGED_TENSOR_SPEC = 3,
  TypeSpecProto_TypeSpecClass_TENSOR_ARRAY_SPEC = 4,
  TypeSpecProto_TypeSpecClass_DATA_DATASET_SPEC = 5,
  TypeSpecProto_TypeSpecClass_DATA_ITERATOR_SPEC = 6,
  TypeSpecProto_TypeSpecClass_OPTIONAL_SPEC = 7,
  TypeSpecProto_TypeSpecClass_PER_REPLICA_SPEC = 8,
  TypeSpecProto_TypeSpecClass_VARIABLE_SPEC = 9,
  TypeSpecProto_TypeSpecClass_ROW_PARTITION_SPEC = 10,
  TypeSpecProto_TypeSpecClass_REGISTERED_TYPE_SPEC = 12,
  TypeSpecProto_TypeSpecClass_EXTENSION_TYPE_SPEC = 13,
  TypeSpecProto_TypeSpecClass_TypeSpecProto_TypeSpecClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TypeSpecProto_TypeSpecClass_TypeSpecProto_TypeSpecClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TypeSpecProto_TypeSpecClass_IsValid(int value);
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto_TypeSpecClass_TypeSpecClass_MIN = TypeSpecProto_TypeSpecClass_UNKNOWN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX = TypeSpecProto_TypeSpecClass_EXTENSION_TYPE_SPEC;
constexpr int TypeSpecProto_TypeSpecClass_TypeSpecClass_ARRAYSIZE = TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeSpecProto_TypeSpecClass_descriptor();
template<typename T>
inline const std::string& TypeSpecProto_TypeSpecClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeSpecProto_TypeSpecClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeSpecProto_TypeSpecClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeSpecProto_TypeSpecClass_descriptor(), enum_t_value);
}
inline bool TypeSpecProto_TypeSpecClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeSpecProto_TypeSpecClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeSpecProto_TypeSpecClass>(
    TypeSpecProto_TypeSpecClass_descriptor(), name, value);
}
// ===================================================================

class TensorProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TensorProto) */ {
 public:
  inline TensorProto() : TensorProto(nullptr) {}
  virtual ~TensorProto();
  explicit constexpr TensorProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorProto(const TensorProto& from);
  TensorProto(TensorProto&& from) noexcept
    : TensorProto() {
    *this = ::std::move(from);
  }

  inline TensorProto& operator=(const TensorProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorProto& operator=(TensorProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorProto* internal_default_instance() {
    return reinterpret_cast<const TensorProto*>(
               &_TensorProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TensorProto& a, TensorProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorProto* New() const final {
    return CreateMaybeMessage<TensorProto>(nullptr);
  }

  TensorProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorProto& from);
  void MergeFrom(const TensorProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TensorProto";
  }
  protected:
  explicit TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 5,
    kDoubleValFieldNumber = 6,
    kIntValFieldNumber = 7,
    kStringValFieldNumber = 8,
    kScomplexValFieldNumber = 9,
    kInt64ValFieldNumber = 10,
    kBoolValFieldNumber = 11,
    kDcomplexValFieldNumber = 12,
    kHalfValFieldNumber = 13,
    kResourceHandleValFieldNumber = 14,
    kVariantValFieldNumber = 15,
    kUint32ValFieldNumber = 16,
    kUint64ValFieldNumber = 17,
    kTensorContentFieldNumber = 4,
    kTensorShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
    kVersionNumberFieldNumber = 3,
  };
  // repeated float float_val = 5 [packed = true];
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;
  public:
  void clear_float_val();
  private:
  float _internal_float_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_val() const;
  void _internal_add_float_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_val();
  public:
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // repeated double double_val = 6 [packed = true];
  int double_val_size() const;
  private:
  int _internal_double_val_size() const;
  public:
  void clear_double_val();
  private:
  double _internal_double_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_double_val() const;
  void _internal_add_double_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_double_val();
  public:
  double double_val(int index) const;
  void set_double_val(int index, double value);
  void add_double_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      double_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_double_val();

  // repeated int32 int_val = 7 [packed = true];
  int int_val_size() const;
  private:
  int _internal_int_val_size() const;
  public:
  void clear_int_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_int_val() const;
  void _internal_add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_int_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 int_val(int index) const;
  void set_int_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      int_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_int_val();

  // repeated bytes string_val = 8;
  int string_val_size() const;
  private:
  int _internal_string_val_size() const;
  public:
  void clear_string_val();
  const std::string& string_val(int index) const;
  std::string* mutable_string_val(int index);
  void set_string_val(int index, const std::string& value);
  void set_string_val(int index, std::string&& value);
  void set_string_val(int index, const char* value);
  void set_string_val(int index, const void* value, size_t size);
  std::string* add_string_val();
  void add_string_val(const std::string& value);
  void add_string_val(std::string&& value);
  void add_string_val(const char* value);
  void add_string_val(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_val();
  private:
  const std::string& _internal_string_val(int index) const;
  std::string* _internal_add_string_val();
  public:

  // repeated float scomplex_val = 9 [packed = true];
  int scomplex_val_size() const;
  private:
  int _internal_scomplex_val_size() const;
  public:
  void clear_scomplex_val();
  private:
  float _internal_scomplex_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scomplex_val() const;
  void _internal_add_scomplex_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scomplex_val();
  public:
  float scomplex_val(int index) const;
  void set_scomplex_val(int index, float value);
  void add_scomplex_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scomplex_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scomplex_val();

  // repeated int64 int64_val = 10 [packed = true];
  int int64_val_size() const;
  private:
  int _internal_int64_val_size() const;
  public:
  void clear_int64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_int64_val() const;
  void _internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_int64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 int64_val(int index) const;
  void set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      int64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_int64_val();

  // repeated bool bool_val = 11 [packed = true];
  int bool_val_size() const;
  private:
  int _internal_bool_val_size() const;
  public:
  void clear_bool_val();
  private:
  bool _internal_bool_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bool_val() const;
  void _internal_add_bool_val(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bool_val();
  public:
  bool bool_val(int index) const;
  void set_bool_val(int index, bool value);
  void add_bool_val(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bool_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bool_val();

  // repeated double dcomplex_val = 12 [packed = true];
  int dcomplex_val_size() const;
  private:
  int _internal_dcomplex_val_size() const;
  public:
  void clear_dcomplex_val();
  private:
  double _internal_dcomplex_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_dcomplex_val() const;
  void _internal_add_dcomplex_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_dcomplex_val();
  public:
  double dcomplex_val(int index) const;
  void set_dcomplex_val(int index, double value);
  void add_dcomplex_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      dcomplex_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_dcomplex_val();

  // repeated int32 half_val = 13 [packed = true];
  int half_val_size() const;
  private:
  int _internal_half_val_size() const;
  public:
  void clear_half_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_half_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_half_val() const;
  void _internal_add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_half_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 half_val(int index) const;
  void set_half_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      half_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_half_val();

  // repeated .DRPB.ResourceHandleProto resource_handle_val = 14;
  int resource_handle_val_size() const;
  private:
  int _internal_resource_handle_val_size() const;
  public:
  void clear_resource_handle_val();
  ::DRPB::ResourceHandleProto* mutable_resource_handle_val(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto >*
      mutable_resource_handle_val();
  private:
  const ::DRPB::ResourceHandleProto& _internal_resource_handle_val(int index) const;
  ::DRPB::ResourceHandleProto* _internal_add_resource_handle_val();
  public:
  const ::DRPB::ResourceHandleProto& resource_handle_val(int index) const;
  ::DRPB::ResourceHandleProto* add_resource_handle_val();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto >&
      resource_handle_val() const;

  // repeated .DRPB.VariantTensorDataProto variant_val = 15;
  int variant_val_size() const;
  private:
  int _internal_variant_val_size() const;
  public:
  void clear_variant_val();
  ::DRPB::VariantTensorDataProto* mutable_variant_val(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::VariantTensorDataProto >*
      mutable_variant_val();
  private:
  const ::DRPB::VariantTensorDataProto& _internal_variant_val(int index) const;
  ::DRPB::VariantTensorDataProto* _internal_add_variant_val();
  public:
  const ::DRPB::VariantTensorDataProto& variant_val(int index) const;
  ::DRPB::VariantTensorDataProto* add_variant_val();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::VariantTensorDataProto >&
      variant_val() const;

  // repeated uint32 uint32_val = 16 [packed = true];
  int uint32_val_size() const;
  private:
  int _internal_uint32_val_size() const;
  public:
  void clear_uint32_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_uint32_val() const;
  void _internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_uint32_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_val(int index) const;
  void set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      uint32_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_uint32_val();

  // repeated uint64 uint64_val = 17 [packed = true];
  int uint64_val_size() const;
  private:
  int _internal_uint64_val_size() const;
  public:
  void clear_uint64_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_uint64_val() const;
  void _internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_uint64_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_val(int index) const;
  void set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      uint64_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_uint64_val();

  // bytes tensor_content = 4;
  void clear_tensor_content();
  const std::string& tensor_content() const;
  void set_tensor_content(const std::string& value);
  void set_tensor_content(std::string&& value);
  void set_tensor_content(const char* value);
  void set_tensor_content(const void* value, size_t size);
  std::string* mutable_tensor_content();
  std::string* release_tensor_content();
  void set_allocated_tensor_content(std::string* tensor_content);
  private:
  const std::string& _internal_tensor_content() const;
  void _internal_set_tensor_content(const std::string& value);
  std::string* _internal_mutable_tensor_content();
  public:

  // .DRPB.TensorShapeProto tensor_shape = 2;
  bool has_tensor_shape() const;
  private:
  bool _internal_has_tensor_shape() const;
  public:
  void clear_tensor_shape();
  const ::DRPB::TensorShapeProto& tensor_shape() const;
  ::DRPB::TensorShapeProto* release_tensor_shape();
  ::DRPB::TensorShapeProto* mutable_tensor_shape();
  void set_allocated_tensor_shape(::DRPB::TensorShapeProto* tensor_shape);
  private:
  const ::DRPB::TensorShapeProto& _internal_tensor_shape() const;
  ::DRPB::TensorShapeProto* _internal_mutable_tensor_shape();
  public:
  void unsafe_arena_set_allocated_tensor_shape(
      ::DRPB::TensorShapeProto* tensor_shape);
  ::DRPB::TensorShapeProto* unsafe_arena_release_tensor_shape();

  // .DRPB.DataType dtype = 1;
  void clear_dtype();
  ::DRPB::DataType dtype() const;
  void set_dtype(::DRPB::DataType value);
  private:
  ::DRPB::DataType _internal_dtype() const;
  void _internal_set_dtype(::DRPB::DataType value);
  public:

  // int32 version_number = 3;
  void clear_version_number();
  ::PROTOBUF_NAMESPACE_ID::int32 version_number() const;
  void set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version_number() const;
  void _internal_set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TensorProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
  mutable std::atomic<int> _float_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > double_val_;
  mutable std::atomic<int> _double_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > int_val_;
  mutable std::atomic<int> _int_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scomplex_val_;
  mutable std::atomic<int> _scomplex_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > int64_val_;
  mutable std::atomic<int> _int64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bool_val_;
  mutable std::atomic<int> _bool_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > dcomplex_val_;
  mutable std::atomic<int> _dcomplex_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > half_val_;
  mutable std::atomic<int> _half_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto > resource_handle_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::VariantTensorDataProto > variant_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > uint32_val_;
  mutable std::atomic<int> _uint32_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > uint64_val_;
  mutable std::atomic<int> _uint64_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_content_;
  ::DRPB::TensorShapeProto* tensor_shape_;
  int dtype_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class VariantTensorDataProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.VariantTensorDataProto) */ {
 public:
  inline VariantTensorDataProto() : VariantTensorDataProto(nullptr) {}
  virtual ~VariantTensorDataProto();
  explicit constexpr VariantTensorDataProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VariantTensorDataProto(const VariantTensorDataProto& from);
  VariantTensorDataProto(VariantTensorDataProto&& from) noexcept
    : VariantTensorDataProto() {
    *this = ::std::move(from);
  }

  inline VariantTensorDataProto& operator=(const VariantTensorDataProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline VariantTensorDataProto& operator=(VariantTensorDataProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VariantTensorDataProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const VariantTensorDataProto* internal_default_instance() {
    return reinterpret_cast<const VariantTensorDataProto*>(
               &_VariantTensorDataProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VariantTensorDataProto& a, VariantTensorDataProto& b) {
    a.Swap(&b);
  }
  inline void Swap(VariantTensorDataProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VariantTensorDataProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VariantTensorDataProto* New() const final {
    return CreateMaybeMessage<VariantTensorDataProto>(nullptr);
  }

  VariantTensorDataProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VariantTensorDataProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VariantTensorDataProto& from);
  void MergeFrom(const VariantTensorDataProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VariantTensorDataProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.VariantTensorDataProto";
  }
  protected:
  explicit VariantTensorDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorsFieldNumber = 3,
    kTypeNameFieldNumber = 1,
    kMetadataFieldNumber = 2,
  };
  // repeated .DRPB.TensorProto tensors = 3;
  int tensors_size() const;
  private:
  int _internal_tensors_size() const;
  public:
  void clear_tensors();
  ::DRPB::TensorProto* mutable_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
      mutable_tensors();
  private:
  const ::DRPB::TensorProto& _internal_tensors(int index) const;
  ::DRPB::TensorProto* _internal_add_tensors();
  public:
  const ::DRPB::TensorProto& tensors(int index) const;
  ::DRPB::TensorProto* add_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
      tensors() const;

  // string type_name = 1;
  void clear_type_name();
  const std::string& type_name() const;
  void set_type_name(const std::string& value);
  void set_type_name(std::string&& value);
  void set_type_name(const char* value);
  void set_type_name(const char* value, size_t size);
  std::string* mutable_type_name();
  std::string* release_type_name();
  void set_allocated_type_name(std::string* type_name);
  private:
  const std::string& _internal_type_name() const;
  void _internal_set_type_name(const std::string& value);
  std::string* _internal_mutable_type_name();
  public:

  // bytes metadata = 2;
  void clear_metadata();
  const std::string& metadata() const;
  void set_metadata(const std::string& value);
  void set_metadata(std::string&& value);
  void set_metadata(const char* value);
  void set_metadata(const void* value, size_t size);
  std::string* mutable_metadata();
  std::string* release_metadata();
  void set_allocated_metadata(std::string* metadata);
  private:
  const std::string& _internal_metadata() const;
  void _internal_set_metadata(const std::string& value);
  std::string* _internal_mutable_metadata();
  public:

  // @@protoc_insertion_point(class_scope:DRPB.VariantTensorDataProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto > tensors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto_Dim PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TensorShapeProto.Dim) */ {
 public:
  inline TensorShapeProto_Dim() : TensorShapeProto_Dim(nullptr) {}
  virtual ~TensorShapeProto_Dim();
  explicit constexpr TensorShapeProto_Dim(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorShapeProto_Dim(const TensorShapeProto_Dim& from);
  TensorShapeProto_Dim(TensorShapeProto_Dim&& from) noexcept
    : TensorShapeProto_Dim() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto_Dim& operator=(const TensorShapeProto_Dim& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto_Dim& operator=(TensorShapeProto_Dim&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto_Dim& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorShapeProto_Dim* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto_Dim*>(
               &_TensorShapeProto_Dim_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TensorShapeProto_Dim& a, TensorShapeProto_Dim& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto_Dim* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorShapeProto_Dim* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto_Dim* New() const final {
    return CreateMaybeMessage<TensorShapeProto_Dim>(nullptr);
  }

  TensorShapeProto_Dim* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto_Dim>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto_Dim& from);
  void MergeFrom(const TensorShapeProto_Dim& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto_Dim* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TensorShapeProto.Dim";
  }
  protected:
  explicit TensorShapeProto_Dim(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kSizeFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 size = 1;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TensorShapeProto.Dim)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TensorShapeProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TensorShapeProto) */ {
 public:
  inline TensorShapeProto() : TensorShapeProto(nullptr) {}
  virtual ~TensorShapeProto();
  explicit constexpr TensorShapeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorShapeProto(const TensorShapeProto& from);
  TensorShapeProto(TensorShapeProto&& from) noexcept
    : TensorShapeProto() {
    *this = ::std::move(from);
  }

  inline TensorShapeProto& operator=(const TensorShapeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShapeProto& operator=(TensorShapeProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShapeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorShapeProto* internal_default_instance() {
    return reinterpret_cast<const TensorShapeProto*>(
               &_TensorShapeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TensorShapeProto& a, TensorShapeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShapeProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorShapeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShapeProto* New() const final {
    return CreateMaybeMessage<TensorShapeProto>(nullptr);
  }

  TensorShapeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShapeProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShapeProto& from);
  void MergeFrom(const TensorShapeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShapeProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TensorShapeProto";
  }
  protected:
  explicit TensorShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef TensorShapeProto_Dim Dim;

  // accessors -------------------------------------------------------

  enum : int {
    kDimFieldNumber = 2,
    kUnknownRankFieldNumber = 3,
  };
  // repeated .DRPB.TensorShapeProto.Dim dim = 2;
  int dim_size() const;
  private:
  int _internal_dim_size() const;
  public:
  void clear_dim();
  ::DRPB::TensorShapeProto_Dim* mutable_dim(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorShapeProto_Dim >*
      mutable_dim();
  private:
  const ::DRPB::TensorShapeProto_Dim& _internal_dim(int index) const;
  ::DRPB::TensorShapeProto_Dim* _internal_add_dim();
  public:
  const ::DRPB::TensorShapeProto_Dim& dim(int index) const;
  ::DRPB::TensorShapeProto_Dim* add_dim();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorShapeProto_Dim >&
      dim() const;

  // bool unknown_rank = 3;
  void clear_unknown_rank();
  bool unknown_rank() const;
  void set_unknown_rank(bool value);
  private:
  bool _internal_unknown_rank() const;
  void _internal_set_unknown_rank(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TensorShapeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorShapeProto_Dim > dim_;
  bool unknown_rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class ResourceHandleProto_DtypeAndShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.ResourceHandleProto.DtypeAndShape) */ {
 public:
  inline ResourceHandleProto_DtypeAndShape() : ResourceHandleProto_DtypeAndShape(nullptr) {}
  virtual ~ResourceHandleProto_DtypeAndShape();
  explicit constexpr ResourceHandleProto_DtypeAndShape(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceHandleProto_DtypeAndShape(const ResourceHandleProto_DtypeAndShape& from);
  ResourceHandleProto_DtypeAndShape(ResourceHandleProto_DtypeAndShape&& from) noexcept
    : ResourceHandleProto_DtypeAndShape() {
    *this = ::std::move(from);
  }

  inline ResourceHandleProto_DtypeAndShape& operator=(const ResourceHandleProto_DtypeAndShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceHandleProto_DtypeAndShape& operator=(ResourceHandleProto_DtypeAndShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceHandleProto_DtypeAndShape& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceHandleProto_DtypeAndShape* internal_default_instance() {
    return reinterpret_cast<const ResourceHandleProto_DtypeAndShape*>(
               &_ResourceHandleProto_DtypeAndShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ResourceHandleProto_DtypeAndShape& a, ResourceHandleProto_DtypeAndShape& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceHandleProto_DtypeAndShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceHandleProto_DtypeAndShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceHandleProto_DtypeAndShape* New() const final {
    return CreateMaybeMessage<ResourceHandleProto_DtypeAndShape>(nullptr);
  }

  ResourceHandleProto_DtypeAndShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceHandleProto_DtypeAndShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceHandleProto_DtypeAndShape& from);
  void MergeFrom(const ResourceHandleProto_DtypeAndShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceHandleProto_DtypeAndShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.ResourceHandleProto.DtypeAndShape";
  }
  protected:
  explicit ResourceHandleProto_DtypeAndShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kDtypeFieldNumber = 1,
  };
  // .DRPB.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::DRPB::TensorShapeProto& shape() const;
  ::DRPB::TensorShapeProto* release_shape();
  ::DRPB::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::DRPB::TensorShapeProto* shape);
  private:
  const ::DRPB::TensorShapeProto& _internal_shape() const;
  ::DRPB::TensorShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::DRPB::TensorShapeProto* shape);
  ::DRPB::TensorShapeProto* unsafe_arena_release_shape();

  // .DRPB.DataType dtype = 1;
  void clear_dtype();
  ::DRPB::DataType dtype() const;
  void set_dtype(::DRPB::DataType value);
  private:
  ::DRPB::DataType _internal_dtype() const;
  void _internal_set_dtype(::DRPB::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.ResourceHandleProto.DtypeAndShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DRPB::TensorShapeProto* shape_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class ResourceHandleProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.ResourceHandleProto) */ {
 public:
  inline ResourceHandleProto() : ResourceHandleProto(nullptr) {}
  virtual ~ResourceHandleProto();
  explicit constexpr ResourceHandleProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceHandleProto(const ResourceHandleProto& from);
  ResourceHandleProto(ResourceHandleProto&& from) noexcept
    : ResourceHandleProto() {
    *this = ::std::move(from);
  }

  inline ResourceHandleProto& operator=(const ResourceHandleProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceHandleProto& operator=(ResourceHandleProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResourceHandleProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceHandleProto* internal_default_instance() {
    return reinterpret_cast<const ResourceHandleProto*>(
               &_ResourceHandleProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ResourceHandleProto& a, ResourceHandleProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceHandleProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceHandleProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourceHandleProto* New() const final {
    return CreateMaybeMessage<ResourceHandleProto>(nullptr);
  }

  ResourceHandleProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourceHandleProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResourceHandleProto& from);
  void MergeFrom(const ResourceHandleProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceHandleProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.ResourceHandleProto";
  }
  protected:
  explicit ResourceHandleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ResourceHandleProto_DtypeAndShape DtypeAndShape;

  // accessors -------------------------------------------------------

  enum : int {
    kDtypesAndShapesFieldNumber = 6,
    kDeviceFieldNumber = 1,
    kContainerFieldNumber = 2,
    kNameFieldNumber = 3,
    kMaybeTypeNameFieldNumber = 5,
    kHashCodeFieldNumber = 4,
  };
  // repeated .DRPB.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
  int dtypes_and_shapes_size() const;
  private:
  int _internal_dtypes_and_shapes_size() const;
  public:
  void clear_dtypes_and_shapes();
  ::DRPB::ResourceHandleProto_DtypeAndShape* mutable_dtypes_and_shapes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto_DtypeAndShape >*
      mutable_dtypes_and_shapes();
  private:
  const ::DRPB::ResourceHandleProto_DtypeAndShape& _internal_dtypes_and_shapes(int index) const;
  ::DRPB::ResourceHandleProto_DtypeAndShape* _internal_add_dtypes_and_shapes();
  public:
  const ::DRPB::ResourceHandleProto_DtypeAndShape& dtypes_and_shapes(int index) const;
  ::DRPB::ResourceHandleProto_DtypeAndShape* add_dtypes_and_shapes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto_DtypeAndShape >&
      dtypes_and_shapes() const;

  // string device = 1;
  void clear_device();
  const std::string& device() const;
  void set_device(const std::string& value);
  void set_device(std::string&& value);
  void set_device(const char* value);
  void set_device(const char* value, size_t size);
  std::string* mutable_device();
  std::string* release_device();
  void set_allocated_device(std::string* device);
  private:
  const std::string& _internal_device() const;
  void _internal_set_device(const std::string& value);
  std::string* _internal_mutable_device();
  public:

  // string container = 2;
  void clear_container();
  const std::string& container() const;
  void set_container(const std::string& value);
  void set_container(std::string&& value);
  void set_container(const char* value);
  void set_container(const char* value, size_t size);
  std::string* mutable_container();
  std::string* release_container();
  void set_allocated_container(std::string* container);
  private:
  const std::string& _internal_container() const;
  void _internal_set_container(const std::string& value);
  std::string* _internal_mutable_container();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string maybe_type_name = 5;
  void clear_maybe_type_name();
  const std::string& maybe_type_name() const;
  void set_maybe_type_name(const std::string& value);
  void set_maybe_type_name(std::string&& value);
  void set_maybe_type_name(const char* value);
  void set_maybe_type_name(const char* value, size_t size);
  std::string* mutable_maybe_type_name();
  std::string* release_maybe_type_name();
  void set_allocated_maybe_type_name(std::string* maybe_type_name);
  private:
  const std::string& _internal_maybe_type_name() const;
  void _internal_set_maybe_type_name(const std::string& value);
  std::string* _internal_mutable_maybe_type_name();
  public:

  // uint64 hash_code = 4;
  void clear_hash_code();
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_code() const;
  void set_hash_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_hash_code() const;
  void _internal_set_hash_code(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.ResourceHandleProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto_DtypeAndShape > dtypes_and_shapes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr container_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr maybe_type_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 hash_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class ChunkData_Data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.ChunkData.Data) */ {
 public:
  inline ChunkData_Data() : ChunkData_Data(nullptr) {}
  virtual ~ChunkData_Data();
  explicit constexpr ChunkData_Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkData_Data(const ChunkData_Data& from);
  ChunkData_Data(ChunkData_Data&& from) noexcept
    : ChunkData_Data() {
    *this = ::std::move(from);
  }

  inline ChunkData_Data& operator=(const ChunkData_Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData_Data& operator=(ChunkData_Data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData_Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkData_Data* internal_default_instance() {
    return reinterpret_cast<const ChunkData_Data*>(
               &_ChunkData_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChunkData_Data& a, ChunkData_Data& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData_Data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData_Data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData_Data* New() const final {
    return CreateMaybeMessage<ChunkData_Data>(nullptr);
  }

  ChunkData_Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData_Data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData_Data& from);
  void MergeFrom(const ChunkData_Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData_Data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.ChunkData.Data";
  }
  protected:
  explicit ChunkData_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorsFieldNumber = 1,
  };
  // repeated .DRPB.TensorProto tensors = 1;
  int tensors_size() const;
  private:
  int _internal_tensors_size() const;
  public:
  void clear_tensors();
  ::DRPB::TensorProto* mutable_tensors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
      mutable_tensors();
  private:
  const ::DRPB::TensorProto& _internal_tensors(int index) const;
  ::DRPB::TensorProto* _internal_add_tensors();
  public:
  const ::DRPB::TensorProto& tensors(int index) const;
  ::DRPB::TensorProto* add_tensors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
      tensors() const;

  // @@protoc_insertion_point(class_scope:DRPB.ChunkData.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto > tensors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class ChunkData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.ChunkData) */ {
 public:
  inline ChunkData() : ChunkData(nullptr) {}
  virtual ~ChunkData();
  explicit constexpr ChunkData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunkData(const ChunkData& from);
  ChunkData(ChunkData&& from) noexcept
    : ChunkData() {
    *this = ::std::move(from);
  }

  inline ChunkData& operator=(const ChunkData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunkData& operator=(ChunkData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChunkData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunkData* internal_default_instance() {
    return reinterpret_cast<const ChunkData*>(
               &_ChunkData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChunkData& a, ChunkData& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunkData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunkData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChunkData* New() const final {
    return CreateMaybeMessage<ChunkData>(nullptr);
  }

  ChunkData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChunkData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChunkData& from);
  void MergeFrom(const ChunkData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunkData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.ChunkData";
  }
  protected:
  explicit ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChunkData_Data Data;

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedDataFieldNumber = 3,
    kSequenceRangeFieldNumber = 2,
    kDataFieldNumber = 5,
    kChunkKeyFieldNumber = 1,
    kDeltaEncodedFieldNumber = 4,
    kDataTensorsLenFieldNumber = 6,
  };
  // repeated .DRPB.TensorProto deprecated_data = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_data_size() const;
  private:
  int _internal_deprecated_data_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_data();
  PROTOBUF_DEPRECATED ::DRPB::TensorProto* mutable_deprecated_data(int index);
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
      mutable_deprecated_data();
  private:
  const ::DRPB::TensorProto& _internal_deprecated_data(int index) const;
  ::DRPB::TensorProto* _internal_add_deprecated_data();
  public:
  PROTOBUF_DEPRECATED const ::DRPB::TensorProto& deprecated_data(int index) const;
  PROTOBUF_DEPRECATED ::DRPB::TensorProto* add_deprecated_data();
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
      deprecated_data() const;

  // .DRPB.SequenceRange sequence_range = 2;
  bool has_sequence_range() const;
  private:
  bool _internal_has_sequence_range() const;
  public:
  void clear_sequence_range();
  const ::DRPB::SequenceRange& sequence_range() const;
  ::DRPB::SequenceRange* release_sequence_range();
  ::DRPB::SequenceRange* mutable_sequence_range();
  void set_allocated_sequence_range(::DRPB::SequenceRange* sequence_range);
  private:
  const ::DRPB::SequenceRange& _internal_sequence_range() const;
  ::DRPB::SequenceRange* _internal_mutable_sequence_range();
  public:
  void unsafe_arena_set_allocated_sequence_range(
      ::DRPB::SequenceRange* sequence_range);
  ::DRPB::SequenceRange* unsafe_arena_release_sequence_range();

  // .DRPB.ChunkData.Data data = 5 [lazy = true];
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::DRPB::ChunkData_Data& data() const;
  ::DRPB::ChunkData_Data* release_data();
  ::DRPB::ChunkData_Data* mutable_data();
  void set_allocated_data(::DRPB::ChunkData_Data* data);
  private:
  const ::DRPB::ChunkData_Data& _internal_data() const;
  ::DRPB::ChunkData_Data* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::DRPB::ChunkData_Data* data);
  ::DRPB::ChunkData_Data* unsafe_arena_release_data();

  // uint64 chunk_key = 1;
  void clear_chunk_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_key() const;
  void set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunk_key() const;
  void _internal_set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool delta_encoded = 4;
  void clear_delta_encoded();
  bool delta_encoded() const;
  void set_delta_encoded(bool value);
  private:
  bool _internal_delta_encoded() const;
  void _internal_set_delta_encoded(bool value);
  public:

  // int32 data_tensors_len = 6;
  void clear_data_tensors_len();
  ::PROTOBUF_NAMESPACE_ID::int32 data_tensors_len() const;
  void set_data_tensors_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data_tensors_len() const;
  void _internal_set_data_tensors_len(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.ChunkData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto > deprecated_data_;
  ::DRPB::SequenceRange* sequence_range_;
  ::DRPB::ChunkData_Data* data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_key_;
  bool delta_encoded_;
  ::PROTOBUF_NAMESPACE_ID::int32 data_tensors_len_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class SliceRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.SliceRange) */ {
 public:
  inline SliceRange() : SliceRange(nullptr) {}
  virtual ~SliceRange();
  explicit constexpr SliceRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SliceRange(const SliceRange& from);
  SliceRange(SliceRange&& from) noexcept
    : SliceRange() {
    *this = ::std::move(from);
  }

  inline SliceRange& operator=(const SliceRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SliceRange& operator=(SliceRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SliceRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SliceRange* internal_default_instance() {
    return reinterpret_cast<const SliceRange*>(
               &_SliceRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SliceRange& a, SliceRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SliceRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SliceRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SliceRange* New() const final {
    return CreateMaybeMessage<SliceRange>(nullptr);
  }

  SliceRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SliceRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SliceRange& from);
  void MergeFrom(const SliceRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SliceRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.SliceRange";
  }
  protected:
  explicit SliceRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // int32 offset = 1;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 2;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.SliceRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class SequenceRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.SequenceRange) */ {
 public:
  inline SequenceRange() : SequenceRange(nullptr) {}
  virtual ~SequenceRange();
  explicit constexpr SequenceRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SequenceRange(const SequenceRange& from);
  SequenceRange(SequenceRange&& from) noexcept
    : SequenceRange() {
    *this = ::std::move(from);
  }

  inline SequenceRange& operator=(const SequenceRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceRange& operator=(SequenceRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SequenceRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const SequenceRange* internal_default_instance() {
    return reinterpret_cast<const SequenceRange*>(
               &_SequenceRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SequenceRange& a, SequenceRange& b) {
    a.Swap(&b);
  }
  inline void Swap(SequenceRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SequenceRange* New() const final {
    return CreateMaybeMessage<SequenceRange>(nullptr);
  }

  SequenceRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SequenceRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SequenceRange& from);
  void MergeFrom(const SequenceRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SequenceRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.SequenceRange";
  }
  protected:
  explicit SequenceRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpisodeIdFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kSparseFieldNumber = 4,
  };
  // uint64 episode_id = 1;
  void clear_episode_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 episode_id() const;
  void set_episode_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_episode_id() const;
  void _internal_set_episode_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 start = 2;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::int32 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start() const;
  void _internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end = 3;
  void clear_end();
  ::PROTOBUF_NAMESPACE_ID::int32 end() const;
  void set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end() const;
  void _internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool sparse = 4;
  void clear_sparse();
  bool sparse() const;
  void set_sparse(bool value);
  private:
  bool _internal_sparse() const;
  void _internal_set_sparse(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.SequenceRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 episode_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_;
  bool sparse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FlatTrajectory_ChunkSlice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.FlatTrajectory.ChunkSlice) */ {
 public:
  inline FlatTrajectory_ChunkSlice() : FlatTrajectory_ChunkSlice(nullptr) {}
  virtual ~FlatTrajectory_ChunkSlice();
  explicit constexpr FlatTrajectory_ChunkSlice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatTrajectory_ChunkSlice(const FlatTrajectory_ChunkSlice& from);
  FlatTrajectory_ChunkSlice(FlatTrajectory_ChunkSlice&& from) noexcept
    : FlatTrajectory_ChunkSlice() {
    *this = ::std::move(from);
  }

  inline FlatTrajectory_ChunkSlice& operator=(const FlatTrajectory_ChunkSlice& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatTrajectory_ChunkSlice& operator=(FlatTrajectory_ChunkSlice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlatTrajectory_ChunkSlice& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatTrajectory_ChunkSlice* internal_default_instance() {
    return reinterpret_cast<const FlatTrajectory_ChunkSlice*>(
               &_FlatTrajectory_ChunkSlice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FlatTrajectory_ChunkSlice& a, FlatTrajectory_ChunkSlice& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatTrajectory_ChunkSlice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatTrajectory_ChunkSlice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatTrajectory_ChunkSlice* New() const final {
    return CreateMaybeMessage<FlatTrajectory_ChunkSlice>(nullptr);
  }

  FlatTrajectory_ChunkSlice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatTrajectory_ChunkSlice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlatTrajectory_ChunkSlice& from);
  void MergeFrom(const FlatTrajectory_ChunkSlice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatTrajectory_ChunkSlice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.FlatTrajectory.ChunkSlice";
  }
  protected:
  explicit FlatTrajectory_ChunkSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkKeyFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kLengthFieldNumber = 3,
    kIndexFieldNumber = 4,
  };
  // uint64 chunk_key = 1;
  void clear_chunk_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_key() const;
  void set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_chunk_key() const;
  void _internal_set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 offset = 2;
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::int32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 length = 3;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 index = 4;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.FlatTrajectory.ChunkSlice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 chunk_key_;
  ::PROTOBUF_NAMESPACE_ID::int32 offset_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FlatTrajectory_Column PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.FlatTrajectory.Column) */ {
 public:
  inline FlatTrajectory_Column() : FlatTrajectory_Column(nullptr) {}
  virtual ~FlatTrajectory_Column();
  explicit constexpr FlatTrajectory_Column(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatTrajectory_Column(const FlatTrajectory_Column& from);
  FlatTrajectory_Column(FlatTrajectory_Column&& from) noexcept
    : FlatTrajectory_Column() {
    *this = ::std::move(from);
  }

  inline FlatTrajectory_Column& operator=(const FlatTrajectory_Column& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatTrajectory_Column& operator=(FlatTrajectory_Column&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlatTrajectory_Column& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatTrajectory_Column* internal_default_instance() {
    return reinterpret_cast<const FlatTrajectory_Column*>(
               &_FlatTrajectory_Column_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FlatTrajectory_Column& a, FlatTrajectory_Column& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatTrajectory_Column* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatTrajectory_Column* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatTrajectory_Column* New() const final {
    return CreateMaybeMessage<FlatTrajectory_Column>(nullptr);
  }

  FlatTrajectory_Column* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatTrajectory_Column>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlatTrajectory_Column& from);
  void MergeFrom(const FlatTrajectory_Column& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatTrajectory_Column* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.FlatTrajectory.Column";
  }
  protected:
  explicit FlatTrajectory_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkSlicesFieldNumber = 1,
    kSqueezeFieldNumber = 2,
  };
  // repeated .DRPB.FlatTrajectory.ChunkSlice chunk_slices = 1;
  int chunk_slices_size() const;
  private:
  int _internal_chunk_slices_size() const;
  public:
  void clear_chunk_slices();
  ::DRPB::FlatTrajectory_ChunkSlice* mutable_chunk_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_ChunkSlice >*
      mutable_chunk_slices();
  private:
  const ::DRPB::FlatTrajectory_ChunkSlice& _internal_chunk_slices(int index) const;
  ::DRPB::FlatTrajectory_ChunkSlice* _internal_add_chunk_slices();
  public:
  const ::DRPB::FlatTrajectory_ChunkSlice& chunk_slices(int index) const;
  ::DRPB::FlatTrajectory_ChunkSlice* add_chunk_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_ChunkSlice >&
      chunk_slices() const;

  // bool squeeze = 2;
  void clear_squeeze();
  bool squeeze() const;
  void set_squeeze(bool value);
  private:
  bool _internal_squeeze() const;
  void _internal_set_squeeze(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.FlatTrajectory.Column)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_ChunkSlice > chunk_slices_;
  bool squeeze_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class FlatTrajectory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.FlatTrajectory) */ {
 public:
  inline FlatTrajectory() : FlatTrajectory(nullptr) {}
  virtual ~FlatTrajectory();
  explicit constexpr FlatTrajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FlatTrajectory(const FlatTrajectory& from);
  FlatTrajectory(FlatTrajectory&& from) noexcept
    : FlatTrajectory() {
    *this = ::std::move(from);
  }

  inline FlatTrajectory& operator=(const FlatTrajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlatTrajectory& operator=(FlatTrajectory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlatTrajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlatTrajectory* internal_default_instance() {
    return reinterpret_cast<const FlatTrajectory*>(
               &_FlatTrajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FlatTrajectory& a, FlatTrajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(FlatTrajectory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlatTrajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlatTrajectory* New() const final {
    return CreateMaybeMessage<FlatTrajectory>(nullptr);
  }

  FlatTrajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlatTrajectory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlatTrajectory& from);
  void MergeFrom(const FlatTrajectory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlatTrajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.FlatTrajectory";
  }
  protected:
  explicit FlatTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef FlatTrajectory_ChunkSlice ChunkSlice;
  typedef FlatTrajectory_Column Column;

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 1,
  };
  // repeated .DRPB.FlatTrajectory.Column columns = 1;
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::DRPB::FlatTrajectory_Column* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_Column >*
      mutable_columns();
  private:
  const ::DRPB::FlatTrajectory_Column& _internal_columns(int index) const;
  ::DRPB::FlatTrajectory_Column* _internal_add_columns();
  public:
  const ::DRPB::FlatTrajectory_Column& columns(int index) const;
  ::DRPB::FlatTrajectory_Column* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_Column >&
      columns() const;

  // @@protoc_insertion_point(class_scope:DRPB.FlatTrajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_Column > columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class PrioritizedItem PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.PrioritizedItem) */ {
 public:
  inline PrioritizedItem() : PrioritizedItem(nullptr) {}
  virtual ~PrioritizedItem();
  explicit constexpr PrioritizedItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrioritizedItem(const PrioritizedItem& from);
  PrioritizedItem(PrioritizedItem&& from) noexcept
    : PrioritizedItem() {
    *this = ::std::move(from);
  }

  inline PrioritizedItem& operator=(const PrioritizedItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrioritizedItem& operator=(PrioritizedItem&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PrioritizedItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrioritizedItem* internal_default_instance() {
    return reinterpret_cast<const PrioritizedItem*>(
               &_PrioritizedItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PrioritizedItem& a, PrioritizedItem& b) {
    a.Swap(&b);
  }
  inline void Swap(PrioritizedItem* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrioritizedItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PrioritizedItem* New() const final {
    return CreateMaybeMessage<PrioritizedItem>(nullptr);
  }

  PrioritizedItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PrioritizedItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PrioritizedItem& from);
  void MergeFrom(const PrioritizedItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrioritizedItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.PrioritizedItem";
  }
  protected:
  explicit PrioritizedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeprecatedChunkKeysFieldNumber = 3,
    kTableFieldNumber = 2,
    kDeprecatedSequenceRangeFieldNumber = 4,
    kInsertedAtFieldNumber = 7,
    kFlatTrajectoryFieldNumber = 8,
    kKeyFieldNumber = 1,
    kPriorityFieldNumber = 5,
    kTimesSampledFieldNumber = 6,
  };
  // repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
  PROTOBUF_DEPRECATED int deprecated_chunk_keys_size() const;
  private:
  int _internal_deprecated_chunk_keys_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_chunk_keys();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_deprecated_chunk_keys(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_deprecated_chunk_keys() const;
  void _internal_add_deprecated_chunk_keys(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_deprecated_chunk_keys();
  public:
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint64 deprecated_chunk_keys(int index) const;
  PROTOBUF_DEPRECATED void set_deprecated_chunk_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  PROTOBUF_DEPRECATED void add_deprecated_chunk_keys(::PROTOBUF_NAMESPACE_ID::uint64 value);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      deprecated_chunk_keys() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_deprecated_chunk_keys();

  // string table = 2;
  void clear_table();
  const std::string& table() const;
  void set_table(const std::string& value);
  void set_table(std::string&& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  std::string* mutable_table();
  std::string* release_table();
  void set_allocated_table(std::string* table);
  private:
  const std::string& _internal_table() const;
  void _internal_set_table(const std::string& value);
  std::string* _internal_mutable_table();
  public:

  // .DRPB.SliceRange deprecated_sequence_range = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_deprecated_sequence_range() const;
  private:
  bool _internal_has_deprecated_sequence_range() const;
  public:
  PROTOBUF_DEPRECATED void clear_deprecated_sequence_range();
  PROTOBUF_DEPRECATED const ::DRPB::SliceRange& deprecated_sequence_range() const;
  PROTOBUF_DEPRECATED ::DRPB::SliceRange* release_deprecated_sequence_range();
  PROTOBUF_DEPRECATED ::DRPB::SliceRange* mutable_deprecated_sequence_range();
  PROTOBUF_DEPRECATED void set_allocated_deprecated_sequence_range(::DRPB::SliceRange* deprecated_sequence_range);
  private:
  const ::DRPB::SliceRange& _internal_deprecated_sequence_range() const;
  ::DRPB::SliceRange* _internal_mutable_deprecated_sequence_range();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_deprecated_sequence_range(
      ::DRPB::SliceRange* deprecated_sequence_range);
  PROTOBUF_DEPRECATED ::DRPB::SliceRange* unsafe_arena_release_deprecated_sequence_range();

  // .google.protobuf.Timestamp inserted_at = 7;
  bool has_inserted_at() const;
  private:
  bool _internal_has_inserted_at() const;
  public:
  void clear_inserted_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& inserted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_inserted_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_inserted_at();
  void set_allocated_inserted_at(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_inserted_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_inserted_at();
  public:
  void unsafe_arena_set_allocated_inserted_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_inserted_at();

  // .DRPB.FlatTrajectory flat_trajectory = 8;
  bool has_flat_trajectory() const;
  private:
  bool _internal_has_flat_trajectory() const;
  public:
  void clear_flat_trajectory();
  const ::DRPB::FlatTrajectory& flat_trajectory() const;
  ::DRPB::FlatTrajectory* release_flat_trajectory();
  ::DRPB::FlatTrajectory* mutable_flat_trajectory();
  void set_allocated_flat_trajectory(::DRPB::FlatTrajectory* flat_trajectory);
  private:
  const ::DRPB::FlatTrajectory& _internal_flat_trajectory() const;
  ::DRPB::FlatTrajectory* _internal_mutable_flat_trajectory();
  public:
  void unsafe_arena_set_allocated_flat_trajectory(
      ::DRPB::FlatTrajectory* flat_trajectory);
  ::DRPB::FlatTrajectory* unsafe_arena_release_flat_trajectory();

  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double priority = 5;
  void clear_priority();
  double priority() const;
  void set_priority(double value);
  private:
  double _internal_priority() const;
  void _internal_set_priority(double value);
  public:

  // int32 times_sampled = 6;
  void clear_times_sampled();
  ::PROTOBUF_NAMESPACE_ID::int32 times_sampled() const;
  void set_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_times_sampled() const;
  void _internal_set_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.PrioritizedItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > deprecated_chunk_keys_;
  mutable std::atomic<int> _deprecated_chunk_keys_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_;
  ::DRPB::SliceRange* deprecated_sequence_range_;
  PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at_;
  ::DRPB::FlatTrajectory* flat_trajectory_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  double priority_;
  ::PROTOBUF_NAMESPACE_ID::int32 times_sampled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class KeyWithPriority PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.KeyWithPriority) */ {
 public:
  inline KeyWithPriority() : KeyWithPriority(nullptr) {}
  virtual ~KeyWithPriority();
  explicit constexpr KeyWithPriority(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyWithPriority(const KeyWithPriority& from);
  KeyWithPriority(KeyWithPriority&& from) noexcept
    : KeyWithPriority() {
    *this = ::std::move(from);
  }

  inline KeyWithPriority& operator=(const KeyWithPriority& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyWithPriority& operator=(KeyWithPriority&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyWithPriority& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyWithPriority* internal_default_instance() {
    return reinterpret_cast<const KeyWithPriority*>(
               &_KeyWithPriority_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(KeyWithPriority& a, KeyWithPriority& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyWithPriority* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyWithPriority* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyWithPriority* New() const final {
    return CreateMaybeMessage<KeyWithPriority>(nullptr);
  }

  KeyWithPriority* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyWithPriority>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyWithPriority& from);
  void MergeFrom(const KeyWithPriority& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyWithPriority* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.KeyWithPriority";
  }
  protected:
  explicit KeyWithPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kPriorityFieldNumber = 2,
  };
  // uint64 key = 1;
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint64 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double priority = 2;
  void clear_priority();
  double priority() const;
  void set_priority(double value);
  private:
  double _internal_priority() const;
  void _internal_set_priority(double value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.KeyWithPriority)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 key_;
  double priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class SampleInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.SampleInfo) */ {
 public:
  inline SampleInfo() : SampleInfo(nullptr) {}
  virtual ~SampleInfo();
  explicit constexpr SampleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SampleInfo(const SampleInfo& from);
  SampleInfo(SampleInfo&& from) noexcept
    : SampleInfo() {
    *this = ::std::move(from);
  }

  inline SampleInfo& operator=(const SampleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SampleInfo& operator=(SampleInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SampleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SampleInfo* internal_default_instance() {
    return reinterpret_cast<const SampleInfo*>(
               &_SampleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SampleInfo& a, SampleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SampleInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SampleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SampleInfo* New() const final {
    return CreateMaybeMessage<SampleInfo>(nullptr);
  }

  SampleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SampleInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SampleInfo& from);
  void MergeFrom(const SampleInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SampleInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.SampleInfo";
  }
  protected:
  explicit SampleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemFieldNumber = 1,
    kProbabilityFieldNumber = 2,
    kTableSizeFieldNumber = 3,
    kRateLimitedFieldNumber = 4,
  };
  // .DRPB.PrioritizedItem item = 1;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::DRPB::PrioritizedItem& item() const;
  ::DRPB::PrioritizedItem* release_item();
  ::DRPB::PrioritizedItem* mutable_item();
  void set_allocated_item(::DRPB::PrioritizedItem* item);
  private:
  const ::DRPB::PrioritizedItem& _internal_item() const;
  ::DRPB::PrioritizedItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::DRPB::PrioritizedItem* item);
  ::DRPB::PrioritizedItem* unsafe_arena_release_item();

  // double probability = 2;
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // int64 table_size = 3;
  void clear_table_size();
  ::PROTOBUF_NAMESPACE_ID::int64 table_size() const;
  void set_table_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_table_size() const;
  void _internal_set_table_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool rate_limited = 4;
  void clear_rate_limited();
  bool rate_limited() const;
  void set_rate_limited(bool value);
  private:
  bool _internal_rate_limited() const;
  void _internal_set_rate_limited(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.SampleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DRPB::PrioritizedItem* item_;
  double probability_;
  ::PROTOBUF_NAMESPACE_ID::int64 table_size_;
  bool rate_limited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TableInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TableInfo) */ {
 public:
  inline TableInfo() : TableInfo(nullptr) {}
  virtual ~TableInfo();
  explicit constexpr TableInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TableInfo(const TableInfo& from);
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TableInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TableInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const final {
    return CreateMaybeMessage<TableInfo>(nullptr);
  }

  TableInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TableInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TableInfo& from);
  void MergeFrom(const TableInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TableInfo";
  }
  protected:
  explicit TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 8,
    kSamplerOptionsFieldNumber = 1,
    kRemoverOptionsFieldNumber = 2,
    kRateLimiterInfoFieldNumber = 5,
    kSignatureFieldNumber = 6,
    kMaxSizeFieldNumber = 3,
    kCurrentSizeFieldNumber = 7,
    kNumEpisodesFieldNumber = 9,
    kNumDeletedEpisodesFieldNumber = 10,
    kNumUniqueSamplesFieldNumber = 11,
    kMaxTimesSampledFieldNumber = 4,
  };
  // string name = 8;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .DRPB.KeyDistributionOptions sampler_options = 1;
  bool has_sampler_options() const;
  private:
  bool _internal_has_sampler_options() const;
  public:
  void clear_sampler_options();
  const ::DRPB::KeyDistributionOptions& sampler_options() const;
  ::DRPB::KeyDistributionOptions* release_sampler_options();
  ::DRPB::KeyDistributionOptions* mutable_sampler_options();
  void set_allocated_sampler_options(::DRPB::KeyDistributionOptions* sampler_options);
  private:
  const ::DRPB::KeyDistributionOptions& _internal_sampler_options() const;
  ::DRPB::KeyDistributionOptions* _internal_mutable_sampler_options();
  public:
  void unsafe_arena_set_allocated_sampler_options(
      ::DRPB::KeyDistributionOptions* sampler_options);
  ::DRPB::KeyDistributionOptions* unsafe_arena_release_sampler_options();

  // .DRPB.KeyDistributionOptions remover_options = 2;
  bool has_remover_options() const;
  private:
  bool _internal_has_remover_options() const;
  public:
  void clear_remover_options();
  const ::DRPB::KeyDistributionOptions& remover_options() const;
  ::DRPB::KeyDistributionOptions* release_remover_options();
  ::DRPB::KeyDistributionOptions* mutable_remover_options();
  void set_allocated_remover_options(::DRPB::KeyDistributionOptions* remover_options);
  private:
  const ::DRPB::KeyDistributionOptions& _internal_remover_options() const;
  ::DRPB::KeyDistributionOptions* _internal_mutable_remover_options();
  public:
  void unsafe_arena_set_allocated_remover_options(
      ::DRPB::KeyDistributionOptions* remover_options);
  ::DRPB::KeyDistributionOptions* unsafe_arena_release_remover_options();

  // .DRPB.RateLimiterInfo rate_limiter_info = 5;
  bool has_rate_limiter_info() const;
  private:
  bool _internal_has_rate_limiter_info() const;
  public:
  void clear_rate_limiter_info();
  const ::DRPB::RateLimiterInfo& rate_limiter_info() const;
  ::DRPB::RateLimiterInfo* release_rate_limiter_info();
  ::DRPB::RateLimiterInfo* mutable_rate_limiter_info();
  void set_allocated_rate_limiter_info(::DRPB::RateLimiterInfo* rate_limiter_info);
  private:
  const ::DRPB::RateLimiterInfo& _internal_rate_limiter_info() const;
  ::DRPB::RateLimiterInfo* _internal_mutable_rate_limiter_info();
  public:
  void unsafe_arena_set_allocated_rate_limiter_info(
      ::DRPB::RateLimiterInfo* rate_limiter_info);
  ::DRPB::RateLimiterInfo* unsafe_arena_release_rate_limiter_info();

  // .DRPB.StructuredValue signature = 6;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  const ::DRPB::StructuredValue& signature() const;
  ::DRPB::StructuredValue* release_signature();
  ::DRPB::StructuredValue* mutable_signature();
  void set_allocated_signature(::DRPB::StructuredValue* signature);
  private:
  const ::DRPB::StructuredValue& _internal_signature() const;
  ::DRPB::StructuredValue* _internal_mutable_signature();
  public:
  void unsafe_arena_set_allocated_signature(
      ::DRPB::StructuredValue* signature);
  ::DRPB::StructuredValue* unsafe_arena_release_signature();

  // int64 max_size = 3;
  void clear_max_size();
  ::PROTOBUF_NAMESPACE_ID::int64 max_size() const;
  void set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_size() const;
  void _internal_set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 current_size = 7;
  void clear_current_size();
  ::PROTOBUF_NAMESPACE_ID::int64 current_size() const;
  void set_current_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_current_size() const;
  void _internal_set_current_size(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_episodes = 9;
  void clear_num_episodes();
  ::PROTOBUF_NAMESPACE_ID::int64 num_episodes() const;
  void set_num_episodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_episodes() const;
  void _internal_set_num_episodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_deleted_episodes = 10;
  void clear_num_deleted_episodes();
  ::PROTOBUF_NAMESPACE_ID::int64 num_deleted_episodes() const;
  void set_num_deleted_episodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_deleted_episodes() const;
  void _internal_set_num_deleted_episodes(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 num_unique_samples = 11;
  void clear_num_unique_samples();
  ::PROTOBUF_NAMESPACE_ID::int64 num_unique_samples() const;
  void set_num_unique_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_num_unique_samples() const;
  void _internal_set_num_unique_samples(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 max_times_sampled = 4;
  void clear_max_times_sampled();
  ::PROTOBUF_NAMESPACE_ID::int32 max_times_sampled() const;
  void set_max_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_times_sampled() const;
  void _internal_set_max_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TableInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::DRPB::KeyDistributionOptions* sampler_options_;
  ::DRPB::KeyDistributionOptions* remover_options_;
  ::DRPB::RateLimiterInfo* rate_limiter_info_;
  ::DRPB::StructuredValue* signature_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 current_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_episodes_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_deleted_episodes_;
  ::PROTOBUF_NAMESPACE_ID::int64 num_unique_samples_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_times_sampled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class StructuredValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.StructuredValue) */ {
 public:
  inline StructuredValue() : StructuredValue(nullptr) {}
  virtual ~StructuredValue();
  explicit constexpr StructuredValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StructuredValue(const StructuredValue& from);
  StructuredValue(StructuredValue&& from) noexcept
    : StructuredValue() {
    *this = ::std::move(from);
  }

  inline StructuredValue& operator=(const StructuredValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline StructuredValue& operator=(StructuredValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StructuredValue& default_instance() {
    return *internal_default_instance();
  }
  enum KindCase {
    kNoneValue = 1,
    kFloat64Value = 11,
    kInt64Value = 12,
    kStringValue = 13,
    kBoolValue = 14,
    kTensorShapeValue = 31,
    kTensorDtypeValue = 32,
    kTensorSpecValue = 33,
    kTypeSpecValue = 34,
    kBoundedTensorSpecValue = 35,
    kListValue = 51,
    kTupleValue = 52,
    kDictValue = 53,
    kNamedTupleValue = 54,
    KIND_NOT_SET = 0,
  };

  static inline const StructuredValue* internal_default_instance() {
    return reinterpret_cast<const StructuredValue*>(
               &_StructuredValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(StructuredValue& a, StructuredValue& b) {
    a.Swap(&b);
  }
  inline void Swap(StructuredValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StructuredValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StructuredValue* New() const final {
    return CreateMaybeMessage<StructuredValue>(nullptr);
  }

  StructuredValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StructuredValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StructuredValue& from);
  void MergeFrom(const StructuredValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StructuredValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.StructuredValue";
  }
  protected:
  explicit StructuredValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoneValueFieldNumber = 1,
    kFloat64ValueFieldNumber = 11,
    kInt64ValueFieldNumber = 12,
    kStringValueFieldNumber = 13,
    kBoolValueFieldNumber = 14,
    kTensorShapeValueFieldNumber = 31,
    kTensorDtypeValueFieldNumber = 32,
    kTensorSpecValueFieldNumber = 33,
    kTypeSpecValueFieldNumber = 34,
    kBoundedTensorSpecValueFieldNumber = 35,
    kListValueFieldNumber = 51,
    kTupleValueFieldNumber = 52,
    kDictValueFieldNumber = 53,
    kNamedTupleValueFieldNumber = 54,
  };
  // .DRPB.NoneValue none_value = 1;
  bool has_none_value() const;
  private:
  bool _internal_has_none_value() const;
  public:
  void clear_none_value();
  const ::DRPB::NoneValue& none_value() const;
  ::DRPB::NoneValue* release_none_value();
  ::DRPB::NoneValue* mutable_none_value();
  void set_allocated_none_value(::DRPB::NoneValue* none_value);
  private:
  const ::DRPB::NoneValue& _internal_none_value() const;
  ::DRPB::NoneValue* _internal_mutable_none_value();
  public:
  void unsafe_arena_set_allocated_none_value(
      ::DRPB::NoneValue* none_value);
  ::DRPB::NoneValue* unsafe_arena_release_none_value();

  // double float64_value = 11;
  bool has_float64_value() const;
  private:
  bool _internal_has_float64_value() const;
  public:
  void clear_float64_value();
  double float64_value() const;
  void set_float64_value(double value);
  private:
  double _internal_float64_value() const;
  void _internal_set_float64_value(double value);
  public:

  // sint64 int64_value = 12;
  bool has_int64_value() const;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // string string_value = 13;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bool bool_value = 14;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // .DRPB.TensorShapeProto tensor_shape_value = 31;
  bool has_tensor_shape_value() const;
  private:
  bool _internal_has_tensor_shape_value() const;
  public:
  void clear_tensor_shape_value();
  const ::DRPB::TensorShapeProto& tensor_shape_value() const;
  ::DRPB::TensorShapeProto* release_tensor_shape_value();
  ::DRPB::TensorShapeProto* mutable_tensor_shape_value();
  void set_allocated_tensor_shape_value(::DRPB::TensorShapeProto* tensor_shape_value);
  private:
  const ::DRPB::TensorShapeProto& _internal_tensor_shape_value() const;
  ::DRPB::TensorShapeProto* _internal_mutable_tensor_shape_value();
  public:
  void unsafe_arena_set_allocated_tensor_shape_value(
      ::DRPB::TensorShapeProto* tensor_shape_value);
  ::DRPB::TensorShapeProto* unsafe_arena_release_tensor_shape_value();

  // .DRPB.DataType tensor_dtype_value = 32;
  bool has_tensor_dtype_value() const;
  private:
  bool _internal_has_tensor_dtype_value() const;
  public:
  void clear_tensor_dtype_value();
  ::DRPB::DataType tensor_dtype_value() const;
  void set_tensor_dtype_value(::DRPB::DataType value);
  private:
  ::DRPB::DataType _internal_tensor_dtype_value() const;
  void _internal_set_tensor_dtype_value(::DRPB::DataType value);
  public:

  // .DRPB.TensorSpecProto tensor_spec_value = 33;
  bool has_tensor_spec_value() const;
  private:
  bool _internal_has_tensor_spec_value() const;
  public:
  void clear_tensor_spec_value();
  const ::DRPB::TensorSpecProto& tensor_spec_value() const;
  ::DRPB::TensorSpecProto* release_tensor_spec_value();
  ::DRPB::TensorSpecProto* mutable_tensor_spec_value();
  void set_allocated_tensor_spec_value(::DRPB::TensorSpecProto* tensor_spec_value);
  private:
  const ::DRPB::TensorSpecProto& _internal_tensor_spec_value() const;
  ::DRPB::TensorSpecProto* _internal_mutable_tensor_spec_value();
  public:
  void unsafe_arena_set_allocated_tensor_spec_value(
      ::DRPB::TensorSpecProto* tensor_spec_value);
  ::DRPB::TensorSpecProto* unsafe_arena_release_tensor_spec_value();

  // .DRPB.TypeSpecProto type_spec_value = 34;
  bool has_type_spec_value() const;
  private:
  bool _internal_has_type_spec_value() const;
  public:
  void clear_type_spec_value();
  const ::DRPB::TypeSpecProto& type_spec_value() const;
  ::DRPB::TypeSpecProto* release_type_spec_value();
  ::DRPB::TypeSpecProto* mutable_type_spec_value();
  void set_allocated_type_spec_value(::DRPB::TypeSpecProto* type_spec_value);
  private:
  const ::DRPB::TypeSpecProto& _internal_type_spec_value() const;
  ::DRPB::TypeSpecProto* _internal_mutable_type_spec_value();
  public:
  void unsafe_arena_set_allocated_type_spec_value(
      ::DRPB::TypeSpecProto* type_spec_value);
  ::DRPB::TypeSpecProto* unsafe_arena_release_type_spec_value();

  // .DRPB.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
  bool has_bounded_tensor_spec_value() const;
  private:
  bool _internal_has_bounded_tensor_spec_value() const;
  public:
  void clear_bounded_tensor_spec_value();
  const ::DRPB::BoundedTensorSpecProto& bounded_tensor_spec_value() const;
  ::DRPB::BoundedTensorSpecProto* release_bounded_tensor_spec_value();
  ::DRPB::BoundedTensorSpecProto* mutable_bounded_tensor_spec_value();
  void set_allocated_bounded_tensor_spec_value(::DRPB::BoundedTensorSpecProto* bounded_tensor_spec_value);
  private:
  const ::DRPB::BoundedTensorSpecProto& _internal_bounded_tensor_spec_value() const;
  ::DRPB::BoundedTensorSpecProto* _internal_mutable_bounded_tensor_spec_value();
  public:
  void unsafe_arena_set_allocated_bounded_tensor_spec_value(
      ::DRPB::BoundedTensorSpecProto* bounded_tensor_spec_value);
  ::DRPB::BoundedTensorSpecProto* unsafe_arena_release_bounded_tensor_spec_value();

  // .DRPB.ListValue list_value = 51;
  bool has_list_value() const;
  private:
  bool _internal_has_list_value() const;
  public:
  void clear_list_value();
  const ::DRPB::ListValue& list_value() const;
  ::DRPB::ListValue* release_list_value();
  ::DRPB::ListValue* mutable_list_value();
  void set_allocated_list_value(::DRPB::ListValue* list_value);
  private:
  const ::DRPB::ListValue& _internal_list_value() const;
  ::DRPB::ListValue* _internal_mutable_list_value();
  public:
  void unsafe_arena_set_allocated_list_value(
      ::DRPB::ListValue* list_value);
  ::DRPB::ListValue* unsafe_arena_release_list_value();

  // .DRPB.TupleValue tuple_value = 52;
  bool has_tuple_value() const;
  private:
  bool _internal_has_tuple_value() const;
  public:
  void clear_tuple_value();
  const ::DRPB::TupleValue& tuple_value() const;
  ::DRPB::TupleValue* release_tuple_value();
  ::DRPB::TupleValue* mutable_tuple_value();
  void set_allocated_tuple_value(::DRPB::TupleValue* tuple_value);
  private:
  const ::DRPB::TupleValue& _internal_tuple_value() const;
  ::DRPB::TupleValue* _internal_mutable_tuple_value();
  public:
  void unsafe_arena_set_allocated_tuple_value(
      ::DRPB::TupleValue* tuple_value);
  ::DRPB::TupleValue* unsafe_arena_release_tuple_value();

  // .DRPB.DictValue dict_value = 53;
  bool has_dict_value() const;
  private:
  bool _internal_has_dict_value() const;
  public:
  void clear_dict_value();
  const ::DRPB::DictValue& dict_value() const;
  ::DRPB::DictValue* release_dict_value();
  ::DRPB::DictValue* mutable_dict_value();
  void set_allocated_dict_value(::DRPB::DictValue* dict_value);
  private:
  const ::DRPB::DictValue& _internal_dict_value() const;
  ::DRPB::DictValue* _internal_mutable_dict_value();
  public:
  void unsafe_arena_set_allocated_dict_value(
      ::DRPB::DictValue* dict_value);
  ::DRPB::DictValue* unsafe_arena_release_dict_value();

  // .DRPB.NamedTupleValue named_tuple_value = 54;
  bool has_named_tuple_value() const;
  private:
  bool _internal_has_named_tuple_value() const;
  public:
  void clear_named_tuple_value();
  const ::DRPB::NamedTupleValue& named_tuple_value() const;
  ::DRPB::NamedTupleValue* release_named_tuple_value();
  ::DRPB::NamedTupleValue* mutable_named_tuple_value();
  void set_allocated_named_tuple_value(::DRPB::NamedTupleValue* named_tuple_value);
  private:
  const ::DRPB::NamedTupleValue& _internal_named_tuple_value() const;
  ::DRPB::NamedTupleValue* _internal_mutable_named_tuple_value();
  public:
  void unsafe_arena_set_allocated_named_tuple_value(
      ::DRPB::NamedTupleValue* named_tuple_value);
  ::DRPB::NamedTupleValue* unsafe_arena_release_named_tuple_value();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:DRPB.StructuredValue)
 private:
  class _Internal;
  void set_has_none_value();
  void set_has_float64_value();
  void set_has_int64_value();
  void set_has_string_value();
  void set_has_bool_value();
  void set_has_tensor_shape_value();
  void set_has_tensor_dtype_value();
  void set_has_tensor_spec_value();
  void set_has_type_spec_value();
  void set_has_bounded_tensor_spec_value();
  void set_has_list_value();
  void set_has_tuple_value();
  void set_has_dict_value();
  void set_has_named_tuple_value();

  inline bool has_kind() const;
  inline void clear_has_kind();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union KindUnion {
    constexpr KindUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::DRPB::NoneValue* none_value_;
    double float64_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    bool bool_value_;
    ::DRPB::TensorShapeProto* tensor_shape_value_;
    int tensor_dtype_value_;
    ::DRPB::TensorSpecProto* tensor_spec_value_;
    ::DRPB::TypeSpecProto* type_spec_value_;
    ::DRPB::BoundedTensorSpecProto* bounded_tensor_spec_value_;
    ::DRPB::ListValue* list_value_;
    ::DRPB::TupleValue* tuple_value_;
    ::DRPB::DictValue* dict_value_;
    ::DRPB::NamedTupleValue* named_tuple_value_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class NoneValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.NoneValue) */ {
 public:
  inline NoneValue() : NoneValue(nullptr) {}
  virtual ~NoneValue();
  explicit constexpr NoneValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NoneValue(const NoneValue& from);
  NoneValue(NoneValue&& from) noexcept
    : NoneValue() {
    *this = ::std::move(from);
  }

  inline NoneValue& operator=(const NoneValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoneValue& operator=(NoneValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoneValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoneValue* internal_default_instance() {
    return reinterpret_cast<const NoneValue*>(
               &_NoneValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(NoneValue& a, NoneValue& b) {
    a.Swap(&b);
  }
  inline void Swap(NoneValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoneValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoneValue* New() const final {
    return CreateMaybeMessage<NoneValue>(nullptr);
  }

  NoneValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoneValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoneValue& from);
  void MergeFrom(const NoneValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoneValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.NoneValue";
  }
  protected:
  explicit NoneValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DRPB.NoneValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class ListValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.ListValue) */ {
 public:
  inline ListValue() : ListValue(nullptr) {}
  virtual ~ListValue();
  explicit constexpr ListValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListValue(const ListValue& from);
  ListValue(ListValue&& from) noexcept
    : ListValue() {
    *this = ::std::move(from);
  }

  inline ListValue& operator=(const ListValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListValue& operator=(ListValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListValue* internal_default_instance() {
    return reinterpret_cast<const ListValue*>(
               &_ListValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListValue& a, ListValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ListValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListValue* New() const final {
    return CreateMaybeMessage<ListValue>(nullptr);
  }

  ListValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListValue& from);
  void MergeFrom(const ListValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.ListValue";
  }
  protected:
  explicit ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .DRPB.StructuredValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::DRPB::StructuredValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >*
      mutable_values();
  private:
  const ::DRPB::StructuredValue& _internal_values(int index) const;
  ::DRPB::StructuredValue* _internal_add_values();
  public:
  const ::DRPB::StructuredValue& values(int index) const;
  ::DRPB::StructuredValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:DRPB.ListValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TupleValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TupleValue) */ {
 public:
  inline TupleValue() : TupleValue(nullptr) {}
  virtual ~TupleValue();
  explicit constexpr TupleValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TupleValue(const TupleValue& from);
  TupleValue(TupleValue&& from) noexcept
    : TupleValue() {
    *this = ::std::move(from);
  }

  inline TupleValue& operator=(const TupleValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TupleValue& operator=(TupleValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TupleValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TupleValue* internal_default_instance() {
    return reinterpret_cast<const TupleValue*>(
               &_TupleValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TupleValue& a, TupleValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TupleValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TupleValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TupleValue* New() const final {
    return CreateMaybeMessage<TupleValue>(nullptr);
  }

  TupleValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TupleValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TupleValue& from);
  void MergeFrom(const TupleValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TupleValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TupleValue";
  }
  protected:
  explicit TupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .DRPB.StructuredValue values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::DRPB::StructuredValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >*
      mutable_values();
  private:
  const ::DRPB::StructuredValue& _internal_values(int index) const;
  ::DRPB::StructuredValue* _internal_add_values();
  public:
  const ::DRPB::StructuredValue& values(int index) const;
  ::DRPB::StructuredValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >&
      values() const;

  // @@protoc_insertion_point(class_scope:DRPB.TupleValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue > values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class DictValue_FieldsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DictValue_FieldsEntry_DoNotUse, 
    std::string, ::DRPB::StructuredValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<DictValue_FieldsEntry_DoNotUse, 
    std::string, ::DRPB::StructuredValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  DictValue_FieldsEntry_DoNotUse();
  explicit constexpr DictValue_FieldsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit DictValue_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const DictValue_FieldsEntry_DoNotUse& other);
  static const DictValue_FieldsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const DictValue_FieldsEntry_DoNotUse*>(&_DictValue_FieldsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "DRPB.DictValue.FieldsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_schema_2eproto);
    return ::descriptor_table_schema_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class DictValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.DictValue) */ {
 public:
  inline DictValue() : DictValue(nullptr) {}
  virtual ~DictValue();
  explicit constexpr DictValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DictValue(const DictValue& from);
  DictValue(DictValue&& from) noexcept
    : DictValue() {
    *this = ::std::move(from);
  }

  inline DictValue& operator=(const DictValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline DictValue& operator=(DictValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DictValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const DictValue* internal_default_instance() {
    return reinterpret_cast<const DictValue*>(
               &_DictValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DictValue& a, DictValue& b) {
    a.Swap(&b);
  }
  inline void Swap(DictValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DictValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DictValue* New() const final {
    return CreateMaybeMessage<DictValue>(nullptr);
  }

  DictValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DictValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DictValue& from);
  void MergeFrom(const DictValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DictValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.DictValue";
  }
  protected:
  explicit DictValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 1,
  };
  // map<string, .DRPB.StructuredValue> fields = 1;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >&
      _internal_fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >*
      _internal_mutable_fields();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >&
      fields() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >*
      mutable_fields();

  // @@protoc_insertion_point(class_scope:DRPB.DictValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      DictValue_FieldsEntry_DoNotUse,
      std::string, ::DRPB::StructuredValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> fields_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class PairValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.PairValue) */ {
 public:
  inline PairValue() : PairValue(nullptr) {}
  virtual ~PairValue();
  explicit constexpr PairValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PairValue(const PairValue& from);
  PairValue(PairValue&& from) noexcept
    : PairValue() {
    *this = ::std::move(from);
  }

  inline PairValue& operator=(const PairValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairValue& operator=(PairValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const PairValue* internal_default_instance() {
    return reinterpret_cast<const PairValue*>(
               &_PairValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PairValue& a, PairValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PairValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairValue* New() const final {
    return CreateMaybeMessage<PairValue>(nullptr);
  }

  PairValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairValue& from);
  void MergeFrom(const PairValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.PairValue";
  }
  protected:
  explicit PairValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .DRPB.StructuredValue value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::DRPB::StructuredValue& value() const;
  ::DRPB::StructuredValue* release_value();
  ::DRPB::StructuredValue* mutable_value();
  void set_allocated_value(::DRPB::StructuredValue* value);
  private:
  const ::DRPB::StructuredValue& _internal_value() const;
  ::DRPB::StructuredValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::DRPB::StructuredValue* value);
  ::DRPB::StructuredValue* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:DRPB.PairValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::DRPB::StructuredValue* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class NamedTupleValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.NamedTupleValue) */ {
 public:
  inline NamedTupleValue() : NamedTupleValue(nullptr) {}
  virtual ~NamedTupleValue();
  explicit constexpr NamedTupleValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NamedTupleValue(const NamedTupleValue& from);
  NamedTupleValue(NamedTupleValue&& from) noexcept
    : NamedTupleValue() {
    *this = ::std::move(from);
  }

  inline NamedTupleValue& operator=(const NamedTupleValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline NamedTupleValue& operator=(NamedTupleValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NamedTupleValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const NamedTupleValue* internal_default_instance() {
    return reinterpret_cast<const NamedTupleValue*>(
               &_NamedTupleValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(NamedTupleValue& a, NamedTupleValue& b) {
    a.Swap(&b);
  }
  inline void Swap(NamedTupleValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NamedTupleValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NamedTupleValue* New() const final {
    return CreateMaybeMessage<NamedTupleValue>(nullptr);
  }

  NamedTupleValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NamedTupleValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NamedTupleValue& from);
  void MergeFrom(const NamedTupleValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NamedTupleValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.NamedTupleValue";
  }
  protected:
  explicit NamedTupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated .DRPB.PairValue values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  ::DRPB::PairValue* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::PairValue >*
      mutable_values();
  private:
  const ::DRPB::PairValue& _internal_values(int index) const;
  ::DRPB::PairValue* _internal_add_values();
  public:
  const ::DRPB::PairValue& values(int index) const;
  ::DRPB::PairValue* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::PairValue >&
      values() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:DRPB.NamedTupleValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::PairValue > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TensorSpecProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TensorSpecProto) */ {
 public:
  inline TensorSpecProto() : TensorSpecProto(nullptr) {}
  virtual ~TensorSpecProto();
  explicit constexpr TensorSpecProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TensorSpecProto(const TensorSpecProto& from);
  TensorSpecProto(TensorSpecProto&& from) noexcept
    : TensorSpecProto() {
    *this = ::std::move(from);
  }

  inline TensorSpecProto& operator=(const TensorSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorSpecProto& operator=(TensorSpecProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorSpecProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TensorSpecProto* internal_default_instance() {
    return reinterpret_cast<const TensorSpecProto*>(
               &_TensorSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TensorSpecProto& a, TensorSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorSpecProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorSpecProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorSpecProto* New() const final {
    return CreateMaybeMessage<TensorSpecProto>(nullptr);
  }

  TensorSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorSpecProto& from);
  void MergeFrom(const TensorSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TensorSpecProto";
  }
  protected:
  explicit TensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShapeFieldNumber = 2,
    kDtypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .DRPB.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::DRPB::TensorShapeProto& shape() const;
  ::DRPB::TensorShapeProto* release_shape();
  ::DRPB::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::DRPB::TensorShapeProto* shape);
  private:
  const ::DRPB::TensorShapeProto& _internal_shape() const;
  ::DRPB::TensorShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::DRPB::TensorShapeProto* shape);
  ::DRPB::TensorShapeProto* unsafe_arena_release_shape();

  // .DRPB.DataType dtype = 3;
  void clear_dtype();
  ::DRPB::DataType dtype() const;
  void set_dtype(::DRPB::DataType value);
  private:
  ::DRPB::DataType _internal_dtype() const;
  void _internal_set_dtype(::DRPB::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TensorSpecProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::DRPB::TensorShapeProto* shape_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class BoundedTensorSpecProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.BoundedTensorSpecProto) */ {
 public:
  inline BoundedTensorSpecProto() : BoundedTensorSpecProto(nullptr) {}
  virtual ~BoundedTensorSpecProto();
  explicit constexpr BoundedTensorSpecProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoundedTensorSpecProto(const BoundedTensorSpecProto& from);
  BoundedTensorSpecProto(BoundedTensorSpecProto&& from) noexcept
    : BoundedTensorSpecProto() {
    *this = ::std::move(from);
  }

  inline BoundedTensorSpecProto& operator=(const BoundedTensorSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundedTensorSpecProto& operator=(BoundedTensorSpecProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundedTensorSpecProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoundedTensorSpecProto* internal_default_instance() {
    return reinterpret_cast<const BoundedTensorSpecProto*>(
               &_BoundedTensorSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BoundedTensorSpecProto& a, BoundedTensorSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundedTensorSpecProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundedTensorSpecProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundedTensorSpecProto* New() const final {
    return CreateMaybeMessage<BoundedTensorSpecProto>(nullptr);
  }

  BoundedTensorSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundedTensorSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundedTensorSpecProto& from);
  void MergeFrom(const BoundedTensorSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundedTensorSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.BoundedTensorSpecProto";
  }
  protected:
  explicit BoundedTensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kShapeFieldNumber = 2,
    kMinimumFieldNumber = 4,
    kMaximumFieldNumber = 5,
    kDtypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .DRPB.TensorShapeProto shape = 2;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::DRPB::TensorShapeProto& shape() const;
  ::DRPB::TensorShapeProto* release_shape();
  ::DRPB::TensorShapeProto* mutable_shape();
  void set_allocated_shape(::DRPB::TensorShapeProto* shape);
  private:
  const ::DRPB::TensorShapeProto& _internal_shape() const;
  ::DRPB::TensorShapeProto* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::DRPB::TensorShapeProto* shape);
  ::DRPB::TensorShapeProto* unsafe_arena_release_shape();

  // .DRPB.TensorProto minimum = 4;
  bool has_minimum() const;
  private:
  bool _internal_has_minimum() const;
  public:
  void clear_minimum();
  const ::DRPB::TensorProto& minimum() const;
  ::DRPB::TensorProto* release_minimum();
  ::DRPB::TensorProto* mutable_minimum();
  void set_allocated_minimum(::DRPB::TensorProto* minimum);
  private:
  const ::DRPB::TensorProto& _internal_minimum() const;
  ::DRPB::TensorProto* _internal_mutable_minimum();
  public:
  void unsafe_arena_set_allocated_minimum(
      ::DRPB::TensorProto* minimum);
  ::DRPB::TensorProto* unsafe_arena_release_minimum();

  // .DRPB.TensorProto maximum = 5;
  bool has_maximum() const;
  private:
  bool _internal_has_maximum() const;
  public:
  void clear_maximum();
  const ::DRPB::TensorProto& maximum() const;
  ::DRPB::TensorProto* release_maximum();
  ::DRPB::TensorProto* mutable_maximum();
  void set_allocated_maximum(::DRPB::TensorProto* maximum);
  private:
  const ::DRPB::TensorProto& _internal_maximum() const;
  ::DRPB::TensorProto* _internal_mutable_maximum();
  public:
  void unsafe_arena_set_allocated_maximum(
      ::DRPB::TensorProto* maximum);
  ::DRPB::TensorProto* unsafe_arena_release_maximum();

  // .DRPB.DataType dtype = 3;
  void clear_dtype();
  ::DRPB::DataType dtype() const;
  void set_dtype(::DRPB::DataType value);
  private:
  ::DRPB::DataType _internal_dtype() const;
  void _internal_set_dtype(::DRPB::DataType value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.BoundedTensorSpecProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::DRPB::TensorShapeProto* shape_;
  ::DRPB::TensorProto* minimum_;
  ::DRPB::TensorProto* maximum_;
  int dtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class TypeSpecProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.TypeSpecProto) */ {
 public:
  inline TypeSpecProto() : TypeSpecProto(nullptr) {}
  virtual ~TypeSpecProto();
  explicit constexpr TypeSpecProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TypeSpecProto(const TypeSpecProto& from);
  TypeSpecProto(TypeSpecProto&& from) noexcept
    : TypeSpecProto() {
    *this = ::std::move(from);
  }

  inline TypeSpecProto& operator=(const TypeSpecProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TypeSpecProto& operator=(TypeSpecProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TypeSpecProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TypeSpecProto* internal_default_instance() {
    return reinterpret_cast<const TypeSpecProto*>(
               &_TypeSpecProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TypeSpecProto& a, TypeSpecProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TypeSpecProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TypeSpecProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TypeSpecProto* New() const final {
    return CreateMaybeMessage<TypeSpecProto>(nullptr);
  }

  TypeSpecProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TypeSpecProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TypeSpecProto& from);
  void MergeFrom(const TypeSpecProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TypeSpecProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.TypeSpecProto";
  }
  protected:
  explicit TypeSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef TypeSpecProto_TypeSpecClass TypeSpecClass;
  static constexpr TypeSpecClass UNKNOWN =
    TypeSpecProto_TypeSpecClass_UNKNOWN;
  static constexpr TypeSpecClass SPARSE_TENSOR_SPEC =
    TypeSpecProto_TypeSpecClass_SPARSE_TENSOR_SPEC;
  static constexpr TypeSpecClass INDEXED_SLICES_SPEC =
    TypeSpecProto_TypeSpecClass_INDEXED_SLICES_SPEC;
  static constexpr TypeSpecClass RAGGED_TENSOR_SPEC =
    TypeSpecProto_TypeSpecClass_RAGGED_TENSOR_SPEC;
  static constexpr TypeSpecClass TENSOR_ARRAY_SPEC =
    TypeSpecProto_TypeSpecClass_TENSOR_ARRAY_SPEC;
  static constexpr TypeSpecClass DATA_DATASET_SPEC =
    TypeSpecProto_TypeSpecClass_DATA_DATASET_SPEC;
  static constexpr TypeSpecClass DATA_ITERATOR_SPEC =
    TypeSpecProto_TypeSpecClass_DATA_ITERATOR_SPEC;
  static constexpr TypeSpecClass OPTIONAL_SPEC =
    TypeSpecProto_TypeSpecClass_OPTIONAL_SPEC;
  static constexpr TypeSpecClass PER_REPLICA_SPEC =
    TypeSpecProto_TypeSpecClass_PER_REPLICA_SPEC;
  static constexpr TypeSpecClass VARIABLE_SPEC =
    TypeSpecProto_TypeSpecClass_VARIABLE_SPEC;
  static constexpr TypeSpecClass ROW_PARTITION_SPEC =
    TypeSpecProto_TypeSpecClass_ROW_PARTITION_SPEC;
  static constexpr TypeSpecClass REGISTERED_TYPE_SPEC =
    TypeSpecProto_TypeSpecClass_REGISTERED_TYPE_SPEC;
  static constexpr TypeSpecClass EXTENSION_TYPE_SPEC =
    TypeSpecProto_TypeSpecClass_EXTENSION_TYPE_SPEC;
  static inline bool TypeSpecClass_IsValid(int value) {
    return TypeSpecProto_TypeSpecClass_IsValid(value);
  }
  static constexpr TypeSpecClass TypeSpecClass_MIN =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_MIN;
  static constexpr TypeSpecClass TypeSpecClass_MAX =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_MAX;
  static constexpr int TypeSpecClass_ARRAYSIZE =
    TypeSpecProto_TypeSpecClass_TypeSpecClass_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TypeSpecClass_descriptor() {
    return TypeSpecProto_TypeSpecClass_descriptor();
  }
  template<typename T>
  static inline const std::string& TypeSpecClass_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TypeSpecClass>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TypeSpecClass_Name.");
    return TypeSpecProto_TypeSpecClass_Name(enum_t_value);
  }
  static inline bool TypeSpecClass_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TypeSpecClass* value) {
    return TypeSpecProto_TypeSpecClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeSpecClassNameFieldNumber = 3,
    kTypeStateFieldNumber = 2,
    kTypeSpecClassFieldNumber = 1,
  };
  // string type_spec_class_name = 3;
  void clear_type_spec_class_name();
  const std::string& type_spec_class_name() const;
  void set_type_spec_class_name(const std::string& value);
  void set_type_spec_class_name(std::string&& value);
  void set_type_spec_class_name(const char* value);
  void set_type_spec_class_name(const char* value, size_t size);
  std::string* mutable_type_spec_class_name();
  std::string* release_type_spec_class_name();
  void set_allocated_type_spec_class_name(std::string* type_spec_class_name);
  private:
  const std::string& _internal_type_spec_class_name() const;
  void _internal_set_type_spec_class_name(const std::string& value);
  std::string* _internal_mutable_type_spec_class_name();
  public:

  // .DRPB.StructuredValue type_state = 2;
  bool has_type_state() const;
  private:
  bool _internal_has_type_state() const;
  public:
  void clear_type_state();
  const ::DRPB::StructuredValue& type_state() const;
  ::DRPB::StructuredValue* release_type_state();
  ::DRPB::StructuredValue* mutable_type_state();
  void set_allocated_type_state(::DRPB::StructuredValue* type_state);
  private:
  const ::DRPB::StructuredValue& _internal_type_state() const;
  ::DRPB::StructuredValue* _internal_mutable_type_state();
  public:
  void unsafe_arena_set_allocated_type_state(
      ::DRPB::StructuredValue* type_state);
  ::DRPB::StructuredValue* unsafe_arena_release_type_state();

  // .DRPB.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  void clear_type_spec_class();
  ::DRPB::TypeSpecProto_TypeSpecClass type_spec_class() const;
  void set_type_spec_class(::DRPB::TypeSpecProto_TypeSpecClass value);
  private:
  ::DRPB::TypeSpecProto_TypeSpecClass _internal_type_spec_class() const;
  void _internal_set_type_spec_class(::DRPB::TypeSpecProto_TypeSpecClass value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.TypeSpecProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_spec_class_name_;
  ::DRPB::StructuredValue* type_state_;
  int type_spec_class_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class RateLimiterCallStats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.RateLimiterCallStats) */ {
 public:
  inline RateLimiterCallStats() : RateLimiterCallStats(nullptr) {}
  virtual ~RateLimiterCallStats();
  explicit constexpr RateLimiterCallStats(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateLimiterCallStats(const RateLimiterCallStats& from);
  RateLimiterCallStats(RateLimiterCallStats&& from) noexcept
    : RateLimiterCallStats() {
    *this = ::std::move(from);
  }

  inline RateLimiterCallStats& operator=(const RateLimiterCallStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimiterCallStats& operator=(RateLimiterCallStats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateLimiterCallStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimiterCallStats* internal_default_instance() {
    return reinterpret_cast<const RateLimiterCallStats*>(
               &_RateLimiterCallStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RateLimiterCallStats& a, RateLimiterCallStats& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimiterCallStats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimiterCallStats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateLimiterCallStats* New() const final {
    return CreateMaybeMessage<RateLimiterCallStats>(nullptr);
  }

  RateLimiterCallStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateLimiterCallStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateLimiterCallStats& from);
  void MergeFrom(const RateLimiterCallStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimiterCallStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.RateLimiterCallStats";
  }
  protected:
  explicit RateLimiterCallStats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompletedWaitTimeFieldNumber = 4,
    kPendingWaitTimeFieldNumber = 5,
    kPendingFieldNumber = 1,
    kCompletedFieldNumber = 2,
    kLimitedFieldNumber = 3,
  };
  // .google.protobuf.Duration completed_wait_time = 4;
  bool has_completed_wait_time() const;
  private:
  bool _internal_has_completed_wait_time() const;
  public:
  void clear_completed_wait_time();
  const PROTOBUF_NAMESPACE_ID::Duration& completed_wait_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_completed_wait_time();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_completed_wait_time();
  void set_allocated_completed_wait_time(PROTOBUF_NAMESPACE_ID::Duration* completed_wait_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_completed_wait_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_completed_wait_time();
  public:
  void unsafe_arena_set_allocated_completed_wait_time(
      PROTOBUF_NAMESPACE_ID::Duration* completed_wait_time);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_completed_wait_time();

  // .google.protobuf.Duration pending_wait_time = 5;
  bool has_pending_wait_time() const;
  private:
  bool _internal_has_pending_wait_time() const;
  public:
  void clear_pending_wait_time();
  const PROTOBUF_NAMESPACE_ID::Duration& pending_wait_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_pending_wait_time();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_pending_wait_time();
  void set_allocated_pending_wait_time(PROTOBUF_NAMESPACE_ID::Duration* pending_wait_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_pending_wait_time() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_pending_wait_time();
  public:
  void unsafe_arena_set_allocated_pending_wait_time(
      PROTOBUF_NAMESPACE_ID::Duration* pending_wait_time);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_pending_wait_time();

  // int64 pending = 1;
  void clear_pending();
  ::PROTOBUF_NAMESPACE_ID::int64 pending() const;
  void set_pending(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pending() const;
  void _internal_set_pending(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 completed = 2;
  void clear_completed();
  ::PROTOBUF_NAMESPACE_ID::int64 completed() const;
  void set_completed(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_completed() const;
  void _internal_set_completed(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 limited = 3;
  void clear_limited();
  ::PROTOBUF_NAMESPACE_ID::int64 limited() const;
  void set_limited(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_limited() const;
  void _internal_set_limited(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.RateLimiterCallStats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* completed_wait_time_;
  PROTOBUF_NAMESPACE_ID::Duration* pending_wait_time_;
  ::PROTOBUF_NAMESPACE_ID::int64 pending_;
  ::PROTOBUF_NAMESPACE_ID::int64 completed_;
  ::PROTOBUF_NAMESPACE_ID::int64 limited_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class RateLimiterInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.RateLimiterInfo) */ {
 public:
  inline RateLimiterInfo() : RateLimiterInfo(nullptr) {}
  virtual ~RateLimiterInfo();
  explicit constexpr RateLimiterInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RateLimiterInfo(const RateLimiterInfo& from);
  RateLimiterInfo(RateLimiterInfo&& from) noexcept
    : RateLimiterInfo() {
    *this = ::std::move(from);
  }

  inline RateLimiterInfo& operator=(const RateLimiterInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RateLimiterInfo& operator=(RateLimiterInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RateLimiterInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RateLimiterInfo* internal_default_instance() {
    return reinterpret_cast<const RateLimiterInfo*>(
               &_RateLimiterInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RateLimiterInfo& a, RateLimiterInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RateLimiterInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RateLimiterInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RateLimiterInfo* New() const final {
    return CreateMaybeMessage<RateLimiterInfo>(nullptr);
  }

  RateLimiterInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RateLimiterInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RateLimiterInfo& from);
  void MergeFrom(const RateLimiterInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RateLimiterInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.RateLimiterInfo";
  }
  protected:
  explicit RateLimiterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertStatsFieldNumber = 5,
    kSampleStatsFieldNumber = 6,
    kSamplesPerInsertFieldNumber = 1,
    kMinDiffFieldNumber = 2,
    kMaxDiffFieldNumber = 3,
    kMinSizeToSampleFieldNumber = 4,
  };
  // .DRPB.RateLimiterCallStats insert_stats = 5;
  bool has_insert_stats() const;
  private:
  bool _internal_has_insert_stats() const;
  public:
  void clear_insert_stats();
  const ::DRPB::RateLimiterCallStats& insert_stats() const;
  ::DRPB::RateLimiterCallStats* release_insert_stats();
  ::DRPB::RateLimiterCallStats* mutable_insert_stats();
  void set_allocated_insert_stats(::DRPB::RateLimiterCallStats* insert_stats);
  private:
  const ::DRPB::RateLimiterCallStats& _internal_insert_stats() const;
  ::DRPB::RateLimiterCallStats* _internal_mutable_insert_stats();
  public:
  void unsafe_arena_set_allocated_insert_stats(
      ::DRPB::RateLimiterCallStats* insert_stats);
  ::DRPB::RateLimiterCallStats* unsafe_arena_release_insert_stats();

  // .DRPB.RateLimiterCallStats sample_stats = 6;
  bool has_sample_stats() const;
  private:
  bool _internal_has_sample_stats() const;
  public:
  void clear_sample_stats();
  const ::DRPB::RateLimiterCallStats& sample_stats() const;
  ::DRPB::RateLimiterCallStats* release_sample_stats();
  ::DRPB::RateLimiterCallStats* mutable_sample_stats();
  void set_allocated_sample_stats(::DRPB::RateLimiterCallStats* sample_stats);
  private:
  const ::DRPB::RateLimiterCallStats& _internal_sample_stats() const;
  ::DRPB::RateLimiterCallStats* _internal_mutable_sample_stats();
  public:
  void unsafe_arena_set_allocated_sample_stats(
      ::DRPB::RateLimiterCallStats* sample_stats);
  ::DRPB::RateLimiterCallStats* unsafe_arena_release_sample_stats();

  // double samples_per_insert = 1;
  void clear_samples_per_insert();
  double samples_per_insert() const;
  void set_samples_per_insert(double value);
  private:
  double _internal_samples_per_insert() const;
  void _internal_set_samples_per_insert(double value);
  public:

  // double min_diff = 2;
  void clear_min_diff();
  double min_diff() const;
  void set_min_diff(double value);
  private:
  double _internal_min_diff() const;
  void _internal_set_min_diff(double value);
  public:

  // double max_diff = 3;
  void clear_max_diff();
  double max_diff() const;
  void set_max_diff(double value);
  private:
  double _internal_max_diff() const;
  void _internal_set_max_diff(double value);
  public:

  // int64 min_size_to_sample = 4;
  void clear_min_size_to_sample();
  ::PROTOBUF_NAMESPACE_ID::int64 min_size_to_sample() const;
  void set_min_size_to_sample(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_min_size_to_sample() const;
  void _internal_set_min_size_to_sample(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.RateLimiterInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DRPB::RateLimiterCallStats* insert_stats_;
  ::DRPB::RateLimiterCallStats* sample_stats_;
  double samples_per_insert_;
  double min_diff_;
  double max_diff_;
  ::PROTOBUF_NAMESPACE_ID::int64 min_size_to_sample_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class KeyDistributionOptions_Prioritized PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.KeyDistributionOptions.Prioritized) */ {
 public:
  inline KeyDistributionOptions_Prioritized() : KeyDistributionOptions_Prioritized(nullptr) {}
  virtual ~KeyDistributionOptions_Prioritized();
  explicit constexpr KeyDistributionOptions_Prioritized(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDistributionOptions_Prioritized(const KeyDistributionOptions_Prioritized& from);
  KeyDistributionOptions_Prioritized(KeyDistributionOptions_Prioritized&& from) noexcept
    : KeyDistributionOptions_Prioritized() {
    *this = ::std::move(from);
  }

  inline KeyDistributionOptions_Prioritized& operator=(const KeyDistributionOptions_Prioritized& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDistributionOptions_Prioritized& operator=(KeyDistributionOptions_Prioritized&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDistributionOptions_Prioritized& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDistributionOptions_Prioritized* internal_default_instance() {
    return reinterpret_cast<const KeyDistributionOptions_Prioritized*>(
               &_KeyDistributionOptions_Prioritized_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(KeyDistributionOptions_Prioritized& a, KeyDistributionOptions_Prioritized& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDistributionOptions_Prioritized* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDistributionOptions_Prioritized* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDistributionOptions_Prioritized* New() const final {
    return CreateMaybeMessage<KeyDistributionOptions_Prioritized>(nullptr);
  }

  KeyDistributionOptions_Prioritized* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDistributionOptions_Prioritized>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDistributionOptions_Prioritized& from);
  void MergeFrom(const KeyDistributionOptions_Prioritized& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDistributionOptions_Prioritized* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.KeyDistributionOptions.Prioritized";
  }
  protected:
  explicit KeyDistributionOptions_Prioritized(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityExponentFieldNumber = 1,
  };
  // double priority_exponent = 1;
  void clear_priority_exponent();
  double priority_exponent() const;
  void set_priority_exponent(double value);
  private:
  double _internal_priority_exponent() const;
  void _internal_set_priority_exponent(double value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.KeyDistributionOptions.Prioritized)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double priority_exponent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class KeyDistributionOptions_Heap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.KeyDistributionOptions.Heap) */ {
 public:
  inline KeyDistributionOptions_Heap() : KeyDistributionOptions_Heap(nullptr) {}
  virtual ~KeyDistributionOptions_Heap();
  explicit constexpr KeyDistributionOptions_Heap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDistributionOptions_Heap(const KeyDistributionOptions_Heap& from);
  KeyDistributionOptions_Heap(KeyDistributionOptions_Heap&& from) noexcept
    : KeyDistributionOptions_Heap() {
    *this = ::std::move(from);
  }

  inline KeyDistributionOptions_Heap& operator=(const KeyDistributionOptions_Heap& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDistributionOptions_Heap& operator=(KeyDistributionOptions_Heap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDistributionOptions_Heap& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyDistributionOptions_Heap* internal_default_instance() {
    return reinterpret_cast<const KeyDistributionOptions_Heap*>(
               &_KeyDistributionOptions_Heap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(KeyDistributionOptions_Heap& a, KeyDistributionOptions_Heap& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDistributionOptions_Heap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDistributionOptions_Heap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDistributionOptions_Heap* New() const final {
    return CreateMaybeMessage<KeyDistributionOptions_Heap>(nullptr);
  }

  KeyDistributionOptions_Heap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDistributionOptions_Heap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDistributionOptions_Heap& from);
  void MergeFrom(const KeyDistributionOptions_Heap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDistributionOptions_Heap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.KeyDistributionOptions.Heap";
  }
  protected:
  explicit KeyDistributionOptions_Heap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinHeapFieldNumber = 1,
  };
  // bool min_heap = 1;
  void clear_min_heap();
  bool min_heap() const;
  void set_min_heap(bool value);
  private:
  bool _internal_min_heap() const;
  void _internal_set_min_heap(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.KeyDistributionOptions.Heap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool min_heap_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class KeyDistributionOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.KeyDistributionOptions) */ {
 public:
  inline KeyDistributionOptions() : KeyDistributionOptions(nullptr) {}
  virtual ~KeyDistributionOptions();
  explicit constexpr KeyDistributionOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyDistributionOptions(const KeyDistributionOptions& from);
  KeyDistributionOptions(KeyDistributionOptions&& from) noexcept
    : KeyDistributionOptions() {
    *this = ::std::move(from);
  }

  inline KeyDistributionOptions& operator=(const KeyDistributionOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyDistributionOptions& operator=(KeyDistributionOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyDistributionOptions& default_instance() {
    return *internal_default_instance();
  }
  enum DistributionCase {
    kFifo = 1,
    kUniform = 2,
    kPrioritized = 3,
    kHeap = 4,
    kLifo = 6,
    DISTRIBUTION_NOT_SET = 0,
  };

  static inline const KeyDistributionOptions* internal_default_instance() {
    return reinterpret_cast<const KeyDistributionOptions*>(
               &_KeyDistributionOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(KeyDistributionOptions& a, KeyDistributionOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyDistributionOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyDistributionOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyDistributionOptions* New() const final {
    return CreateMaybeMessage<KeyDistributionOptions>(nullptr);
  }

  KeyDistributionOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyDistributionOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyDistributionOptions& from);
  void MergeFrom(const KeyDistributionOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyDistributionOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.KeyDistributionOptions";
  }
  protected:
  explicit KeyDistributionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef KeyDistributionOptions_Prioritized Prioritized;
  typedef KeyDistributionOptions_Heap Heap;

  // accessors -------------------------------------------------------

  enum : int {
    kIsDeterministicFieldNumber = 7,
    kFifoFieldNumber = 1,
    kUniformFieldNumber = 2,
    kPrioritizedFieldNumber = 3,
    kHeapFieldNumber = 4,
    kLifoFieldNumber = 6,
  };
  // bool is_deterministic = 7;
  void clear_is_deterministic();
  bool is_deterministic() const;
  void set_is_deterministic(bool value);
  private:
  bool _internal_is_deterministic() const;
  void _internal_set_is_deterministic(bool value);
  public:

  // bool fifo = 1;
  bool has_fifo() const;
  private:
  bool _internal_has_fifo() const;
  public:
  void clear_fifo();
  bool fifo() const;
  void set_fifo(bool value);
  private:
  bool _internal_fifo() const;
  void _internal_set_fifo(bool value);
  public:

  // bool uniform = 2;
  bool has_uniform() const;
  private:
  bool _internal_has_uniform() const;
  public:
  void clear_uniform();
  bool uniform() const;
  void set_uniform(bool value);
  private:
  bool _internal_uniform() const;
  void _internal_set_uniform(bool value);
  public:

  // .DRPB.KeyDistributionOptions.Prioritized prioritized = 3;
  bool has_prioritized() const;
  private:
  bool _internal_has_prioritized() const;
  public:
  void clear_prioritized();
  const ::DRPB::KeyDistributionOptions_Prioritized& prioritized() const;
  ::DRPB::KeyDistributionOptions_Prioritized* release_prioritized();
  ::DRPB::KeyDistributionOptions_Prioritized* mutable_prioritized();
  void set_allocated_prioritized(::DRPB::KeyDistributionOptions_Prioritized* prioritized);
  private:
  const ::DRPB::KeyDistributionOptions_Prioritized& _internal_prioritized() const;
  ::DRPB::KeyDistributionOptions_Prioritized* _internal_mutable_prioritized();
  public:
  void unsafe_arena_set_allocated_prioritized(
      ::DRPB::KeyDistributionOptions_Prioritized* prioritized);
  ::DRPB::KeyDistributionOptions_Prioritized* unsafe_arena_release_prioritized();

  // .DRPB.KeyDistributionOptions.Heap heap = 4;
  bool has_heap() const;
  private:
  bool _internal_has_heap() const;
  public:
  void clear_heap();
  const ::DRPB::KeyDistributionOptions_Heap& heap() const;
  ::DRPB::KeyDistributionOptions_Heap* release_heap();
  ::DRPB::KeyDistributionOptions_Heap* mutable_heap();
  void set_allocated_heap(::DRPB::KeyDistributionOptions_Heap* heap);
  private:
  const ::DRPB::KeyDistributionOptions_Heap& _internal_heap() const;
  ::DRPB::KeyDistributionOptions_Heap* _internal_mutable_heap();
  public:
  void unsafe_arena_set_allocated_heap(
      ::DRPB::KeyDistributionOptions_Heap* heap);
  ::DRPB::KeyDistributionOptions_Heap* unsafe_arena_release_heap();

  // bool lifo = 6;
  bool has_lifo() const;
  private:
  bool _internal_has_lifo() const;
  public:
  void clear_lifo();
  bool lifo() const;
  void set_lifo(bool value);
  private:
  bool _internal_lifo() const;
  void _internal_set_lifo(bool value);
  public:

  void clear_distribution();
  DistributionCase distribution_case() const;
  // @@protoc_insertion_point(class_scope:DRPB.KeyDistributionOptions)
 private:
  class _Internal;
  void set_has_fifo();
  void set_has_uniform();
  void set_has_prioritized();
  void set_has_heap();
  void set_has_lifo();

  inline bool has_distribution() const;
  inline void clear_has_distribution();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_deterministic_;
  union DistributionUnion {
    constexpr DistributionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool fifo_;
    bool uniform_;
    ::DRPB::KeyDistributionOptions_Prioritized* prioritized_;
    ::DRPB::KeyDistributionOptions_Heap* heap_;
    bool lifo_;
  } distribution_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Uint128 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.Uint128) */ {
 public:
  inline Uint128() : Uint128(nullptr) {}
  virtual ~Uint128();
  explicit constexpr Uint128(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Uint128(const Uint128& from);
  Uint128(Uint128&& from) noexcept
    : Uint128() {
    *this = ::std::move(from);
  }

  inline Uint128& operator=(const Uint128& from) {
    CopyFrom(from);
    return *this;
  }
  inline Uint128& operator=(Uint128&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Uint128& default_instance() {
    return *internal_default_instance();
  }
  static inline const Uint128* internal_default_instance() {
    return reinterpret_cast<const Uint128*>(
               &_Uint128_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(Uint128& a, Uint128& b) {
    a.Swap(&b);
  }
  inline void Swap(Uint128* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Uint128* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Uint128* New() const final {
    return CreateMaybeMessage<Uint128>(nullptr);
  }

  Uint128* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Uint128>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Uint128& from);
  void MergeFrom(const Uint128& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Uint128* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.Uint128";
  }
  protected:
  explicit Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // uint64 high = 1;
  void clear_high();
  ::PROTOBUF_NAMESPACE_ID::uint64 high() const;
  void set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_high() const;
  void _internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 low = 2;
  void clear_low();
  ::PROTOBUF_NAMESPACE_ID::uint64 low() const;
  void set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_low() const;
  void _internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.Uint128)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 high_;
  ::PROTOBUF_NAMESPACE_ID::uint64 low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// -------------------------------------------------------------------

class Timeout PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DRPB.Timeout) */ {
 public:
  inline Timeout() : Timeout(nullptr) {}
  virtual ~Timeout();
  explicit constexpr Timeout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timeout(const Timeout& from);
  Timeout(Timeout&& from) noexcept
    : Timeout() {
    *this = ::std::move(from);
  }

  inline Timeout& operator=(const Timeout& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timeout& operator=(Timeout&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timeout& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timeout* internal_default_instance() {
    return reinterpret_cast<const Timeout*>(
               &_Timeout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(Timeout& a, Timeout& b) {
    a.Swap(&b);
  }
  inline void Swap(Timeout* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timeout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timeout* New() const final {
    return CreateMaybeMessage<Timeout>(nullptr);
  }

  Timeout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timeout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timeout& from);
  void MergeFrom(const Timeout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timeout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DRPB.Timeout";
  }
  protected:
  explicit Timeout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_schema_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMillisecondsFieldNumber = 1,
  };
  // int64 milliseconds = 1;
  void clear_milliseconds();
  ::PROTOBUF_NAMESPACE_ID::int64 milliseconds() const;
  void set_milliseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_milliseconds() const;
  void _internal_set_milliseconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:DRPB.Timeout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 milliseconds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_schema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TensorProto

// .DRPB.DataType dtype = 1;
inline void TensorProto::clear_dtype() {
  dtype_ = 0;
}
inline ::DRPB::DataType TensorProto::_internal_dtype() const {
  return static_cast< ::DRPB::DataType >(dtype_);
}
inline ::DRPB::DataType TensorProto::dtype() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.dtype)
  return _internal_dtype();
}
inline void TensorProto::_internal_set_dtype(::DRPB::DataType value) {
  
  dtype_ = value;
}
inline void TensorProto::set_dtype(::DRPB::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.dtype)
}

// .DRPB.TensorShapeProto tensor_shape = 2;
inline bool TensorProto::_internal_has_tensor_shape() const {
  return this != internal_default_instance() && tensor_shape_ != nullptr;
}
inline bool TensorProto::has_tensor_shape() const {
  return _internal_has_tensor_shape();
}
inline void TensorProto::clear_tensor_shape() {
  if (GetArena() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
}
inline const ::DRPB::TensorShapeProto& TensorProto::_internal_tensor_shape() const {
  const ::DRPB::TensorShapeProto* p = tensor_shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorShapeProto&>(
      ::DRPB::_TensorShapeProto_default_instance_);
}
inline const ::DRPB::TensorShapeProto& TensorProto::tensor_shape() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.tensor_shape)
  return _internal_tensor_shape();
}
inline void TensorProto::unsafe_arena_set_allocated_tensor_shape(
    ::DRPB::TensorShapeProto* tensor_shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape_);
  }
  tensor_shape_ = tensor_shape;
  if (tensor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TensorProto.tensor_shape)
}
inline ::DRPB::TensorShapeProto* TensorProto::release_tensor_shape() {
  
  ::DRPB::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorShapeProto* TensorProto::unsafe_arena_release_tensor_shape() {
  // @@protoc_insertion_point(field_release:DRPB.TensorProto.tensor_shape)
  
  ::DRPB::TensorShapeProto* temp = tensor_shape_;
  tensor_shape_ = nullptr;
  return temp;
}
inline ::DRPB::TensorShapeProto* TensorProto::_internal_mutable_tensor_shape() {
  
  if (tensor_shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorShapeProto>(GetArena());
    tensor_shape_ = p;
  }
  return tensor_shape_;
}
inline ::DRPB::TensorShapeProto* TensorProto::mutable_tensor_shape() {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorProto.tensor_shape)
  return _internal_mutable_tensor_shape();
}
inline void TensorProto::set_allocated_tensor_shape(::DRPB::TensorShapeProto* tensor_shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_shape_;
  }
  if (tensor_shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor_shape);
    if (message_arena != submessage_arena) {
      tensor_shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape, submessage_arena);
    }
    
  } else {
    
  }
  tensor_shape_ = tensor_shape;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TensorProto.tensor_shape)
}

// int32 version_number = 3;
inline void TensorProto::clear_version_number() {
  version_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_version_number() const {
  return version_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::version_number() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.version_number)
  return _internal_version_number();
}
inline void TensorProto::_internal_set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  version_number_ = value;
}
inline void TensorProto::set_version_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version_number(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.version_number)
}

// bytes tensor_content = 4;
inline void TensorProto::clear_tensor_content() {
  tensor_content_.ClearToEmpty();
}
inline const std::string& TensorProto::tensor_content() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.tensor_content)
  return _internal_tensor_content();
}
inline void TensorProto::set_tensor_content(const std::string& value) {
  _internal_set_tensor_content(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.tensor_content)
}
inline std::string* TensorProto::mutable_tensor_content() {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorProto.tensor_content)
  return _internal_mutable_tensor_content();
}
inline const std::string& TensorProto::_internal_tensor_content() const {
  return tensor_content_.Get();
}
inline void TensorProto::_internal_set_tensor_content(const std::string& value) {
  
  tensor_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TensorProto::set_tensor_content(std::string&& value) {
  
  tensor_content_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.TensorProto.tensor_content)
}
inline void TensorProto::set_tensor_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.TensorProto.tensor_content)
}
inline void TensorProto::set_tensor_content(const void* value,
    size_t size) {
  
  tensor_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.TensorProto.tensor_content)
}
inline std::string* TensorProto::_internal_mutable_tensor_content() {
  
  return tensor_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TensorProto::release_tensor_content() {
  // @@protoc_insertion_point(field_release:DRPB.TensorProto.tensor_content)
  return tensor_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorProto::set_allocated_tensor_content(std::string* tensor_content) {
  if (tensor_content != nullptr) {
    
  } else {
    
  }
  tensor_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_content,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.TensorProto.tensor_content)
}

// repeated int32 half_val = 13 [packed = true];
inline int TensorProto::_internal_half_val_size() const {
  return half_val_.size();
}
inline int TensorProto::half_val_size() const {
  return _internal_half_val_size();
}
inline void TensorProto::clear_half_val() {
  half_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_half_val(int index) const {
  return half_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::half_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.half_val)
  return _internal_half_val(index);
}
inline void TensorProto::set_half_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  half_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.half_val)
}
inline void TensorProto::_internal_add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  half_val_.Add(value);
}
inline void TensorProto::add_half_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_half_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.half_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::_internal_half_val() const {
  return half_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::half_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.half_val)
  return _internal_half_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::_internal_mutable_half_val() {
  return &half_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_half_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.half_val)
  return _internal_mutable_half_val();
}

// repeated float float_val = 5 [packed = true];
inline int TensorProto::_internal_float_val_size() const {
  return float_val_.size();
}
inline int TensorProto::float_val_size() const {
  return _internal_float_val_size();
}
inline void TensorProto::clear_float_val() {
  float_val_.Clear();
}
inline float TensorProto::_internal_float_val(int index) const {
  return float_val_.Get(index);
}
inline float TensorProto::float_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.float_val)
  return _internal_float_val(index);
}
inline void TensorProto::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.float_val)
}
inline void TensorProto::_internal_add_float_val(float value) {
  float_val_.Add(value);
}
inline void TensorProto::add_float_val(float value) {
  _internal_add_float_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::_internal_float_val() const {
  return float_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::float_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.float_val)
  return _internal_float_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::_internal_mutable_float_val() {
  return &float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.float_val)
  return _internal_mutable_float_val();
}

// repeated double double_val = 6 [packed = true];
inline int TensorProto::_internal_double_val_size() const {
  return double_val_.size();
}
inline int TensorProto::double_val_size() const {
  return _internal_double_val_size();
}
inline void TensorProto::clear_double_val() {
  double_val_.Clear();
}
inline double TensorProto::_internal_double_val(int index) const {
  return double_val_.Get(index);
}
inline double TensorProto::double_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.double_val)
  return _internal_double_val(index);
}
inline void TensorProto::set_double_val(int index, double value) {
  double_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.double_val)
}
inline void TensorProto::_internal_add_double_val(double value) {
  double_val_.Add(value);
}
inline void TensorProto::add_double_val(double value) {
  _internal_add_double_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.double_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::_internal_double_val() const {
  return double_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::double_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.double_val)
  return _internal_double_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::_internal_mutable_double_val() {
  return &double_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::mutable_double_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.double_val)
  return _internal_mutable_double_val();
}

// repeated int32 int_val = 7 [packed = true];
inline int TensorProto::_internal_int_val_size() const {
  return int_val_.size();
}
inline int TensorProto::int_val_size() const {
  return _internal_int_val_size();
}
inline void TensorProto::clear_int_val() {
  int_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::_internal_int_val(int index) const {
  return int_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorProto::int_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.int_val)
  return _internal_int_val(index);
}
inline void TensorProto::set_int_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.int_val)
}
inline void TensorProto::_internal_add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  int_val_.Add(value);
}
inline void TensorProto::add_int_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_int_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.int_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::_internal_int_val() const {
  return int_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorProto::int_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.int_val)
  return _internal_int_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::_internal_mutable_int_val() {
  return &int_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorProto::mutable_int_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.int_val)
  return _internal_mutable_int_val();
}

// repeated bytes string_val = 8;
inline int TensorProto::_internal_string_val_size() const {
  return string_val_.size();
}
inline int TensorProto::string_val_size() const {
  return _internal_string_val_size();
}
inline void TensorProto::clear_string_val() {
  string_val_.Clear();
}
inline std::string* TensorProto::add_string_val() {
  // @@protoc_insertion_point(field_add_mutable:DRPB.TensorProto.string_val)
  return _internal_add_string_val();
}
inline const std::string& TensorProto::_internal_string_val(int index) const {
  return string_val_.Get(index);
}
inline const std::string& TensorProto::string_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.string_val)
  return _internal_string_val(index);
}
inline std::string* TensorProto::mutable_string_val(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorProto.string_val)
  return string_val_.Mutable(index);
}
inline void TensorProto::set_string_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.string_val)
  string_val_.Mutable(index)->assign(value);
}
inline void TensorProto::set_string_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.string_val)
  string_val_.Mutable(index)->assign(std::move(value));
}
inline void TensorProto::set_string_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DRPB.TensorProto.string_val)
}
inline void TensorProto::set_string_val(int index, const void* value, size_t size) {
  string_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DRPB.TensorProto.string_val)
}
inline std::string* TensorProto::_internal_add_string_val() {
  return string_val_.Add();
}
inline void TensorProto::add_string_val(const std::string& value) {
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.string_val)
}
inline void TensorProto::add_string_val(std::string&& value) {
  string_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DRPB.TensorProto.string_val)
}
inline void TensorProto::add_string_val(const void* value, size_t size) {
  string_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DRPB.TensorProto.string_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TensorProto::string_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.string_val)
  return string_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TensorProto::mutable_string_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.string_val)
  return &string_val_;
}

// repeated float scomplex_val = 9 [packed = true];
inline int TensorProto::_internal_scomplex_val_size() const {
  return scomplex_val_.size();
}
inline int TensorProto::scomplex_val_size() const {
  return _internal_scomplex_val_size();
}
inline void TensorProto::clear_scomplex_val() {
  scomplex_val_.Clear();
}
inline float TensorProto::_internal_scomplex_val(int index) const {
  return scomplex_val_.Get(index);
}
inline float TensorProto::scomplex_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.scomplex_val)
  return _internal_scomplex_val(index);
}
inline void TensorProto::set_scomplex_val(int index, float value) {
  scomplex_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.scomplex_val)
}
inline void TensorProto::_internal_add_scomplex_val(float value) {
  scomplex_val_.Add(value);
}
inline void TensorProto::add_scomplex_val(float value) {
  _internal_add_scomplex_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.scomplex_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::_internal_scomplex_val() const {
  return scomplex_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TensorProto::scomplex_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.scomplex_val)
  return _internal_scomplex_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::_internal_mutable_scomplex_val() {
  return &scomplex_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TensorProto::mutable_scomplex_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.scomplex_val)
  return _internal_mutable_scomplex_val();
}

// repeated int64 int64_val = 10 [packed = true];
inline int TensorProto::_internal_int64_val_size() const {
  return int64_val_.size();
}
inline int TensorProto::int64_val_size() const {
  return _internal_int64_val_size();
}
inline void TensorProto::clear_int64_val() {
  int64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::_internal_int64_val(int index) const {
  return int64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorProto::int64_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.int64_val)
  return _internal_int64_val(index);
}
inline void TensorProto::set_int64_val(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.int64_val)
}
inline void TensorProto::_internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  int64_val_.Add(value);
}
inline void TensorProto::add_int64_val(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_int64_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.int64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::_internal_int64_val() const {
  return int64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
TensorProto::int64_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.int64_val)
  return _internal_int64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::_internal_mutable_int64_val() {
  return &int64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
TensorProto::mutable_int64_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.int64_val)
  return _internal_mutable_int64_val();
}

// repeated bool bool_val = 11 [packed = true];
inline int TensorProto::_internal_bool_val_size() const {
  return bool_val_.size();
}
inline int TensorProto::bool_val_size() const {
  return _internal_bool_val_size();
}
inline void TensorProto::clear_bool_val() {
  bool_val_.Clear();
}
inline bool TensorProto::_internal_bool_val(int index) const {
  return bool_val_.Get(index);
}
inline bool TensorProto::bool_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.bool_val)
  return _internal_bool_val(index);
}
inline void TensorProto::set_bool_val(int index, bool value) {
  bool_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.bool_val)
}
inline void TensorProto::_internal_add_bool_val(bool value) {
  bool_val_.Add(value);
}
inline void TensorProto::add_bool_val(bool value) {
  _internal_add_bool_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.bool_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TensorProto::_internal_bool_val() const {
  return bool_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
TensorProto::bool_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.bool_val)
  return _internal_bool_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TensorProto::_internal_mutable_bool_val() {
  return &bool_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
TensorProto::mutable_bool_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.bool_val)
  return _internal_mutable_bool_val();
}

// repeated double dcomplex_val = 12 [packed = true];
inline int TensorProto::_internal_dcomplex_val_size() const {
  return dcomplex_val_.size();
}
inline int TensorProto::dcomplex_val_size() const {
  return _internal_dcomplex_val_size();
}
inline void TensorProto::clear_dcomplex_val() {
  dcomplex_val_.Clear();
}
inline double TensorProto::_internal_dcomplex_val(int index) const {
  return dcomplex_val_.Get(index);
}
inline double TensorProto::dcomplex_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.dcomplex_val)
  return _internal_dcomplex_val(index);
}
inline void TensorProto::set_dcomplex_val(int index, double value) {
  dcomplex_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.dcomplex_val)
}
inline void TensorProto::_internal_add_dcomplex_val(double value) {
  dcomplex_val_.Add(value);
}
inline void TensorProto::add_dcomplex_val(double value) {
  _internal_add_dcomplex_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.dcomplex_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::_internal_dcomplex_val() const {
  return dcomplex_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TensorProto::dcomplex_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.dcomplex_val)
  return _internal_dcomplex_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::_internal_mutable_dcomplex_val() {
  return &dcomplex_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TensorProto::mutable_dcomplex_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.dcomplex_val)
  return _internal_mutable_dcomplex_val();
}

// repeated .DRPB.ResourceHandleProto resource_handle_val = 14;
inline int TensorProto::_internal_resource_handle_val_size() const {
  return resource_handle_val_.size();
}
inline int TensorProto::resource_handle_val_size() const {
  return _internal_resource_handle_val_size();
}
inline void TensorProto::clear_resource_handle_val() {
  resource_handle_val_.Clear();
}
inline ::DRPB::ResourceHandleProto* TensorProto::mutable_resource_handle_val(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorProto.resource_handle_val)
  return resource_handle_val_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto >*
TensorProto::mutable_resource_handle_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.resource_handle_val)
  return &resource_handle_val_;
}
inline const ::DRPB::ResourceHandleProto& TensorProto::_internal_resource_handle_val(int index) const {
  return resource_handle_val_.Get(index);
}
inline const ::DRPB::ResourceHandleProto& TensorProto::resource_handle_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.resource_handle_val)
  return _internal_resource_handle_val(index);
}
inline ::DRPB::ResourceHandleProto* TensorProto::_internal_add_resource_handle_val() {
  return resource_handle_val_.Add();
}
inline ::DRPB::ResourceHandleProto* TensorProto::add_resource_handle_val() {
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.resource_handle_val)
  return _internal_add_resource_handle_val();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto >&
TensorProto::resource_handle_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.resource_handle_val)
  return resource_handle_val_;
}

// repeated .DRPB.VariantTensorDataProto variant_val = 15;
inline int TensorProto::_internal_variant_val_size() const {
  return variant_val_.size();
}
inline int TensorProto::variant_val_size() const {
  return _internal_variant_val_size();
}
inline void TensorProto::clear_variant_val() {
  variant_val_.Clear();
}
inline ::DRPB::VariantTensorDataProto* TensorProto::mutable_variant_val(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorProto.variant_val)
  return variant_val_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::VariantTensorDataProto >*
TensorProto::mutable_variant_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.variant_val)
  return &variant_val_;
}
inline const ::DRPB::VariantTensorDataProto& TensorProto::_internal_variant_val(int index) const {
  return variant_val_.Get(index);
}
inline const ::DRPB::VariantTensorDataProto& TensorProto::variant_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.variant_val)
  return _internal_variant_val(index);
}
inline ::DRPB::VariantTensorDataProto* TensorProto::_internal_add_variant_val() {
  return variant_val_.Add();
}
inline ::DRPB::VariantTensorDataProto* TensorProto::add_variant_val() {
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.variant_val)
  return _internal_add_variant_val();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::VariantTensorDataProto >&
TensorProto::variant_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.variant_val)
  return variant_val_;
}

// repeated uint32 uint32_val = 16 [packed = true];
inline int TensorProto::_internal_uint32_val_size() const {
  return uint32_val_.size();
}
inline int TensorProto::uint32_val_size() const {
  return _internal_uint32_val_size();
}
inline void TensorProto::clear_uint32_val() {
  uint32_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorProto::_internal_uint32_val(int index) const {
  return uint32_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TensorProto::uint32_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.uint32_val)
  return _internal_uint32_val(index);
}
inline void TensorProto::set_uint32_val(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.uint32_val)
}
inline void TensorProto::_internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  uint32_val_.Add(value);
}
inline void TensorProto::add_uint32_val(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_uint32_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.uint32_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorProto::_internal_uint32_val() const {
  return uint32_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
TensorProto::uint32_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.uint32_val)
  return _internal_uint32_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorProto::_internal_mutable_uint32_val() {
  return &uint32_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
TensorProto::mutable_uint32_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.uint32_val)
  return _internal_mutable_uint32_val();
}

// repeated uint64 uint64_val = 17 [packed = true];
inline int TensorProto::_internal_uint64_val_size() const {
  return uint64_val_.size();
}
inline int TensorProto::uint64_val_size() const {
  return _internal_uint64_val_size();
}
inline void TensorProto::clear_uint64_val() {
  uint64_val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::_internal_uint64_val(int index) const {
  return uint64_val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TensorProto::uint64_val(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorProto.uint64_val)
  return _internal_uint64_val(index);
}
inline void TensorProto::set_uint64_val(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.TensorProto.uint64_val)
}
inline void TensorProto::_internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  uint64_val_.Add(value);
}
inline void TensorProto::add_uint64_val(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_uint64_val(value);
  // @@protoc_insertion_point(field_add:DRPB.TensorProto.uint64_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::_internal_uint64_val() const {
  return uint64_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
TensorProto::uint64_val() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorProto.uint64_val)
  return _internal_uint64_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::_internal_mutable_uint64_val() {
  return &uint64_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
TensorProto::mutable_uint64_val() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorProto.uint64_val)
  return _internal_mutable_uint64_val();
}

// -------------------------------------------------------------------

// VariantTensorDataProto

// string type_name = 1;
inline void VariantTensorDataProto::clear_type_name() {
  type_name_.ClearToEmpty();
}
inline const std::string& VariantTensorDataProto::type_name() const {
  // @@protoc_insertion_point(field_get:DRPB.VariantTensorDataProto.type_name)
  return _internal_type_name();
}
inline void VariantTensorDataProto::set_type_name(const std::string& value) {
  _internal_set_type_name(value);
  // @@protoc_insertion_point(field_set:DRPB.VariantTensorDataProto.type_name)
}
inline std::string* VariantTensorDataProto::mutable_type_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.VariantTensorDataProto.type_name)
  return _internal_mutable_type_name();
}
inline const std::string& VariantTensorDataProto::_internal_type_name() const {
  return type_name_.Get();
}
inline void VariantTensorDataProto::_internal_set_type_name(const std::string& value) {
  
  type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VariantTensorDataProto::set_type_name(std::string&& value) {
  
  type_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.VariantTensorDataProto.type_name)
}
inline void VariantTensorDataProto::set_type_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.VariantTensorDataProto.type_name)
}
inline void VariantTensorDataProto::set_type_name(const char* value,
    size_t size) {
  
  type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.VariantTensorDataProto.type_name)
}
inline std::string* VariantTensorDataProto::_internal_mutable_type_name() {
  
  return type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VariantTensorDataProto::release_type_name() {
  // @@protoc_insertion_point(field_release:DRPB.VariantTensorDataProto.type_name)
  return type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariantTensorDataProto::set_allocated_type_name(std::string* type_name) {
  if (type_name != nullptr) {
    
  } else {
    
  }
  type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.VariantTensorDataProto.type_name)
}

// bytes metadata = 2;
inline void VariantTensorDataProto::clear_metadata() {
  metadata_.ClearToEmpty();
}
inline const std::string& VariantTensorDataProto::metadata() const {
  // @@protoc_insertion_point(field_get:DRPB.VariantTensorDataProto.metadata)
  return _internal_metadata();
}
inline void VariantTensorDataProto::set_metadata(const std::string& value) {
  _internal_set_metadata(value);
  // @@protoc_insertion_point(field_set:DRPB.VariantTensorDataProto.metadata)
}
inline std::string* VariantTensorDataProto::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:DRPB.VariantTensorDataProto.metadata)
  return _internal_mutable_metadata();
}
inline const std::string& VariantTensorDataProto::_internal_metadata() const {
  return metadata_.Get();
}
inline void VariantTensorDataProto::_internal_set_metadata(const std::string& value) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VariantTensorDataProto::set_metadata(std::string&& value) {
  
  metadata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.VariantTensorDataProto.metadata)
}
inline void VariantTensorDataProto::set_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.VariantTensorDataProto.metadata)
}
inline void VariantTensorDataProto::set_metadata(const void* value,
    size_t size) {
  
  metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.VariantTensorDataProto.metadata)
}
inline std::string* VariantTensorDataProto::_internal_mutable_metadata() {
  
  return metadata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VariantTensorDataProto::release_metadata() {
  // @@protoc_insertion_point(field_release:DRPB.VariantTensorDataProto.metadata)
  return metadata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VariantTensorDataProto::set_allocated_metadata(std::string* metadata) {
  if (metadata != nullptr) {
    
  } else {
    
  }
  metadata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metadata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.VariantTensorDataProto.metadata)
}

// repeated .DRPB.TensorProto tensors = 3;
inline int VariantTensorDataProto::_internal_tensors_size() const {
  return tensors_.size();
}
inline int VariantTensorDataProto::tensors_size() const {
  return _internal_tensors_size();
}
inline void VariantTensorDataProto::clear_tensors() {
  tensors_.Clear();
}
inline ::DRPB::TensorProto* VariantTensorDataProto::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.VariantTensorDataProto.tensors)
  return tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
VariantTensorDataProto::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.VariantTensorDataProto.tensors)
  return &tensors_;
}
inline const ::DRPB::TensorProto& VariantTensorDataProto::_internal_tensors(int index) const {
  return tensors_.Get(index);
}
inline const ::DRPB::TensorProto& VariantTensorDataProto::tensors(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.VariantTensorDataProto.tensors)
  return _internal_tensors(index);
}
inline ::DRPB::TensorProto* VariantTensorDataProto::_internal_add_tensors() {
  return tensors_.Add();
}
inline ::DRPB::TensorProto* VariantTensorDataProto::add_tensors() {
  // @@protoc_insertion_point(field_add:DRPB.VariantTensorDataProto.tensors)
  return _internal_add_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
VariantTensorDataProto::tensors() const {
  // @@protoc_insertion_point(field_list:DRPB.VariantTensorDataProto.tensors)
  return tensors_;
}

// -------------------------------------------------------------------

// TensorShapeProto_Dim

// int64 size = 1;
inline void TensorShapeProto_Dim::clear_size() {
  size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dim::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TensorShapeProto_Dim::size() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorShapeProto.Dim.size)
  return _internal_size();
}
inline void TensorShapeProto_Dim::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  size_ = value;
}
inline void TensorShapeProto_Dim::set_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorShapeProto.Dim.size)
}

// string name = 2;
inline void TensorShapeProto_Dim::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TensorShapeProto_Dim::name() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorShapeProto.Dim.name)
  return _internal_name();
}
inline void TensorShapeProto_Dim::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorShapeProto.Dim.name)
}
inline std::string* TensorShapeProto_Dim::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorShapeProto.Dim.name)
  return _internal_mutable_name();
}
inline const std::string& TensorShapeProto_Dim::_internal_name() const {
  return name_.Get();
}
inline void TensorShapeProto_Dim::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TensorShapeProto_Dim::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.TensorShapeProto.Dim.name)
}
inline void TensorShapeProto_Dim::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.TensorShapeProto.Dim.name)
}
inline void TensorShapeProto_Dim::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.TensorShapeProto.Dim.name)
}
inline std::string* TensorShapeProto_Dim::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TensorShapeProto_Dim::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.TensorShapeProto.Dim.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorShapeProto_Dim::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.TensorShapeProto.Dim.name)
}

// -------------------------------------------------------------------

// TensorShapeProto

// repeated .DRPB.TensorShapeProto.Dim dim = 2;
inline int TensorShapeProto::_internal_dim_size() const {
  return dim_.size();
}
inline int TensorShapeProto::dim_size() const {
  return _internal_dim_size();
}
inline void TensorShapeProto::clear_dim() {
  dim_.Clear();
}
inline ::DRPB::TensorShapeProto_Dim* TensorShapeProto::mutable_dim(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorShapeProto.dim)
  return dim_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorShapeProto_Dim >*
TensorShapeProto::mutable_dim() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TensorShapeProto.dim)
  return &dim_;
}
inline const ::DRPB::TensorShapeProto_Dim& TensorShapeProto::_internal_dim(int index) const {
  return dim_.Get(index);
}
inline const ::DRPB::TensorShapeProto_Dim& TensorShapeProto::dim(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TensorShapeProto.dim)
  return _internal_dim(index);
}
inline ::DRPB::TensorShapeProto_Dim* TensorShapeProto::_internal_add_dim() {
  return dim_.Add();
}
inline ::DRPB::TensorShapeProto_Dim* TensorShapeProto::add_dim() {
  // @@protoc_insertion_point(field_add:DRPB.TensorShapeProto.dim)
  return _internal_add_dim();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorShapeProto_Dim >&
TensorShapeProto::dim() const {
  // @@protoc_insertion_point(field_list:DRPB.TensorShapeProto.dim)
  return dim_;
}

// bool unknown_rank = 3;
inline void TensorShapeProto::clear_unknown_rank() {
  unknown_rank_ = false;
}
inline bool TensorShapeProto::_internal_unknown_rank() const {
  return unknown_rank_;
}
inline bool TensorShapeProto::unknown_rank() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorShapeProto.unknown_rank)
  return _internal_unknown_rank();
}
inline void TensorShapeProto::_internal_set_unknown_rank(bool value) {
  
  unknown_rank_ = value;
}
inline void TensorShapeProto::set_unknown_rank(bool value) {
  _internal_set_unknown_rank(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorShapeProto.unknown_rank)
}

// -------------------------------------------------------------------

// ResourceHandleProto_DtypeAndShape

// .DRPB.DataType dtype = 1;
inline void ResourceHandleProto_DtypeAndShape::clear_dtype() {
  dtype_ = 0;
}
inline ::DRPB::DataType ResourceHandleProto_DtypeAndShape::_internal_dtype() const {
  return static_cast< ::DRPB::DataType >(dtype_);
}
inline ::DRPB::DataType ResourceHandleProto_DtypeAndShape::dtype() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.DtypeAndShape.dtype)
  return _internal_dtype();
}
inline void ResourceHandleProto_DtypeAndShape::_internal_set_dtype(::DRPB::DataType value) {
  
  dtype_ = value;
}
inline void ResourceHandleProto_DtypeAndShape::set_dtype(::DRPB::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.DtypeAndShape.dtype)
}

// .DRPB.TensorShapeProto shape = 2;
inline bool ResourceHandleProto_DtypeAndShape::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool ResourceHandleProto_DtypeAndShape::has_shape() const {
  return _internal_has_shape();
}
inline void ResourceHandleProto_DtypeAndShape::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::DRPB::TensorShapeProto& ResourceHandleProto_DtypeAndShape::_internal_shape() const {
  const ::DRPB::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorShapeProto&>(
      ::DRPB::_TensorShapeProto_default_instance_);
}
inline const ::DRPB::TensorShapeProto& ResourceHandleProto_DtypeAndShape::shape() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.DtypeAndShape.shape)
  return _internal_shape();
}
inline void ResourceHandleProto_DtypeAndShape::unsafe_arena_set_allocated_shape(
    ::DRPB::TensorShapeProto* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.ResourceHandleProto.DtypeAndShape.shape)
}
inline ::DRPB::TensorShapeProto* ResourceHandleProto_DtypeAndShape::release_shape() {
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorShapeProto* ResourceHandleProto_DtypeAndShape::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:DRPB.ResourceHandleProto.DtypeAndShape.shape)
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::DRPB::TensorShapeProto* ResourceHandleProto_DtypeAndShape::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorShapeProto>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::DRPB::TensorShapeProto* ResourceHandleProto_DtypeAndShape::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.DtypeAndShape.shape)
  return _internal_mutable_shape();
}
inline void ResourceHandleProto_DtypeAndShape::set_allocated_shape(::DRPB::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:DRPB.ResourceHandleProto.DtypeAndShape.shape)
}

// -------------------------------------------------------------------

// ResourceHandleProto

// string device = 1;
inline void ResourceHandleProto::clear_device() {
  device_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::device() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.device)
  return _internal_device();
}
inline void ResourceHandleProto::set_device(const std::string& value) {
  _internal_set_device(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.device)
}
inline std::string* ResourceHandleProto::mutable_device() {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.device)
  return _internal_mutable_device();
}
inline const std::string& ResourceHandleProto::_internal_device() const {
  return device_.Get();
}
inline void ResourceHandleProto::_internal_set_device(const std::string& value) {
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceHandleProto::set_device(std::string&& value) {
  
  device_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.ResourceHandleProto.device)
}
inline void ResourceHandleProto::set_device(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.ResourceHandleProto.device)
}
inline void ResourceHandleProto::set_device(const char* value,
    size_t size) {
  
  device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.ResourceHandleProto.device)
}
inline std::string* ResourceHandleProto::_internal_mutable_device() {
  
  return device_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceHandleProto::release_device() {
  // @@protoc_insertion_point(field_release:DRPB.ResourceHandleProto.device)
  return device_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceHandleProto::set_allocated_device(std::string* device) {
  if (device != nullptr) {
    
  } else {
    
  }
  device_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.ResourceHandleProto.device)
}

// string container = 2;
inline void ResourceHandleProto::clear_container() {
  container_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::container() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.container)
  return _internal_container();
}
inline void ResourceHandleProto::set_container(const std::string& value) {
  _internal_set_container(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.container)
}
inline std::string* ResourceHandleProto::mutable_container() {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.container)
  return _internal_mutable_container();
}
inline const std::string& ResourceHandleProto::_internal_container() const {
  return container_.Get();
}
inline void ResourceHandleProto::_internal_set_container(const std::string& value) {
  
  container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceHandleProto::set_container(std::string&& value) {
  
  container_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.ResourceHandleProto.container)
}
inline void ResourceHandleProto::set_container(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.ResourceHandleProto.container)
}
inline void ResourceHandleProto::set_container(const char* value,
    size_t size) {
  
  container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.ResourceHandleProto.container)
}
inline std::string* ResourceHandleProto::_internal_mutable_container() {
  
  return container_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceHandleProto::release_container() {
  // @@protoc_insertion_point(field_release:DRPB.ResourceHandleProto.container)
  return container_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceHandleProto::set_allocated_container(std::string* container) {
  if (container != nullptr) {
    
  } else {
    
  }
  container_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), container,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.ResourceHandleProto.container)
}

// string name = 3;
inline void ResourceHandleProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::name() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.name)
  return _internal_name();
}
inline void ResourceHandleProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.name)
}
inline std::string* ResourceHandleProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.name)
  return _internal_mutable_name();
}
inline const std::string& ResourceHandleProto::_internal_name() const {
  return name_.Get();
}
inline void ResourceHandleProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceHandleProto::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.ResourceHandleProto.name)
}
inline void ResourceHandleProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.ResourceHandleProto.name)
}
inline void ResourceHandleProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.ResourceHandleProto.name)
}
inline std::string* ResourceHandleProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceHandleProto::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.ResourceHandleProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceHandleProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.ResourceHandleProto.name)
}

// uint64 hash_code = 4;
inline void ResourceHandleProto::clear_hash_code() {
  hash_code_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResourceHandleProto::_internal_hash_code() const {
  return hash_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ResourceHandleProto::hash_code() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.hash_code)
  return _internal_hash_code();
}
inline void ResourceHandleProto::_internal_set_hash_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  hash_code_ = value;
}
inline void ResourceHandleProto::set_hash_code(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_hash_code(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.hash_code)
}

// string maybe_type_name = 5;
inline void ResourceHandleProto::clear_maybe_type_name() {
  maybe_type_name_.ClearToEmpty();
}
inline const std::string& ResourceHandleProto::maybe_type_name() const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.maybe_type_name)
  return _internal_maybe_type_name();
}
inline void ResourceHandleProto::set_maybe_type_name(const std::string& value) {
  _internal_set_maybe_type_name(value);
  // @@protoc_insertion_point(field_set:DRPB.ResourceHandleProto.maybe_type_name)
}
inline std::string* ResourceHandleProto::mutable_maybe_type_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.maybe_type_name)
  return _internal_mutable_maybe_type_name();
}
inline const std::string& ResourceHandleProto::_internal_maybe_type_name() const {
  return maybe_type_name_.Get();
}
inline void ResourceHandleProto::_internal_set_maybe_type_name(const std::string& value) {
  
  maybe_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ResourceHandleProto::set_maybe_type_name(std::string&& value) {
  
  maybe_type_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.ResourceHandleProto.maybe_type_name)
}
inline void ResourceHandleProto::set_maybe_type_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  maybe_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.ResourceHandleProto.maybe_type_name)
}
inline void ResourceHandleProto::set_maybe_type_name(const char* value,
    size_t size) {
  
  maybe_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.ResourceHandleProto.maybe_type_name)
}
inline std::string* ResourceHandleProto::_internal_mutable_maybe_type_name() {
  
  return maybe_type_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ResourceHandleProto::release_maybe_type_name() {
  // @@protoc_insertion_point(field_release:DRPB.ResourceHandleProto.maybe_type_name)
  return maybe_type_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResourceHandleProto::set_allocated_maybe_type_name(std::string* maybe_type_name) {
  if (maybe_type_name != nullptr) {
    
  } else {
    
  }
  maybe_type_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), maybe_type_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.ResourceHandleProto.maybe_type_name)
}

// repeated .DRPB.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
inline int ResourceHandleProto::_internal_dtypes_and_shapes_size() const {
  return dtypes_and_shapes_.size();
}
inline int ResourceHandleProto::dtypes_and_shapes_size() const {
  return _internal_dtypes_and_shapes_size();
}
inline void ResourceHandleProto::clear_dtypes_and_shapes() {
  dtypes_and_shapes_.Clear();
}
inline ::DRPB::ResourceHandleProto_DtypeAndShape* ResourceHandleProto::mutable_dtypes_and_shapes(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.ResourceHandleProto.dtypes_and_shapes)
  return dtypes_and_shapes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto_DtypeAndShape >*
ResourceHandleProto::mutable_dtypes_and_shapes() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.ResourceHandleProto.dtypes_and_shapes)
  return &dtypes_and_shapes_;
}
inline const ::DRPB::ResourceHandleProto_DtypeAndShape& ResourceHandleProto::_internal_dtypes_and_shapes(int index) const {
  return dtypes_and_shapes_.Get(index);
}
inline const ::DRPB::ResourceHandleProto_DtypeAndShape& ResourceHandleProto::dtypes_and_shapes(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.ResourceHandleProto.dtypes_and_shapes)
  return _internal_dtypes_and_shapes(index);
}
inline ::DRPB::ResourceHandleProto_DtypeAndShape* ResourceHandleProto::_internal_add_dtypes_and_shapes() {
  return dtypes_and_shapes_.Add();
}
inline ::DRPB::ResourceHandleProto_DtypeAndShape* ResourceHandleProto::add_dtypes_and_shapes() {
  // @@protoc_insertion_point(field_add:DRPB.ResourceHandleProto.dtypes_and_shapes)
  return _internal_add_dtypes_and_shapes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::ResourceHandleProto_DtypeAndShape >&
ResourceHandleProto::dtypes_and_shapes() const {
  // @@protoc_insertion_point(field_list:DRPB.ResourceHandleProto.dtypes_and_shapes)
  return dtypes_and_shapes_;
}

// -------------------------------------------------------------------

// ChunkData_Data

// repeated .DRPB.TensorProto tensors = 1;
inline int ChunkData_Data::_internal_tensors_size() const {
  return tensors_.size();
}
inline int ChunkData_Data::tensors_size() const {
  return _internal_tensors_size();
}
inline void ChunkData_Data::clear_tensors() {
  tensors_.Clear();
}
inline ::DRPB::TensorProto* ChunkData_Data::mutable_tensors(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.ChunkData.Data.tensors)
  return tensors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
ChunkData_Data::mutable_tensors() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.ChunkData.Data.tensors)
  return &tensors_;
}
inline const ::DRPB::TensorProto& ChunkData_Data::_internal_tensors(int index) const {
  return tensors_.Get(index);
}
inline const ::DRPB::TensorProto& ChunkData_Data::tensors(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.Data.tensors)
  return _internal_tensors(index);
}
inline ::DRPB::TensorProto* ChunkData_Data::_internal_add_tensors() {
  return tensors_.Add();
}
inline ::DRPB::TensorProto* ChunkData_Data::add_tensors() {
  // @@protoc_insertion_point(field_add:DRPB.ChunkData.Data.tensors)
  return _internal_add_tensors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
ChunkData_Data::tensors() const {
  // @@protoc_insertion_point(field_list:DRPB.ChunkData.Data.tensors)
  return tensors_;
}

// -------------------------------------------------------------------

// ChunkData

// uint64 chunk_key = 1;
inline void ChunkData::clear_chunk_key() {
  chunk_key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkData::_internal_chunk_key() const {
  return chunk_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ChunkData::chunk_key() const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.chunk_key)
  return _internal_chunk_key();
}
inline void ChunkData::_internal_set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunk_key_ = value;
}
inline void ChunkData::set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunk_key(value);
  // @@protoc_insertion_point(field_set:DRPB.ChunkData.chunk_key)
}

// .DRPB.SequenceRange sequence_range = 2;
inline bool ChunkData::_internal_has_sequence_range() const {
  return this != internal_default_instance() && sequence_range_ != nullptr;
}
inline bool ChunkData::has_sequence_range() const {
  return _internal_has_sequence_range();
}
inline void ChunkData::clear_sequence_range() {
  if (GetArena() == nullptr && sequence_range_ != nullptr) {
    delete sequence_range_;
  }
  sequence_range_ = nullptr;
}
inline const ::DRPB::SequenceRange& ChunkData::_internal_sequence_range() const {
  const ::DRPB::SequenceRange* p = sequence_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::SequenceRange&>(
      ::DRPB::_SequenceRange_default_instance_);
}
inline const ::DRPB::SequenceRange& ChunkData::sequence_range() const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.sequence_range)
  return _internal_sequence_range();
}
inline void ChunkData::unsafe_arena_set_allocated_sequence_range(
    ::DRPB::SequenceRange* sequence_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sequence_range_);
  }
  sequence_range_ = sequence_range;
  if (sequence_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.ChunkData.sequence_range)
}
inline ::DRPB::SequenceRange* ChunkData::release_sequence_range() {
  
  ::DRPB::SequenceRange* temp = sequence_range_;
  sequence_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::SequenceRange* ChunkData::unsafe_arena_release_sequence_range() {
  // @@protoc_insertion_point(field_release:DRPB.ChunkData.sequence_range)
  
  ::DRPB::SequenceRange* temp = sequence_range_;
  sequence_range_ = nullptr;
  return temp;
}
inline ::DRPB::SequenceRange* ChunkData::_internal_mutable_sequence_range() {
  
  if (sequence_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::SequenceRange>(GetArena());
    sequence_range_ = p;
  }
  return sequence_range_;
}
inline ::DRPB::SequenceRange* ChunkData::mutable_sequence_range() {
  // @@protoc_insertion_point(field_mutable:DRPB.ChunkData.sequence_range)
  return _internal_mutable_sequence_range();
}
inline void ChunkData::set_allocated_sequence_range(::DRPB::SequenceRange* sequence_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sequence_range_;
  }
  if (sequence_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sequence_range);
    if (message_arena != submessage_arena) {
      sequence_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sequence_range, submessage_arena);
    }
    
  } else {
    
  }
  sequence_range_ = sequence_range;
  // @@protoc_insertion_point(field_set_allocated:DRPB.ChunkData.sequence_range)
}

// .DRPB.ChunkData.Data data = 5 [lazy = true];
inline bool ChunkData::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool ChunkData::has_data() const {
  return _internal_has_data();
}
inline void ChunkData::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::DRPB::ChunkData_Data& ChunkData::_internal_data() const {
  const ::DRPB::ChunkData_Data* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::ChunkData_Data&>(
      ::DRPB::_ChunkData_Data_default_instance_);
}
inline const ::DRPB::ChunkData_Data& ChunkData::data() const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.data)
  return _internal_data();
}
inline void ChunkData::unsafe_arena_set_allocated_data(
    ::DRPB::ChunkData_Data* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.ChunkData.data)
}
inline ::DRPB::ChunkData_Data* ChunkData::release_data() {
  
  ::DRPB::ChunkData_Data* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::ChunkData_Data* ChunkData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:DRPB.ChunkData.data)
  
  ::DRPB::ChunkData_Data* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::DRPB::ChunkData_Data* ChunkData::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::ChunkData_Data>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::DRPB::ChunkData_Data* ChunkData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:DRPB.ChunkData.data)
  return _internal_mutable_data();
}
inline void ChunkData::set_allocated_data(::DRPB::ChunkData_Data* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:DRPB.ChunkData.data)
}

// int32 data_tensors_len = 6;
inline void ChunkData::clear_data_tensors_len() {
  data_tensors_len_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::_internal_data_tensors_len() const {
  return data_tensors_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChunkData::data_tensors_len() const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.data_tensors_len)
  return _internal_data_tensors_len();
}
inline void ChunkData::_internal_set_data_tensors_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  data_tensors_len_ = value;
}
inline void ChunkData::set_data_tensors_len(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_data_tensors_len(value);
  // @@protoc_insertion_point(field_set:DRPB.ChunkData.data_tensors_len)
}

// bool delta_encoded = 4;
inline void ChunkData::clear_delta_encoded() {
  delta_encoded_ = false;
}
inline bool ChunkData::_internal_delta_encoded() const {
  return delta_encoded_;
}
inline bool ChunkData::delta_encoded() const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.delta_encoded)
  return _internal_delta_encoded();
}
inline void ChunkData::_internal_set_delta_encoded(bool value) {
  
  delta_encoded_ = value;
}
inline void ChunkData::set_delta_encoded(bool value) {
  _internal_set_delta_encoded(value);
  // @@protoc_insertion_point(field_set:DRPB.ChunkData.delta_encoded)
}

// repeated .DRPB.TensorProto deprecated_data = 3 [deprecated = true];
inline int ChunkData::_internal_deprecated_data_size() const {
  return deprecated_data_.size();
}
inline int ChunkData::deprecated_data_size() const {
  return _internal_deprecated_data_size();
}
inline void ChunkData::clear_deprecated_data() {
  deprecated_data_.Clear();
}
inline ::DRPB::TensorProto* ChunkData::mutable_deprecated_data(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.ChunkData.deprecated_data)
  return deprecated_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >*
ChunkData::mutable_deprecated_data() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.ChunkData.deprecated_data)
  return &deprecated_data_;
}
inline const ::DRPB::TensorProto& ChunkData::_internal_deprecated_data(int index) const {
  return deprecated_data_.Get(index);
}
inline const ::DRPB::TensorProto& ChunkData::deprecated_data(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.ChunkData.deprecated_data)
  return _internal_deprecated_data(index);
}
inline ::DRPB::TensorProto* ChunkData::_internal_add_deprecated_data() {
  return deprecated_data_.Add();
}
inline ::DRPB::TensorProto* ChunkData::add_deprecated_data() {
  // @@protoc_insertion_point(field_add:DRPB.ChunkData.deprecated_data)
  return _internal_add_deprecated_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::TensorProto >&
ChunkData::deprecated_data() const {
  // @@protoc_insertion_point(field_list:DRPB.ChunkData.deprecated_data)
  return deprecated_data_;
}

// -------------------------------------------------------------------

// SliceRange

// int32 offset = 1;
inline void SliceRange::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceRange::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceRange::offset() const {
  // @@protoc_insertion_point(field_get:DRPB.SliceRange.offset)
  return _internal_offset();
}
inline void SliceRange::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void SliceRange::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:DRPB.SliceRange.offset)
}

// int32 length = 2;
inline void SliceRange::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceRange::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SliceRange::length() const {
  // @@protoc_insertion_point(field_get:DRPB.SliceRange.length)
  return _internal_length();
}
inline void SliceRange::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void SliceRange::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:DRPB.SliceRange.length)
}

// -------------------------------------------------------------------

// SequenceRange

// uint64 episode_id = 1;
inline void SequenceRange::clear_episode_id() {
  episode_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SequenceRange::_internal_episode_id() const {
  return episode_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 SequenceRange::episode_id() const {
  // @@protoc_insertion_point(field_get:DRPB.SequenceRange.episode_id)
  return _internal_episode_id();
}
inline void SequenceRange::_internal_set_episode_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  episode_id_ = value;
}
inline void SequenceRange::set_episode_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_episode_id(value);
  // @@protoc_insertion_point(field_set:DRPB.SequenceRange.episode_id)
}

// int32 start = 2;
inline void SequenceRange::clear_start() {
  start_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceRange::_internal_start() const {
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceRange::start() const {
  // @@protoc_insertion_point(field_get:DRPB.SequenceRange.start)
  return _internal_start();
}
inline void SequenceRange::_internal_set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_ = value;
}
inline void SequenceRange::set_start(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:DRPB.SequenceRange.start)
}

// int32 end = 3;
inline void SequenceRange::clear_end() {
  end_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceRange::_internal_end() const {
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SequenceRange::end() const {
  // @@protoc_insertion_point(field_get:DRPB.SequenceRange.end)
  return _internal_end();
}
inline void SequenceRange::_internal_set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_ = value;
}
inline void SequenceRange::set_end(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:DRPB.SequenceRange.end)
}

// bool sparse = 4;
inline void SequenceRange::clear_sparse() {
  sparse_ = false;
}
inline bool SequenceRange::_internal_sparse() const {
  return sparse_;
}
inline bool SequenceRange::sparse() const {
  // @@protoc_insertion_point(field_get:DRPB.SequenceRange.sparse)
  return _internal_sparse();
}
inline void SequenceRange::_internal_set_sparse(bool value) {
  
  sparse_ = value;
}
inline void SequenceRange::set_sparse(bool value) {
  _internal_set_sparse(value);
  // @@protoc_insertion_point(field_set:DRPB.SequenceRange.sparse)
}

// -------------------------------------------------------------------

// FlatTrajectory_ChunkSlice

// uint64 chunk_key = 1;
inline void FlatTrajectory_ChunkSlice::clear_chunk_key() {
  chunk_key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlatTrajectory_ChunkSlice::_internal_chunk_key() const {
  return chunk_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FlatTrajectory_ChunkSlice::chunk_key() const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.ChunkSlice.chunk_key)
  return _internal_chunk_key();
}
inline void FlatTrajectory_ChunkSlice::_internal_set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  chunk_key_ = value;
}
inline void FlatTrajectory_ChunkSlice::set_chunk_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_chunk_key(value);
  // @@protoc_insertion_point(field_set:DRPB.FlatTrajectory.ChunkSlice.chunk_key)
}

// int32 offset = 2;
inline void FlatTrajectory_ChunkSlice::clear_offset() {
  offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::offset() const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.ChunkSlice.offset)
  return _internal_offset();
}
inline void FlatTrajectory_ChunkSlice::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  offset_ = value;
}
inline void FlatTrajectory_ChunkSlice::set_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:DRPB.FlatTrajectory.ChunkSlice.offset)
}

// int32 length = 3;
inline void FlatTrajectory_ChunkSlice::clear_length() {
  length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::length() const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.ChunkSlice.length)
  return _internal_length();
}
inline void FlatTrajectory_ChunkSlice::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  length_ = value;
}
inline void FlatTrajectory_ChunkSlice::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:DRPB.FlatTrajectory.ChunkSlice.length)
}

// int32 index = 4;
inline void FlatTrajectory_ChunkSlice::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FlatTrajectory_ChunkSlice::index() const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.ChunkSlice.index)
  return _internal_index();
}
inline void FlatTrajectory_ChunkSlice::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void FlatTrajectory_ChunkSlice::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:DRPB.FlatTrajectory.ChunkSlice.index)
}

// -------------------------------------------------------------------

// FlatTrajectory_Column

// repeated .DRPB.FlatTrajectory.ChunkSlice chunk_slices = 1;
inline int FlatTrajectory_Column::_internal_chunk_slices_size() const {
  return chunk_slices_.size();
}
inline int FlatTrajectory_Column::chunk_slices_size() const {
  return _internal_chunk_slices_size();
}
inline void FlatTrajectory_Column::clear_chunk_slices() {
  chunk_slices_.Clear();
}
inline ::DRPB::FlatTrajectory_ChunkSlice* FlatTrajectory_Column::mutable_chunk_slices(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.FlatTrajectory.Column.chunk_slices)
  return chunk_slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_ChunkSlice >*
FlatTrajectory_Column::mutable_chunk_slices() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.FlatTrajectory.Column.chunk_slices)
  return &chunk_slices_;
}
inline const ::DRPB::FlatTrajectory_ChunkSlice& FlatTrajectory_Column::_internal_chunk_slices(int index) const {
  return chunk_slices_.Get(index);
}
inline const ::DRPB::FlatTrajectory_ChunkSlice& FlatTrajectory_Column::chunk_slices(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.Column.chunk_slices)
  return _internal_chunk_slices(index);
}
inline ::DRPB::FlatTrajectory_ChunkSlice* FlatTrajectory_Column::_internal_add_chunk_slices() {
  return chunk_slices_.Add();
}
inline ::DRPB::FlatTrajectory_ChunkSlice* FlatTrajectory_Column::add_chunk_slices() {
  // @@protoc_insertion_point(field_add:DRPB.FlatTrajectory.Column.chunk_slices)
  return _internal_add_chunk_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_ChunkSlice >&
FlatTrajectory_Column::chunk_slices() const {
  // @@protoc_insertion_point(field_list:DRPB.FlatTrajectory.Column.chunk_slices)
  return chunk_slices_;
}

// bool squeeze = 2;
inline void FlatTrajectory_Column::clear_squeeze() {
  squeeze_ = false;
}
inline bool FlatTrajectory_Column::_internal_squeeze() const {
  return squeeze_;
}
inline bool FlatTrajectory_Column::squeeze() const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.Column.squeeze)
  return _internal_squeeze();
}
inline void FlatTrajectory_Column::_internal_set_squeeze(bool value) {
  
  squeeze_ = value;
}
inline void FlatTrajectory_Column::set_squeeze(bool value) {
  _internal_set_squeeze(value);
  // @@protoc_insertion_point(field_set:DRPB.FlatTrajectory.Column.squeeze)
}

// -------------------------------------------------------------------

// FlatTrajectory

// repeated .DRPB.FlatTrajectory.Column columns = 1;
inline int FlatTrajectory::_internal_columns_size() const {
  return columns_.size();
}
inline int FlatTrajectory::columns_size() const {
  return _internal_columns_size();
}
inline void FlatTrajectory::clear_columns() {
  columns_.Clear();
}
inline ::DRPB::FlatTrajectory_Column* FlatTrajectory::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.FlatTrajectory.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_Column >*
FlatTrajectory::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.FlatTrajectory.columns)
  return &columns_;
}
inline const ::DRPB::FlatTrajectory_Column& FlatTrajectory::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::DRPB::FlatTrajectory_Column& FlatTrajectory::columns(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.FlatTrajectory.columns)
  return _internal_columns(index);
}
inline ::DRPB::FlatTrajectory_Column* FlatTrajectory::_internal_add_columns() {
  return columns_.Add();
}
inline ::DRPB::FlatTrajectory_Column* FlatTrajectory::add_columns() {
  // @@protoc_insertion_point(field_add:DRPB.FlatTrajectory.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::FlatTrajectory_Column >&
FlatTrajectory::columns() const {
  // @@protoc_insertion_point(field_list:DRPB.FlatTrajectory.columns)
  return columns_;
}

// -------------------------------------------------------------------

// PrioritizedItem

// uint64 key = 1;
inline void PrioritizedItem::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrioritizedItem::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrioritizedItem::key() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.key)
  return _internal_key();
}
inline void PrioritizedItem::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void PrioritizedItem::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:DRPB.PrioritizedItem.key)
}

// string table = 2;
inline void PrioritizedItem::clear_table() {
  table_.ClearToEmpty();
}
inline const std::string& PrioritizedItem::table() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.table)
  return _internal_table();
}
inline void PrioritizedItem::set_table(const std::string& value) {
  _internal_set_table(value);
  // @@protoc_insertion_point(field_set:DRPB.PrioritizedItem.table)
}
inline std::string* PrioritizedItem::mutable_table() {
  // @@protoc_insertion_point(field_mutable:DRPB.PrioritizedItem.table)
  return _internal_mutable_table();
}
inline const std::string& PrioritizedItem::_internal_table() const {
  return table_.Get();
}
inline void PrioritizedItem::_internal_set_table(const std::string& value) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PrioritizedItem::set_table(std::string&& value) {
  
  table_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.PrioritizedItem.table)
}
inline void PrioritizedItem::set_table(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.PrioritizedItem.table)
}
inline void PrioritizedItem::set_table(const char* value,
    size_t size) {
  
  table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.PrioritizedItem.table)
}
inline std::string* PrioritizedItem::_internal_mutable_table() {
  
  return table_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PrioritizedItem::release_table() {
  // @@protoc_insertion_point(field_release:DRPB.PrioritizedItem.table)
  return table_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PrioritizedItem::set_allocated_table(std::string* table) {
  if (table != nullptr) {
    
  } else {
    
  }
  table_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.PrioritizedItem.table)
}

// double priority = 5;
inline void PrioritizedItem::clear_priority() {
  priority_ = 0;
}
inline double PrioritizedItem::_internal_priority() const {
  return priority_;
}
inline double PrioritizedItem::priority() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.priority)
  return _internal_priority();
}
inline void PrioritizedItem::_internal_set_priority(double value) {
  
  priority_ = value;
}
inline void PrioritizedItem::set_priority(double value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:DRPB.PrioritizedItem.priority)
}

// int32 times_sampled = 6;
inline void PrioritizedItem::clear_times_sampled() {
  times_sampled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrioritizedItem::_internal_times_sampled() const {
  return times_sampled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PrioritizedItem::times_sampled() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.times_sampled)
  return _internal_times_sampled();
}
inline void PrioritizedItem::_internal_set_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  times_sampled_ = value;
}
inline void PrioritizedItem::set_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_times_sampled(value);
  // @@protoc_insertion_point(field_set:DRPB.PrioritizedItem.times_sampled)
}

// .google.protobuf.Timestamp inserted_at = 7;
inline bool PrioritizedItem::_internal_has_inserted_at() const {
  return this != internal_default_instance() && inserted_at_ != nullptr;
}
inline bool PrioritizedItem::has_inserted_at() const {
  return _internal_has_inserted_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PrioritizedItem::_internal_inserted_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = inserted_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PrioritizedItem::inserted_at() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.inserted_at)
  return _internal_inserted_at();
}
inline void PrioritizedItem::unsafe_arena_set_allocated_inserted_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_);
  }
  inserted_at_ = inserted_at;
  if (inserted_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.PrioritizedItem.inserted_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrioritizedItem::release_inserted_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = inserted_at_;
  inserted_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrioritizedItem::unsafe_arena_release_inserted_at() {
  // @@protoc_insertion_point(field_release:DRPB.PrioritizedItem.inserted_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = inserted_at_;
  inserted_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrioritizedItem::_internal_mutable_inserted_at() {
  
  if (inserted_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    inserted_at_ = p;
  }
  return inserted_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PrioritizedItem::mutable_inserted_at() {
  // @@protoc_insertion_point(field_mutable:DRPB.PrioritizedItem.inserted_at)
  return _internal_mutable_inserted_at();
}
inline void PrioritizedItem::set_allocated_inserted_at(PROTOBUF_NAMESPACE_ID::Timestamp* inserted_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at_);
  }
  if (inserted_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(inserted_at)->GetArena();
    if (message_arena != submessage_arena) {
      inserted_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inserted_at, submessage_arena);
    }
    
  } else {
    
  }
  inserted_at_ = inserted_at;
  // @@protoc_insertion_point(field_set_allocated:DRPB.PrioritizedItem.inserted_at)
}

// .DRPB.FlatTrajectory flat_trajectory = 8;
inline bool PrioritizedItem::_internal_has_flat_trajectory() const {
  return this != internal_default_instance() && flat_trajectory_ != nullptr;
}
inline bool PrioritizedItem::has_flat_trajectory() const {
  return _internal_has_flat_trajectory();
}
inline void PrioritizedItem::clear_flat_trajectory() {
  if (GetArena() == nullptr && flat_trajectory_ != nullptr) {
    delete flat_trajectory_;
  }
  flat_trajectory_ = nullptr;
}
inline const ::DRPB::FlatTrajectory& PrioritizedItem::_internal_flat_trajectory() const {
  const ::DRPB::FlatTrajectory* p = flat_trajectory_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::FlatTrajectory&>(
      ::DRPB::_FlatTrajectory_default_instance_);
}
inline const ::DRPB::FlatTrajectory& PrioritizedItem::flat_trajectory() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.flat_trajectory)
  return _internal_flat_trajectory();
}
inline void PrioritizedItem::unsafe_arena_set_allocated_flat_trajectory(
    ::DRPB::FlatTrajectory* flat_trajectory) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(flat_trajectory_);
  }
  flat_trajectory_ = flat_trajectory;
  if (flat_trajectory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.PrioritizedItem.flat_trajectory)
}
inline ::DRPB::FlatTrajectory* PrioritizedItem::release_flat_trajectory() {
  
  ::DRPB::FlatTrajectory* temp = flat_trajectory_;
  flat_trajectory_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::FlatTrajectory* PrioritizedItem::unsafe_arena_release_flat_trajectory() {
  // @@protoc_insertion_point(field_release:DRPB.PrioritizedItem.flat_trajectory)
  
  ::DRPB::FlatTrajectory* temp = flat_trajectory_;
  flat_trajectory_ = nullptr;
  return temp;
}
inline ::DRPB::FlatTrajectory* PrioritizedItem::_internal_mutable_flat_trajectory() {
  
  if (flat_trajectory_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::FlatTrajectory>(GetArena());
    flat_trajectory_ = p;
  }
  return flat_trajectory_;
}
inline ::DRPB::FlatTrajectory* PrioritizedItem::mutable_flat_trajectory() {
  // @@protoc_insertion_point(field_mutable:DRPB.PrioritizedItem.flat_trajectory)
  return _internal_mutable_flat_trajectory();
}
inline void PrioritizedItem::set_allocated_flat_trajectory(::DRPB::FlatTrajectory* flat_trajectory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete flat_trajectory_;
  }
  if (flat_trajectory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flat_trajectory);
    if (message_arena != submessage_arena) {
      flat_trajectory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flat_trajectory, submessage_arena);
    }
    
  } else {
    
  }
  flat_trajectory_ = flat_trajectory;
  // @@protoc_insertion_point(field_set_allocated:DRPB.PrioritizedItem.flat_trajectory)
}

// repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
inline int PrioritizedItem::_internal_deprecated_chunk_keys_size() const {
  return deprecated_chunk_keys_.size();
}
inline int PrioritizedItem::deprecated_chunk_keys_size() const {
  return _internal_deprecated_chunk_keys_size();
}
inline void PrioritizedItem::clear_deprecated_chunk_keys() {
  deprecated_chunk_keys_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrioritizedItem::_internal_deprecated_chunk_keys(int index) const {
  return deprecated_chunk_keys_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 PrioritizedItem::deprecated_chunk_keys(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.deprecated_chunk_keys)
  return _internal_deprecated_chunk_keys(index);
}
inline void PrioritizedItem::set_deprecated_chunk_keys(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deprecated_chunk_keys_.Set(index, value);
  // @@protoc_insertion_point(field_set:DRPB.PrioritizedItem.deprecated_chunk_keys)
}
inline void PrioritizedItem::_internal_add_deprecated_chunk_keys(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  deprecated_chunk_keys_.Add(value);
}
inline void PrioritizedItem::add_deprecated_chunk_keys(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_deprecated_chunk_keys(value);
  // @@protoc_insertion_point(field_add:DRPB.PrioritizedItem.deprecated_chunk_keys)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PrioritizedItem::_internal_deprecated_chunk_keys() const {
  return deprecated_chunk_keys_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
PrioritizedItem::deprecated_chunk_keys() const {
  // @@protoc_insertion_point(field_list:DRPB.PrioritizedItem.deprecated_chunk_keys)
  return _internal_deprecated_chunk_keys();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PrioritizedItem::_internal_mutable_deprecated_chunk_keys() {
  return &deprecated_chunk_keys_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
PrioritizedItem::mutable_deprecated_chunk_keys() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.PrioritizedItem.deprecated_chunk_keys)
  return _internal_mutable_deprecated_chunk_keys();
}

// .DRPB.SliceRange deprecated_sequence_range = 4 [deprecated = true];
inline bool PrioritizedItem::_internal_has_deprecated_sequence_range() const {
  return this != internal_default_instance() && deprecated_sequence_range_ != nullptr;
}
inline bool PrioritizedItem::has_deprecated_sequence_range() const {
  return _internal_has_deprecated_sequence_range();
}
inline void PrioritizedItem::clear_deprecated_sequence_range() {
  if (GetArena() == nullptr && deprecated_sequence_range_ != nullptr) {
    delete deprecated_sequence_range_;
  }
  deprecated_sequence_range_ = nullptr;
}
inline const ::DRPB::SliceRange& PrioritizedItem::_internal_deprecated_sequence_range() const {
  const ::DRPB::SliceRange* p = deprecated_sequence_range_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::SliceRange&>(
      ::DRPB::_SliceRange_default_instance_);
}
inline const ::DRPB::SliceRange& PrioritizedItem::deprecated_sequence_range() const {
  // @@protoc_insertion_point(field_get:DRPB.PrioritizedItem.deprecated_sequence_range)
  return _internal_deprecated_sequence_range();
}
inline void PrioritizedItem::unsafe_arena_set_allocated_deprecated_sequence_range(
    ::DRPB::SliceRange* deprecated_sequence_range) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deprecated_sequence_range_);
  }
  deprecated_sequence_range_ = deprecated_sequence_range;
  if (deprecated_sequence_range) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.PrioritizedItem.deprecated_sequence_range)
}
inline ::DRPB::SliceRange* PrioritizedItem::release_deprecated_sequence_range() {
  
  ::DRPB::SliceRange* temp = deprecated_sequence_range_;
  deprecated_sequence_range_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::SliceRange* PrioritizedItem::unsafe_arena_release_deprecated_sequence_range() {
  // @@protoc_insertion_point(field_release:DRPB.PrioritizedItem.deprecated_sequence_range)
  
  ::DRPB::SliceRange* temp = deprecated_sequence_range_;
  deprecated_sequence_range_ = nullptr;
  return temp;
}
inline ::DRPB::SliceRange* PrioritizedItem::_internal_mutable_deprecated_sequence_range() {
  
  if (deprecated_sequence_range_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::SliceRange>(GetArena());
    deprecated_sequence_range_ = p;
  }
  return deprecated_sequence_range_;
}
inline ::DRPB::SliceRange* PrioritizedItem::mutable_deprecated_sequence_range() {
  // @@protoc_insertion_point(field_mutable:DRPB.PrioritizedItem.deprecated_sequence_range)
  return _internal_mutable_deprecated_sequence_range();
}
inline void PrioritizedItem::set_allocated_deprecated_sequence_range(::DRPB::SliceRange* deprecated_sequence_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete deprecated_sequence_range_;
  }
  if (deprecated_sequence_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(deprecated_sequence_range);
    if (message_arena != submessage_arena) {
      deprecated_sequence_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deprecated_sequence_range, submessage_arena);
    }
    
  } else {
    
  }
  deprecated_sequence_range_ = deprecated_sequence_range;
  // @@protoc_insertion_point(field_set_allocated:DRPB.PrioritizedItem.deprecated_sequence_range)
}

// -------------------------------------------------------------------

// KeyWithPriority

// uint64 key = 1;
inline void KeyWithPriority::clear_key() {
  key_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyWithPriority::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyWithPriority::key() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyWithPriority.key)
  return _internal_key();
}
inline void KeyWithPriority::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  key_ = value;
}
inline void KeyWithPriority::set_key(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyWithPriority.key)
}

// double priority = 2;
inline void KeyWithPriority::clear_priority() {
  priority_ = 0;
}
inline double KeyWithPriority::_internal_priority() const {
  return priority_;
}
inline double KeyWithPriority::priority() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyWithPriority.priority)
  return _internal_priority();
}
inline void KeyWithPriority::_internal_set_priority(double value) {
  
  priority_ = value;
}
inline void KeyWithPriority::set_priority(double value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyWithPriority.priority)
}

// -------------------------------------------------------------------

// SampleInfo

// .DRPB.PrioritizedItem item = 1;
inline bool SampleInfo::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool SampleInfo::has_item() const {
  return _internal_has_item();
}
inline void SampleInfo::clear_item() {
  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::DRPB::PrioritizedItem& SampleInfo::_internal_item() const {
  const ::DRPB::PrioritizedItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::PrioritizedItem&>(
      ::DRPB::_PrioritizedItem_default_instance_);
}
inline const ::DRPB::PrioritizedItem& SampleInfo::item() const {
  // @@protoc_insertion_point(field_get:DRPB.SampleInfo.item)
  return _internal_item();
}
inline void SampleInfo::unsafe_arena_set_allocated_item(
    ::DRPB::PrioritizedItem* item) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.SampleInfo.item)
}
inline ::DRPB::PrioritizedItem* SampleInfo::release_item() {
  
  ::DRPB::PrioritizedItem* temp = item_;
  item_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::PrioritizedItem* SampleInfo::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:DRPB.SampleInfo.item)
  
  ::DRPB::PrioritizedItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::DRPB::PrioritizedItem* SampleInfo::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::PrioritizedItem>(GetArena());
    item_ = p;
  }
  return item_;
}
inline ::DRPB::PrioritizedItem* SampleInfo::mutable_item() {
  // @@protoc_insertion_point(field_mutable:DRPB.SampleInfo.item)
  return _internal_mutable_item();
}
inline void SampleInfo::set_allocated_item(::DRPB::PrioritizedItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:DRPB.SampleInfo.item)
}

// double probability = 2;
inline void SampleInfo::clear_probability() {
  probability_ = 0;
}
inline double SampleInfo::_internal_probability() const {
  return probability_;
}
inline double SampleInfo::probability() const {
  // @@protoc_insertion_point(field_get:DRPB.SampleInfo.probability)
  return _internal_probability();
}
inline void SampleInfo::_internal_set_probability(double value) {
  
  probability_ = value;
}
inline void SampleInfo::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:DRPB.SampleInfo.probability)
}

// int64 table_size = 3;
inline void SampleInfo::clear_table_size() {
  table_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleInfo::_internal_table_size() const {
  return table_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SampleInfo::table_size() const {
  // @@protoc_insertion_point(field_get:DRPB.SampleInfo.table_size)
  return _internal_table_size();
}
inline void SampleInfo::_internal_set_table_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  table_size_ = value;
}
inline void SampleInfo::set_table_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_table_size(value);
  // @@protoc_insertion_point(field_set:DRPB.SampleInfo.table_size)
}

// bool rate_limited = 4;
inline void SampleInfo::clear_rate_limited() {
  rate_limited_ = false;
}
inline bool SampleInfo::_internal_rate_limited() const {
  return rate_limited_;
}
inline bool SampleInfo::rate_limited() const {
  // @@protoc_insertion_point(field_get:DRPB.SampleInfo.rate_limited)
  return _internal_rate_limited();
}
inline void SampleInfo::_internal_set_rate_limited(bool value) {
  
  rate_limited_ = value;
}
inline void SampleInfo::set_rate_limited(bool value) {
  _internal_set_rate_limited(value);
  // @@protoc_insertion_point(field_set:DRPB.SampleInfo.rate_limited)
}

// -------------------------------------------------------------------

// TableInfo

// string name = 8;
inline void TableInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TableInfo::name() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.name)
  return _internal_name();
}
inline void TableInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.name)
}
inline std::string* TableInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.TableInfo.name)
  return _internal_mutable_name();
}
inline const std::string& TableInfo::_internal_name() const {
  return name_.Get();
}
inline void TableInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TableInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.TableInfo.name)
}
inline void TableInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.TableInfo.name)
}
inline void TableInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.TableInfo.name)
}
inline std::string* TableInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TableInfo::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.TableInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TableInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.TableInfo.name)
}

// .DRPB.KeyDistributionOptions sampler_options = 1;
inline bool TableInfo::_internal_has_sampler_options() const {
  return this != internal_default_instance() && sampler_options_ != nullptr;
}
inline bool TableInfo::has_sampler_options() const {
  return _internal_has_sampler_options();
}
inline void TableInfo::clear_sampler_options() {
  if (GetArena() == nullptr && sampler_options_ != nullptr) {
    delete sampler_options_;
  }
  sampler_options_ = nullptr;
}
inline const ::DRPB::KeyDistributionOptions& TableInfo::_internal_sampler_options() const {
  const ::DRPB::KeyDistributionOptions* p = sampler_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::KeyDistributionOptions&>(
      ::DRPB::_KeyDistributionOptions_default_instance_);
}
inline const ::DRPB::KeyDistributionOptions& TableInfo::sampler_options() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.sampler_options)
  return _internal_sampler_options();
}
inline void TableInfo::unsafe_arena_set_allocated_sampler_options(
    ::DRPB::KeyDistributionOptions* sampler_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampler_options_);
  }
  sampler_options_ = sampler_options;
  if (sampler_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TableInfo.sampler_options)
}
inline ::DRPB::KeyDistributionOptions* TableInfo::release_sampler_options() {
  
  ::DRPB::KeyDistributionOptions* temp = sampler_options_;
  sampler_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::unsafe_arena_release_sampler_options() {
  // @@protoc_insertion_point(field_release:DRPB.TableInfo.sampler_options)
  
  ::DRPB::KeyDistributionOptions* temp = sampler_options_;
  sampler_options_ = nullptr;
  return temp;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::_internal_mutable_sampler_options() {
  
  if (sampler_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::KeyDistributionOptions>(GetArena());
    sampler_options_ = p;
  }
  return sampler_options_;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::mutable_sampler_options() {
  // @@protoc_insertion_point(field_mutable:DRPB.TableInfo.sampler_options)
  return _internal_mutable_sampler_options();
}
inline void TableInfo::set_allocated_sampler_options(::DRPB::KeyDistributionOptions* sampler_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sampler_options_;
  }
  if (sampler_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sampler_options);
    if (message_arena != submessage_arena) {
      sampler_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampler_options, submessage_arena);
    }
    
  } else {
    
  }
  sampler_options_ = sampler_options;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TableInfo.sampler_options)
}

// .DRPB.KeyDistributionOptions remover_options = 2;
inline bool TableInfo::_internal_has_remover_options() const {
  return this != internal_default_instance() && remover_options_ != nullptr;
}
inline bool TableInfo::has_remover_options() const {
  return _internal_has_remover_options();
}
inline void TableInfo::clear_remover_options() {
  if (GetArena() == nullptr && remover_options_ != nullptr) {
    delete remover_options_;
  }
  remover_options_ = nullptr;
}
inline const ::DRPB::KeyDistributionOptions& TableInfo::_internal_remover_options() const {
  const ::DRPB::KeyDistributionOptions* p = remover_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::KeyDistributionOptions&>(
      ::DRPB::_KeyDistributionOptions_default_instance_);
}
inline const ::DRPB::KeyDistributionOptions& TableInfo::remover_options() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.remover_options)
  return _internal_remover_options();
}
inline void TableInfo::unsafe_arena_set_allocated_remover_options(
    ::DRPB::KeyDistributionOptions* remover_options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remover_options_);
  }
  remover_options_ = remover_options;
  if (remover_options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TableInfo.remover_options)
}
inline ::DRPB::KeyDistributionOptions* TableInfo::release_remover_options() {
  
  ::DRPB::KeyDistributionOptions* temp = remover_options_;
  remover_options_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::unsafe_arena_release_remover_options() {
  // @@protoc_insertion_point(field_release:DRPB.TableInfo.remover_options)
  
  ::DRPB::KeyDistributionOptions* temp = remover_options_;
  remover_options_ = nullptr;
  return temp;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::_internal_mutable_remover_options() {
  
  if (remover_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::KeyDistributionOptions>(GetArena());
    remover_options_ = p;
  }
  return remover_options_;
}
inline ::DRPB::KeyDistributionOptions* TableInfo::mutable_remover_options() {
  // @@protoc_insertion_point(field_mutable:DRPB.TableInfo.remover_options)
  return _internal_mutable_remover_options();
}
inline void TableInfo::set_allocated_remover_options(::DRPB::KeyDistributionOptions* remover_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remover_options_;
  }
  if (remover_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remover_options);
    if (message_arena != submessage_arena) {
      remover_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remover_options, submessage_arena);
    }
    
  } else {
    
  }
  remover_options_ = remover_options;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TableInfo.remover_options)
}

// int64 max_size = 3;
inline void TableInfo::clear_max_size() {
  max_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_max_size() const {
  return max_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::max_size() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.max_size)
  return _internal_max_size();
}
inline void TableInfo::_internal_set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  max_size_ = value;
}
inline void TableInfo::set_max_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_size(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.max_size)
}

// int32 max_times_sampled = 4;
inline void TableInfo::clear_max_times_sampled() {
  max_times_sampled_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableInfo::_internal_max_times_sampled() const {
  return max_times_sampled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TableInfo::max_times_sampled() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.max_times_sampled)
  return _internal_max_times_sampled();
}
inline void TableInfo::_internal_set_max_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_times_sampled_ = value;
}
inline void TableInfo::set_max_times_sampled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_times_sampled(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.max_times_sampled)
}

// .DRPB.RateLimiterInfo rate_limiter_info = 5;
inline bool TableInfo::_internal_has_rate_limiter_info() const {
  return this != internal_default_instance() && rate_limiter_info_ != nullptr;
}
inline bool TableInfo::has_rate_limiter_info() const {
  return _internal_has_rate_limiter_info();
}
inline void TableInfo::clear_rate_limiter_info() {
  if (GetArena() == nullptr && rate_limiter_info_ != nullptr) {
    delete rate_limiter_info_;
  }
  rate_limiter_info_ = nullptr;
}
inline const ::DRPB::RateLimiterInfo& TableInfo::_internal_rate_limiter_info() const {
  const ::DRPB::RateLimiterInfo* p = rate_limiter_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::RateLimiterInfo&>(
      ::DRPB::_RateLimiterInfo_default_instance_);
}
inline const ::DRPB::RateLimiterInfo& TableInfo::rate_limiter_info() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.rate_limiter_info)
  return _internal_rate_limiter_info();
}
inline void TableInfo::unsafe_arena_set_allocated_rate_limiter_info(
    ::DRPB::RateLimiterInfo* rate_limiter_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rate_limiter_info_);
  }
  rate_limiter_info_ = rate_limiter_info;
  if (rate_limiter_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TableInfo.rate_limiter_info)
}
inline ::DRPB::RateLimiterInfo* TableInfo::release_rate_limiter_info() {
  
  ::DRPB::RateLimiterInfo* temp = rate_limiter_info_;
  rate_limiter_info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::RateLimiterInfo* TableInfo::unsafe_arena_release_rate_limiter_info() {
  // @@protoc_insertion_point(field_release:DRPB.TableInfo.rate_limiter_info)
  
  ::DRPB::RateLimiterInfo* temp = rate_limiter_info_;
  rate_limiter_info_ = nullptr;
  return temp;
}
inline ::DRPB::RateLimiterInfo* TableInfo::_internal_mutable_rate_limiter_info() {
  
  if (rate_limiter_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::RateLimiterInfo>(GetArena());
    rate_limiter_info_ = p;
  }
  return rate_limiter_info_;
}
inline ::DRPB::RateLimiterInfo* TableInfo::mutable_rate_limiter_info() {
  // @@protoc_insertion_point(field_mutable:DRPB.TableInfo.rate_limiter_info)
  return _internal_mutable_rate_limiter_info();
}
inline void TableInfo::set_allocated_rate_limiter_info(::DRPB::RateLimiterInfo* rate_limiter_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rate_limiter_info_;
  }
  if (rate_limiter_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rate_limiter_info);
    if (message_arena != submessage_arena) {
      rate_limiter_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rate_limiter_info, submessage_arena);
    }
    
  } else {
    
  }
  rate_limiter_info_ = rate_limiter_info;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TableInfo.rate_limiter_info)
}

// .DRPB.StructuredValue signature = 6;
inline bool TableInfo::_internal_has_signature() const {
  return this != internal_default_instance() && signature_ != nullptr;
}
inline bool TableInfo::has_signature() const {
  return _internal_has_signature();
}
inline void TableInfo::clear_signature() {
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
inline const ::DRPB::StructuredValue& TableInfo::_internal_signature() const {
  const ::DRPB::StructuredValue* p = signature_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::StructuredValue&>(
      ::DRPB::_StructuredValue_default_instance_);
}
inline const ::DRPB::StructuredValue& TableInfo::signature() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.signature)
  return _internal_signature();
}
inline void TableInfo::unsafe_arena_set_allocated_signature(
    ::DRPB::StructuredValue* signature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signature_);
  }
  signature_ = signature;
  if (signature) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TableInfo.signature)
}
inline ::DRPB::StructuredValue* TableInfo::release_signature() {
  
  ::DRPB::StructuredValue* temp = signature_;
  signature_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::StructuredValue* TableInfo::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_release:DRPB.TableInfo.signature)
  
  ::DRPB::StructuredValue* temp = signature_;
  signature_ = nullptr;
  return temp;
}
inline ::DRPB::StructuredValue* TableInfo::_internal_mutable_signature() {
  
  if (signature_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::StructuredValue>(GetArena());
    signature_ = p;
  }
  return signature_;
}
inline ::DRPB::StructuredValue* TableInfo::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:DRPB.TableInfo.signature)
  return _internal_mutable_signature();
}
inline void TableInfo::set_allocated_signature(::DRPB::StructuredValue* signature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete signature_;
  }
  if (signature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(signature);
    if (message_arena != submessage_arena) {
      signature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signature, submessage_arena);
    }
    
  } else {
    
  }
  signature_ = signature;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TableInfo.signature)
}

// int64 current_size = 7;
inline void TableInfo::clear_current_size() {
  current_size_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_current_size() const {
  return current_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::current_size() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.current_size)
  return _internal_current_size();
}
inline void TableInfo::_internal_set_current_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  current_size_ = value;
}
inline void TableInfo::set_current_size(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_current_size(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.current_size)
}

// int64 num_episodes = 9;
inline void TableInfo::clear_num_episodes() {
  num_episodes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_num_episodes() const {
  return num_episodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::num_episodes() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.num_episodes)
  return _internal_num_episodes();
}
inline void TableInfo::_internal_set_num_episodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_episodes_ = value;
}
inline void TableInfo::set_num_episodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_episodes(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.num_episodes)
}

// int64 num_deleted_episodes = 10;
inline void TableInfo::clear_num_deleted_episodes() {
  num_deleted_episodes_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_num_deleted_episodes() const {
  return num_deleted_episodes_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::num_deleted_episodes() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.num_deleted_episodes)
  return _internal_num_deleted_episodes();
}
inline void TableInfo::_internal_set_num_deleted_episodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_deleted_episodes_ = value;
}
inline void TableInfo::set_num_deleted_episodes(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_deleted_episodes(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.num_deleted_episodes)
}

// int64 num_unique_samples = 11;
inline void TableInfo::clear_num_unique_samples() {
  num_unique_samples_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::_internal_num_unique_samples() const {
  return num_unique_samples_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TableInfo::num_unique_samples() const {
  // @@protoc_insertion_point(field_get:DRPB.TableInfo.num_unique_samples)
  return _internal_num_unique_samples();
}
inline void TableInfo::_internal_set_num_unique_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  num_unique_samples_ = value;
}
inline void TableInfo::set_num_unique_samples(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_num_unique_samples(value);
  // @@protoc_insertion_point(field_set:DRPB.TableInfo.num_unique_samples)
}

// -------------------------------------------------------------------

// StructuredValue

// .DRPB.NoneValue none_value = 1;
inline bool StructuredValue::_internal_has_none_value() const {
  return kind_case() == kNoneValue;
}
inline bool StructuredValue::has_none_value() const {
  return _internal_has_none_value();
}
inline void StructuredValue::set_has_none_value() {
  _oneof_case_[0] = kNoneValue;
}
inline void StructuredValue::clear_none_value() {
  if (_internal_has_none_value()) {
    if (GetArena() == nullptr) {
      delete kind_.none_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::NoneValue* StructuredValue::release_none_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.none_value)
  if (_internal_has_none_value()) {
    clear_has_kind();
      ::DRPB::NoneValue* temp = kind_.none_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.none_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::NoneValue& StructuredValue::_internal_none_value() const {
  return _internal_has_none_value()
      ? *kind_.none_value_
      : reinterpret_cast< ::DRPB::NoneValue&>(::DRPB::_NoneValue_default_instance_);
}
inline const ::DRPB::NoneValue& StructuredValue::none_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.none_value)
  return _internal_none_value();
}
inline ::DRPB::NoneValue* StructuredValue::unsafe_arena_release_none_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.none_value)
  if (_internal_has_none_value()) {
    clear_has_kind();
    ::DRPB::NoneValue* temp = kind_.none_value_;
    kind_.none_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_none_value(::DRPB::NoneValue* none_value) {
  clear_kind();
  if (none_value) {
    set_has_none_value();
    kind_.none_value_ = none_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.none_value)
}
inline ::DRPB::NoneValue* StructuredValue::_internal_mutable_none_value() {
  if (!_internal_has_none_value()) {
    clear_kind();
    set_has_none_value();
    kind_.none_value_ = CreateMaybeMessage< ::DRPB::NoneValue >(GetArena());
  }
  return kind_.none_value_;
}
inline ::DRPB::NoneValue* StructuredValue::mutable_none_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.none_value)
  return _internal_mutable_none_value();
}

// double float64_value = 11;
inline bool StructuredValue::_internal_has_float64_value() const {
  return kind_case() == kFloat64Value;
}
inline bool StructuredValue::has_float64_value() const {
  return _internal_has_float64_value();
}
inline void StructuredValue::set_has_float64_value() {
  _oneof_case_[0] = kFloat64Value;
}
inline void StructuredValue::clear_float64_value() {
  if (_internal_has_float64_value()) {
    kind_.float64_value_ = 0;
    clear_has_kind();
  }
}
inline double StructuredValue::_internal_float64_value() const {
  if (_internal_has_float64_value()) {
    return kind_.float64_value_;
  }
  return 0;
}
inline void StructuredValue::_internal_set_float64_value(double value) {
  if (!_internal_has_float64_value()) {
    clear_kind();
    set_has_float64_value();
  }
  kind_.float64_value_ = value;
}
inline double StructuredValue::float64_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.float64_value)
  return _internal_float64_value();
}
inline void StructuredValue::set_float64_value(double value) {
  _internal_set_float64_value(value);
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.float64_value)
}

// sint64 int64_value = 12;
inline bool StructuredValue::_internal_has_int64_value() const {
  return kind_case() == kInt64Value;
}
inline bool StructuredValue::has_int64_value() const {
  return _internal_has_int64_value();
}
inline void StructuredValue::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void StructuredValue::clear_int64_value() {
  if (_internal_has_int64_value()) {
    kind_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_kind();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StructuredValue::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return kind_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void StructuredValue::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_kind();
    set_has_int64_value();
  }
  kind_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 StructuredValue::int64_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.int64_value)
  return _internal_int64_value();
}
inline void StructuredValue::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.int64_value)
}

// string string_value = 13;
inline bool StructuredValue::_internal_has_string_value() const {
  return kind_case() == kStringValue;
}
inline bool StructuredValue::has_string_value() const {
  return _internal_has_string_value();
}
inline void StructuredValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void StructuredValue::clear_string_value() {
  if (_internal_has_string_value()) {
    kind_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_kind();
  }
}
inline const std::string& StructuredValue::string_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.string_value)
  return _internal_string_value();
}
inline void StructuredValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.string_value)
}
inline std::string* StructuredValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& StructuredValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return kind_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void StructuredValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StructuredValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.string_value)
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.StructuredValue.string_value)
}
inline void StructuredValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.StructuredValue.string_value)
}
inline void StructuredValue::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  kind_.string_value_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.StructuredValue.string_value)
}
inline std::string* StructuredValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_kind();
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return kind_.string_value_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StructuredValue::release_string_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_kind();
    return kind_.string_value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void StructuredValue::set_allocated_string_value(std::string* string_value) {
  if (has_kind()) {
    clear_kind();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    kind_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.string_value)
}

// bool bool_value = 14;
inline bool StructuredValue::_internal_has_bool_value() const {
  return kind_case() == kBoolValue;
}
inline bool StructuredValue::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void StructuredValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void StructuredValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    kind_.bool_value_ = false;
    clear_has_kind();
  }
}
inline bool StructuredValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return kind_.bool_value_;
  }
  return false;
}
inline void StructuredValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_kind();
    set_has_bool_value();
  }
  kind_.bool_value_ = value;
}
inline bool StructuredValue::bool_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.bool_value)
  return _internal_bool_value();
}
inline void StructuredValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.bool_value)
}

// .DRPB.TensorShapeProto tensor_shape_value = 31;
inline bool StructuredValue::_internal_has_tensor_shape_value() const {
  return kind_case() == kTensorShapeValue;
}
inline bool StructuredValue::has_tensor_shape_value() const {
  return _internal_has_tensor_shape_value();
}
inline void StructuredValue::set_has_tensor_shape_value() {
  _oneof_case_[0] = kTensorShapeValue;
}
inline void StructuredValue::clear_tensor_shape_value() {
  if (_internal_has_tensor_shape_value()) {
    if (GetArena() == nullptr) {
      delete kind_.tensor_shape_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::TensorShapeProto* StructuredValue::release_tensor_shape_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.tensor_shape_value)
  if (_internal_has_tensor_shape_value()) {
    clear_has_kind();
      ::DRPB::TensorShapeProto* temp = kind_.tensor_shape_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.tensor_shape_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::TensorShapeProto& StructuredValue::_internal_tensor_shape_value() const {
  return _internal_has_tensor_shape_value()
      ? *kind_.tensor_shape_value_
      : reinterpret_cast< ::DRPB::TensorShapeProto&>(::DRPB::_TensorShapeProto_default_instance_);
}
inline const ::DRPB::TensorShapeProto& StructuredValue::tensor_shape_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.tensor_shape_value)
  return _internal_tensor_shape_value();
}
inline ::DRPB::TensorShapeProto* StructuredValue::unsafe_arena_release_tensor_shape_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.tensor_shape_value)
  if (_internal_has_tensor_shape_value()) {
    clear_has_kind();
    ::DRPB::TensorShapeProto* temp = kind_.tensor_shape_value_;
    kind_.tensor_shape_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_tensor_shape_value(::DRPB::TensorShapeProto* tensor_shape_value) {
  clear_kind();
  if (tensor_shape_value) {
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = tensor_shape_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.tensor_shape_value)
}
inline ::DRPB::TensorShapeProto* StructuredValue::_internal_mutable_tensor_shape_value() {
  if (!_internal_has_tensor_shape_value()) {
    clear_kind();
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = CreateMaybeMessage< ::DRPB::TensorShapeProto >(GetArena());
  }
  return kind_.tensor_shape_value_;
}
inline ::DRPB::TensorShapeProto* StructuredValue::mutable_tensor_shape_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.tensor_shape_value)
  return _internal_mutable_tensor_shape_value();
}

// .DRPB.DataType tensor_dtype_value = 32;
inline bool StructuredValue::_internal_has_tensor_dtype_value() const {
  return kind_case() == kTensorDtypeValue;
}
inline bool StructuredValue::has_tensor_dtype_value() const {
  return _internal_has_tensor_dtype_value();
}
inline void StructuredValue::set_has_tensor_dtype_value() {
  _oneof_case_[0] = kTensorDtypeValue;
}
inline void StructuredValue::clear_tensor_dtype_value() {
  if (_internal_has_tensor_dtype_value()) {
    kind_.tensor_dtype_value_ = 0;
    clear_has_kind();
  }
}
inline ::DRPB::DataType StructuredValue::_internal_tensor_dtype_value() const {
  if (_internal_has_tensor_dtype_value()) {
    return static_cast< ::DRPB::DataType >(kind_.tensor_dtype_value_);
  }
  return static_cast< ::DRPB::DataType >(0);
}
inline ::DRPB::DataType StructuredValue::tensor_dtype_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.tensor_dtype_value)
  return _internal_tensor_dtype_value();
}
inline void StructuredValue::_internal_set_tensor_dtype_value(::DRPB::DataType value) {
  if (!_internal_has_tensor_dtype_value()) {
    clear_kind();
    set_has_tensor_dtype_value();
  }
  kind_.tensor_dtype_value_ = value;
}
inline void StructuredValue::set_tensor_dtype_value(::DRPB::DataType value) {
  // @@protoc_insertion_point(field_set:DRPB.StructuredValue.tensor_dtype_value)
  _internal_set_tensor_dtype_value(value);
}

// .DRPB.TensorSpecProto tensor_spec_value = 33;
inline bool StructuredValue::_internal_has_tensor_spec_value() const {
  return kind_case() == kTensorSpecValue;
}
inline bool StructuredValue::has_tensor_spec_value() const {
  return _internal_has_tensor_spec_value();
}
inline void StructuredValue::set_has_tensor_spec_value() {
  _oneof_case_[0] = kTensorSpecValue;
}
inline void StructuredValue::clear_tensor_spec_value() {
  if (_internal_has_tensor_spec_value()) {
    if (GetArena() == nullptr) {
      delete kind_.tensor_spec_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::TensorSpecProto* StructuredValue::release_tensor_spec_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.tensor_spec_value)
  if (_internal_has_tensor_spec_value()) {
    clear_has_kind();
      ::DRPB::TensorSpecProto* temp = kind_.tensor_spec_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.tensor_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::TensorSpecProto& StructuredValue::_internal_tensor_spec_value() const {
  return _internal_has_tensor_spec_value()
      ? *kind_.tensor_spec_value_
      : reinterpret_cast< ::DRPB::TensorSpecProto&>(::DRPB::_TensorSpecProto_default_instance_);
}
inline const ::DRPB::TensorSpecProto& StructuredValue::tensor_spec_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.tensor_spec_value)
  return _internal_tensor_spec_value();
}
inline ::DRPB::TensorSpecProto* StructuredValue::unsafe_arena_release_tensor_spec_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.tensor_spec_value)
  if (_internal_has_tensor_spec_value()) {
    clear_has_kind();
    ::DRPB::TensorSpecProto* temp = kind_.tensor_spec_value_;
    kind_.tensor_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_tensor_spec_value(::DRPB::TensorSpecProto* tensor_spec_value) {
  clear_kind();
  if (tensor_spec_value) {
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = tensor_spec_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.tensor_spec_value)
}
inline ::DRPB::TensorSpecProto* StructuredValue::_internal_mutable_tensor_spec_value() {
  if (!_internal_has_tensor_spec_value()) {
    clear_kind();
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = CreateMaybeMessage< ::DRPB::TensorSpecProto >(GetArena());
  }
  return kind_.tensor_spec_value_;
}
inline ::DRPB::TensorSpecProto* StructuredValue::mutable_tensor_spec_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.tensor_spec_value)
  return _internal_mutable_tensor_spec_value();
}

// .DRPB.TypeSpecProto type_spec_value = 34;
inline bool StructuredValue::_internal_has_type_spec_value() const {
  return kind_case() == kTypeSpecValue;
}
inline bool StructuredValue::has_type_spec_value() const {
  return _internal_has_type_spec_value();
}
inline void StructuredValue::set_has_type_spec_value() {
  _oneof_case_[0] = kTypeSpecValue;
}
inline void StructuredValue::clear_type_spec_value() {
  if (_internal_has_type_spec_value()) {
    if (GetArena() == nullptr) {
      delete kind_.type_spec_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::TypeSpecProto* StructuredValue::release_type_spec_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.type_spec_value)
  if (_internal_has_type_spec_value()) {
    clear_has_kind();
      ::DRPB::TypeSpecProto* temp = kind_.type_spec_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.type_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::TypeSpecProto& StructuredValue::_internal_type_spec_value() const {
  return _internal_has_type_spec_value()
      ? *kind_.type_spec_value_
      : reinterpret_cast< ::DRPB::TypeSpecProto&>(::DRPB::_TypeSpecProto_default_instance_);
}
inline const ::DRPB::TypeSpecProto& StructuredValue::type_spec_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.type_spec_value)
  return _internal_type_spec_value();
}
inline ::DRPB::TypeSpecProto* StructuredValue::unsafe_arena_release_type_spec_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.type_spec_value)
  if (_internal_has_type_spec_value()) {
    clear_has_kind();
    ::DRPB::TypeSpecProto* temp = kind_.type_spec_value_;
    kind_.type_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_type_spec_value(::DRPB::TypeSpecProto* type_spec_value) {
  clear_kind();
  if (type_spec_value) {
    set_has_type_spec_value();
    kind_.type_spec_value_ = type_spec_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.type_spec_value)
}
inline ::DRPB::TypeSpecProto* StructuredValue::_internal_mutable_type_spec_value() {
  if (!_internal_has_type_spec_value()) {
    clear_kind();
    set_has_type_spec_value();
    kind_.type_spec_value_ = CreateMaybeMessage< ::DRPB::TypeSpecProto >(GetArena());
  }
  return kind_.type_spec_value_;
}
inline ::DRPB::TypeSpecProto* StructuredValue::mutable_type_spec_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.type_spec_value)
  return _internal_mutable_type_spec_value();
}

// .DRPB.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
inline bool StructuredValue::_internal_has_bounded_tensor_spec_value() const {
  return kind_case() == kBoundedTensorSpecValue;
}
inline bool StructuredValue::has_bounded_tensor_spec_value() const {
  return _internal_has_bounded_tensor_spec_value();
}
inline void StructuredValue::set_has_bounded_tensor_spec_value() {
  _oneof_case_[0] = kBoundedTensorSpecValue;
}
inline void StructuredValue::clear_bounded_tensor_spec_value() {
  if (_internal_has_bounded_tensor_spec_value()) {
    if (GetArena() == nullptr) {
      delete kind_.bounded_tensor_spec_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::BoundedTensorSpecProto* StructuredValue::release_bounded_tensor_spec_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.bounded_tensor_spec_value)
  if (_internal_has_bounded_tensor_spec_value()) {
    clear_has_kind();
      ::DRPB::BoundedTensorSpecProto* temp = kind_.bounded_tensor_spec_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.bounded_tensor_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::BoundedTensorSpecProto& StructuredValue::_internal_bounded_tensor_spec_value() const {
  return _internal_has_bounded_tensor_spec_value()
      ? *kind_.bounded_tensor_spec_value_
      : reinterpret_cast< ::DRPB::BoundedTensorSpecProto&>(::DRPB::_BoundedTensorSpecProto_default_instance_);
}
inline const ::DRPB::BoundedTensorSpecProto& StructuredValue::bounded_tensor_spec_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.bounded_tensor_spec_value)
  return _internal_bounded_tensor_spec_value();
}
inline ::DRPB::BoundedTensorSpecProto* StructuredValue::unsafe_arena_release_bounded_tensor_spec_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.bounded_tensor_spec_value)
  if (_internal_has_bounded_tensor_spec_value()) {
    clear_has_kind();
    ::DRPB::BoundedTensorSpecProto* temp = kind_.bounded_tensor_spec_value_;
    kind_.bounded_tensor_spec_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_bounded_tensor_spec_value(::DRPB::BoundedTensorSpecProto* bounded_tensor_spec_value) {
  clear_kind();
  if (bounded_tensor_spec_value) {
    set_has_bounded_tensor_spec_value();
    kind_.bounded_tensor_spec_value_ = bounded_tensor_spec_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.bounded_tensor_spec_value)
}
inline ::DRPB::BoundedTensorSpecProto* StructuredValue::_internal_mutable_bounded_tensor_spec_value() {
  if (!_internal_has_bounded_tensor_spec_value()) {
    clear_kind();
    set_has_bounded_tensor_spec_value();
    kind_.bounded_tensor_spec_value_ = CreateMaybeMessage< ::DRPB::BoundedTensorSpecProto >(GetArena());
  }
  return kind_.bounded_tensor_spec_value_;
}
inline ::DRPB::BoundedTensorSpecProto* StructuredValue::mutable_bounded_tensor_spec_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.bounded_tensor_spec_value)
  return _internal_mutable_bounded_tensor_spec_value();
}

// .DRPB.ListValue list_value = 51;
inline bool StructuredValue::_internal_has_list_value() const {
  return kind_case() == kListValue;
}
inline bool StructuredValue::has_list_value() const {
  return _internal_has_list_value();
}
inline void StructuredValue::set_has_list_value() {
  _oneof_case_[0] = kListValue;
}
inline void StructuredValue::clear_list_value() {
  if (_internal_has_list_value()) {
    if (GetArena() == nullptr) {
      delete kind_.list_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::ListValue* StructuredValue::release_list_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.list_value)
  if (_internal_has_list_value()) {
    clear_has_kind();
      ::DRPB::ListValue* temp = kind_.list_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::ListValue& StructuredValue::_internal_list_value() const {
  return _internal_has_list_value()
      ? *kind_.list_value_
      : reinterpret_cast< ::DRPB::ListValue&>(::DRPB::_ListValue_default_instance_);
}
inline const ::DRPB::ListValue& StructuredValue::list_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.list_value)
  return _internal_list_value();
}
inline ::DRPB::ListValue* StructuredValue::unsafe_arena_release_list_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.list_value)
  if (_internal_has_list_value()) {
    clear_has_kind();
    ::DRPB::ListValue* temp = kind_.list_value_;
    kind_.list_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_list_value(::DRPB::ListValue* list_value) {
  clear_kind();
  if (list_value) {
    set_has_list_value();
    kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.list_value)
}
inline ::DRPB::ListValue* StructuredValue::_internal_mutable_list_value() {
  if (!_internal_has_list_value()) {
    clear_kind();
    set_has_list_value();
    kind_.list_value_ = CreateMaybeMessage< ::DRPB::ListValue >(GetArena());
  }
  return kind_.list_value_;
}
inline ::DRPB::ListValue* StructuredValue::mutable_list_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.list_value)
  return _internal_mutable_list_value();
}

// .DRPB.TupleValue tuple_value = 52;
inline bool StructuredValue::_internal_has_tuple_value() const {
  return kind_case() == kTupleValue;
}
inline bool StructuredValue::has_tuple_value() const {
  return _internal_has_tuple_value();
}
inline void StructuredValue::set_has_tuple_value() {
  _oneof_case_[0] = kTupleValue;
}
inline void StructuredValue::clear_tuple_value() {
  if (_internal_has_tuple_value()) {
    if (GetArena() == nullptr) {
      delete kind_.tuple_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::TupleValue* StructuredValue::release_tuple_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.tuple_value)
  if (_internal_has_tuple_value()) {
    clear_has_kind();
      ::DRPB::TupleValue* temp = kind_.tuple_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.tuple_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::TupleValue& StructuredValue::_internal_tuple_value() const {
  return _internal_has_tuple_value()
      ? *kind_.tuple_value_
      : reinterpret_cast< ::DRPB::TupleValue&>(::DRPB::_TupleValue_default_instance_);
}
inline const ::DRPB::TupleValue& StructuredValue::tuple_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.tuple_value)
  return _internal_tuple_value();
}
inline ::DRPB::TupleValue* StructuredValue::unsafe_arena_release_tuple_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.tuple_value)
  if (_internal_has_tuple_value()) {
    clear_has_kind();
    ::DRPB::TupleValue* temp = kind_.tuple_value_;
    kind_.tuple_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_tuple_value(::DRPB::TupleValue* tuple_value) {
  clear_kind();
  if (tuple_value) {
    set_has_tuple_value();
    kind_.tuple_value_ = tuple_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.tuple_value)
}
inline ::DRPB::TupleValue* StructuredValue::_internal_mutable_tuple_value() {
  if (!_internal_has_tuple_value()) {
    clear_kind();
    set_has_tuple_value();
    kind_.tuple_value_ = CreateMaybeMessage< ::DRPB::TupleValue >(GetArena());
  }
  return kind_.tuple_value_;
}
inline ::DRPB::TupleValue* StructuredValue::mutable_tuple_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.tuple_value)
  return _internal_mutable_tuple_value();
}

// .DRPB.DictValue dict_value = 53;
inline bool StructuredValue::_internal_has_dict_value() const {
  return kind_case() == kDictValue;
}
inline bool StructuredValue::has_dict_value() const {
  return _internal_has_dict_value();
}
inline void StructuredValue::set_has_dict_value() {
  _oneof_case_[0] = kDictValue;
}
inline void StructuredValue::clear_dict_value() {
  if (_internal_has_dict_value()) {
    if (GetArena() == nullptr) {
      delete kind_.dict_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::DictValue* StructuredValue::release_dict_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.dict_value)
  if (_internal_has_dict_value()) {
    clear_has_kind();
      ::DRPB::DictValue* temp = kind_.dict_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.dict_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::DictValue& StructuredValue::_internal_dict_value() const {
  return _internal_has_dict_value()
      ? *kind_.dict_value_
      : reinterpret_cast< ::DRPB::DictValue&>(::DRPB::_DictValue_default_instance_);
}
inline const ::DRPB::DictValue& StructuredValue::dict_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.dict_value)
  return _internal_dict_value();
}
inline ::DRPB::DictValue* StructuredValue::unsafe_arena_release_dict_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.dict_value)
  if (_internal_has_dict_value()) {
    clear_has_kind();
    ::DRPB::DictValue* temp = kind_.dict_value_;
    kind_.dict_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_dict_value(::DRPB::DictValue* dict_value) {
  clear_kind();
  if (dict_value) {
    set_has_dict_value();
    kind_.dict_value_ = dict_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.dict_value)
}
inline ::DRPB::DictValue* StructuredValue::_internal_mutable_dict_value() {
  if (!_internal_has_dict_value()) {
    clear_kind();
    set_has_dict_value();
    kind_.dict_value_ = CreateMaybeMessage< ::DRPB::DictValue >(GetArena());
  }
  return kind_.dict_value_;
}
inline ::DRPB::DictValue* StructuredValue::mutable_dict_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.dict_value)
  return _internal_mutable_dict_value();
}

// .DRPB.NamedTupleValue named_tuple_value = 54;
inline bool StructuredValue::_internal_has_named_tuple_value() const {
  return kind_case() == kNamedTupleValue;
}
inline bool StructuredValue::has_named_tuple_value() const {
  return _internal_has_named_tuple_value();
}
inline void StructuredValue::set_has_named_tuple_value() {
  _oneof_case_[0] = kNamedTupleValue;
}
inline void StructuredValue::clear_named_tuple_value() {
  if (_internal_has_named_tuple_value()) {
    if (GetArena() == nullptr) {
      delete kind_.named_tuple_value_;
    }
    clear_has_kind();
  }
}
inline ::DRPB::NamedTupleValue* StructuredValue::release_named_tuple_value() {
  // @@protoc_insertion_point(field_release:DRPB.StructuredValue.named_tuple_value)
  if (_internal_has_named_tuple_value()) {
    clear_has_kind();
      ::DRPB::NamedTupleValue* temp = kind_.named_tuple_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.named_tuple_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::NamedTupleValue& StructuredValue::_internal_named_tuple_value() const {
  return _internal_has_named_tuple_value()
      ? *kind_.named_tuple_value_
      : reinterpret_cast< ::DRPB::NamedTupleValue&>(::DRPB::_NamedTupleValue_default_instance_);
}
inline const ::DRPB::NamedTupleValue& StructuredValue::named_tuple_value() const {
  // @@protoc_insertion_point(field_get:DRPB.StructuredValue.named_tuple_value)
  return _internal_named_tuple_value();
}
inline ::DRPB::NamedTupleValue* StructuredValue::unsafe_arena_release_named_tuple_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.StructuredValue.named_tuple_value)
  if (_internal_has_named_tuple_value()) {
    clear_has_kind();
    ::DRPB::NamedTupleValue* temp = kind_.named_tuple_value_;
    kind_.named_tuple_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void StructuredValue::unsafe_arena_set_allocated_named_tuple_value(::DRPB::NamedTupleValue* named_tuple_value) {
  clear_kind();
  if (named_tuple_value) {
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = named_tuple_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.StructuredValue.named_tuple_value)
}
inline ::DRPB::NamedTupleValue* StructuredValue::_internal_mutable_named_tuple_value() {
  if (!_internal_has_named_tuple_value()) {
    clear_kind();
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = CreateMaybeMessage< ::DRPB::NamedTupleValue >(GetArena());
  }
  return kind_.named_tuple_value_;
}
inline ::DRPB::NamedTupleValue* StructuredValue::mutable_named_tuple_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.StructuredValue.named_tuple_value)
  return _internal_mutable_named_tuple_value();
}

inline bool StructuredValue::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void StructuredValue::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline StructuredValue::KindCase StructuredValue::kind_case() const {
  return StructuredValue::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// NoneValue

// -------------------------------------------------------------------

// ListValue

// repeated .DRPB.StructuredValue values = 1;
inline int ListValue::_internal_values_size() const {
  return values_.size();
}
inline int ListValue::values_size() const {
  return _internal_values_size();
}
inline void ListValue::clear_values() {
  values_.Clear();
}
inline ::DRPB::StructuredValue* ListValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.ListValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >*
ListValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.ListValue.values)
  return &values_;
}
inline const ::DRPB::StructuredValue& ListValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::DRPB::StructuredValue& ListValue::values(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.ListValue.values)
  return _internal_values(index);
}
inline ::DRPB::StructuredValue* ListValue::_internal_add_values() {
  return values_.Add();
}
inline ::DRPB::StructuredValue* ListValue::add_values() {
  // @@protoc_insertion_point(field_add:DRPB.ListValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >&
ListValue::values() const {
  // @@protoc_insertion_point(field_list:DRPB.ListValue.values)
  return values_;
}

// -------------------------------------------------------------------

// TupleValue

// repeated .DRPB.StructuredValue values = 1;
inline int TupleValue::_internal_values_size() const {
  return values_.size();
}
inline int TupleValue::values_size() const {
  return _internal_values_size();
}
inline void TupleValue::clear_values() {
  values_.Clear();
}
inline ::DRPB::StructuredValue* TupleValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.TupleValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >*
TupleValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.TupleValue.values)
  return &values_;
}
inline const ::DRPB::StructuredValue& TupleValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::DRPB::StructuredValue& TupleValue::values(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.TupleValue.values)
  return _internal_values(index);
}
inline ::DRPB::StructuredValue* TupleValue::_internal_add_values() {
  return values_.Add();
}
inline ::DRPB::StructuredValue* TupleValue::add_values() {
  // @@protoc_insertion_point(field_add:DRPB.TupleValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::StructuredValue >&
TupleValue::values() const {
  // @@protoc_insertion_point(field_list:DRPB.TupleValue.values)
  return values_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// DictValue

// map<string, .DRPB.StructuredValue> fields = 1;
inline int DictValue::_internal_fields_size() const {
  return fields_.size();
}
inline int DictValue::fields_size() const {
  return _internal_fields_size();
}
inline void DictValue::clear_fields() {
  fields_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >&
DictValue::_internal_fields() const {
  return fields_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >&
DictValue::fields() const {
  // @@protoc_insertion_point(field_map:DRPB.DictValue.fields)
  return _internal_fields();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >*
DictValue::_internal_mutable_fields() {
  return fields_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >*
DictValue::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_map:DRPB.DictValue.fields)
  return _internal_mutable_fields();
}

// -------------------------------------------------------------------

// PairValue

// string key = 1;
inline void PairValue::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& PairValue::key() const {
  // @@protoc_insertion_point(field_get:DRPB.PairValue.key)
  return _internal_key();
}
inline void PairValue::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:DRPB.PairValue.key)
}
inline std::string* PairValue::mutable_key() {
  // @@protoc_insertion_point(field_mutable:DRPB.PairValue.key)
  return _internal_mutable_key();
}
inline const std::string& PairValue::_internal_key() const {
  return key_.Get();
}
inline void PairValue::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PairValue::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.PairValue.key)
}
inline void PairValue::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.PairValue.key)
}
inline void PairValue::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.PairValue.key)
}
inline std::string* PairValue::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PairValue::release_key() {
  // @@protoc_insertion_point(field_release:DRPB.PairValue.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairValue::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.PairValue.key)
}

// .DRPB.StructuredValue value = 2;
inline bool PairValue::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool PairValue::has_value() const {
  return _internal_has_value();
}
inline void PairValue::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::DRPB::StructuredValue& PairValue::_internal_value() const {
  const ::DRPB::StructuredValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::StructuredValue&>(
      ::DRPB::_StructuredValue_default_instance_);
}
inline const ::DRPB::StructuredValue& PairValue::value() const {
  // @@protoc_insertion_point(field_get:DRPB.PairValue.value)
  return _internal_value();
}
inline void PairValue::unsafe_arena_set_allocated_value(
    ::DRPB::StructuredValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.PairValue.value)
}
inline ::DRPB::StructuredValue* PairValue::release_value() {
  
  ::DRPB::StructuredValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::StructuredValue* PairValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:DRPB.PairValue.value)
  
  ::DRPB::StructuredValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::DRPB::StructuredValue* PairValue::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::StructuredValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::DRPB::StructuredValue* PairValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:DRPB.PairValue.value)
  return _internal_mutable_value();
}
inline void PairValue::set_allocated_value(::DRPB::StructuredValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:DRPB.PairValue.value)
}

// -------------------------------------------------------------------

// NamedTupleValue

// string name = 1;
inline void NamedTupleValue::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& NamedTupleValue::name() const {
  // @@protoc_insertion_point(field_get:DRPB.NamedTupleValue.name)
  return _internal_name();
}
inline void NamedTupleValue::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.NamedTupleValue.name)
}
inline std::string* NamedTupleValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.NamedTupleValue.name)
  return _internal_mutable_name();
}
inline const std::string& NamedTupleValue::_internal_name() const {
  return name_.Get();
}
inline void NamedTupleValue::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NamedTupleValue::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.NamedTupleValue.name)
}
inline void NamedTupleValue::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.NamedTupleValue.name)
}
inline void NamedTupleValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.NamedTupleValue.name)
}
inline std::string* NamedTupleValue::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NamedTupleValue::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.NamedTupleValue.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NamedTupleValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.NamedTupleValue.name)
}

// repeated .DRPB.PairValue values = 2;
inline int NamedTupleValue::_internal_values_size() const {
  return values_.size();
}
inline int NamedTupleValue::values_size() const {
  return _internal_values_size();
}
inline void NamedTupleValue::clear_values() {
  values_.Clear();
}
inline ::DRPB::PairValue* NamedTupleValue::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:DRPB.NamedTupleValue.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::PairValue >*
NamedTupleValue::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DRPB.NamedTupleValue.values)
  return &values_;
}
inline const ::DRPB::PairValue& NamedTupleValue::_internal_values(int index) const {
  return values_.Get(index);
}
inline const ::DRPB::PairValue& NamedTupleValue::values(int index) const {
  // @@protoc_insertion_point(field_get:DRPB.NamedTupleValue.values)
  return _internal_values(index);
}
inline ::DRPB::PairValue* NamedTupleValue::_internal_add_values() {
  return values_.Add();
}
inline ::DRPB::PairValue* NamedTupleValue::add_values() {
  // @@protoc_insertion_point(field_add:DRPB.NamedTupleValue.values)
  return _internal_add_values();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DRPB::PairValue >&
NamedTupleValue::values() const {
  // @@protoc_insertion_point(field_list:DRPB.NamedTupleValue.values)
  return values_;
}

// -------------------------------------------------------------------

// TensorSpecProto

// string name = 1;
inline void TensorSpecProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TensorSpecProto::name() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorSpecProto.name)
  return _internal_name();
}
inline void TensorSpecProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorSpecProto.name)
}
inline std::string* TensorSpecProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorSpecProto.name)
  return _internal_mutable_name();
}
inline const std::string& TensorSpecProto::_internal_name() const {
  return name_.Get();
}
inline void TensorSpecProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TensorSpecProto::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.TensorSpecProto.name)
}
inline void TensorSpecProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.TensorSpecProto.name)
}
inline void TensorSpecProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.TensorSpecProto.name)
}
inline std::string* TensorSpecProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TensorSpecProto::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.TensorSpecProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorSpecProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.TensorSpecProto.name)
}

// .DRPB.TensorShapeProto shape = 2;
inline bool TensorSpecProto::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool TensorSpecProto::has_shape() const {
  return _internal_has_shape();
}
inline void TensorSpecProto::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::DRPB::TensorShapeProto& TensorSpecProto::_internal_shape() const {
  const ::DRPB::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorShapeProto&>(
      ::DRPB::_TensorShapeProto_default_instance_);
}
inline const ::DRPB::TensorShapeProto& TensorSpecProto::shape() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorSpecProto.shape)
  return _internal_shape();
}
inline void TensorSpecProto::unsafe_arena_set_allocated_shape(
    ::DRPB::TensorShapeProto* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TensorSpecProto.shape)
}
inline ::DRPB::TensorShapeProto* TensorSpecProto::release_shape() {
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorShapeProto* TensorSpecProto::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:DRPB.TensorSpecProto.shape)
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::DRPB::TensorShapeProto* TensorSpecProto::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorShapeProto>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::DRPB::TensorShapeProto* TensorSpecProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:DRPB.TensorSpecProto.shape)
  return _internal_mutable_shape();
}
inline void TensorSpecProto::set_allocated_shape(::DRPB::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TensorSpecProto.shape)
}

// .DRPB.DataType dtype = 3;
inline void TensorSpecProto::clear_dtype() {
  dtype_ = 0;
}
inline ::DRPB::DataType TensorSpecProto::_internal_dtype() const {
  return static_cast< ::DRPB::DataType >(dtype_);
}
inline ::DRPB::DataType TensorSpecProto::dtype() const {
  // @@protoc_insertion_point(field_get:DRPB.TensorSpecProto.dtype)
  return _internal_dtype();
}
inline void TensorSpecProto::_internal_set_dtype(::DRPB::DataType value) {
  
  dtype_ = value;
}
inline void TensorSpecProto::set_dtype(::DRPB::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:DRPB.TensorSpecProto.dtype)
}

// -------------------------------------------------------------------

// BoundedTensorSpecProto

// string name = 1;
inline void BoundedTensorSpecProto::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BoundedTensorSpecProto::name() const {
  // @@protoc_insertion_point(field_get:DRPB.BoundedTensorSpecProto.name)
  return _internal_name();
}
inline void BoundedTensorSpecProto::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:DRPB.BoundedTensorSpecProto.name)
}
inline std::string* BoundedTensorSpecProto::mutable_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.BoundedTensorSpecProto.name)
  return _internal_mutable_name();
}
inline const std::string& BoundedTensorSpecProto::_internal_name() const {
  return name_.Get();
}
inline void BoundedTensorSpecProto::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BoundedTensorSpecProto::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.BoundedTensorSpecProto.name)
}
inline void BoundedTensorSpecProto::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.BoundedTensorSpecProto.name)
}
inline void BoundedTensorSpecProto::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.BoundedTensorSpecProto.name)
}
inline std::string* BoundedTensorSpecProto::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BoundedTensorSpecProto::release_name() {
  // @@protoc_insertion_point(field_release:DRPB.BoundedTensorSpecProto.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BoundedTensorSpecProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.BoundedTensorSpecProto.name)
}

// .DRPB.TensorShapeProto shape = 2;
inline bool BoundedTensorSpecProto::_internal_has_shape() const {
  return this != internal_default_instance() && shape_ != nullptr;
}
inline bool BoundedTensorSpecProto::has_shape() const {
  return _internal_has_shape();
}
inline void BoundedTensorSpecProto::clear_shape() {
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
}
inline const ::DRPB::TensorShapeProto& BoundedTensorSpecProto::_internal_shape() const {
  const ::DRPB::TensorShapeProto* p = shape_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorShapeProto&>(
      ::DRPB::_TensorShapeProto_default_instance_);
}
inline const ::DRPB::TensorShapeProto& BoundedTensorSpecProto::shape() const {
  // @@protoc_insertion_point(field_get:DRPB.BoundedTensorSpecProto.shape)
  return _internal_shape();
}
inline void BoundedTensorSpecProto::unsafe_arena_set_allocated_shape(
    ::DRPB::TensorShapeProto* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.BoundedTensorSpecProto.shape)
}
inline ::DRPB::TensorShapeProto* BoundedTensorSpecProto::release_shape() {
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorShapeProto* BoundedTensorSpecProto::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:DRPB.BoundedTensorSpecProto.shape)
  
  ::DRPB::TensorShapeProto* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::DRPB::TensorShapeProto* BoundedTensorSpecProto::_internal_mutable_shape() {
  
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorShapeProto>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::DRPB::TensorShapeProto* BoundedTensorSpecProto::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:DRPB.BoundedTensorSpecProto.shape)
  return _internal_mutable_shape();
}
inline void BoundedTensorSpecProto::set_allocated_shape(::DRPB::TensorShapeProto* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    
  } else {
    
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:DRPB.BoundedTensorSpecProto.shape)
}

// .DRPB.DataType dtype = 3;
inline void BoundedTensorSpecProto::clear_dtype() {
  dtype_ = 0;
}
inline ::DRPB::DataType BoundedTensorSpecProto::_internal_dtype() const {
  return static_cast< ::DRPB::DataType >(dtype_);
}
inline ::DRPB::DataType BoundedTensorSpecProto::dtype() const {
  // @@protoc_insertion_point(field_get:DRPB.BoundedTensorSpecProto.dtype)
  return _internal_dtype();
}
inline void BoundedTensorSpecProto::_internal_set_dtype(::DRPB::DataType value) {
  
  dtype_ = value;
}
inline void BoundedTensorSpecProto::set_dtype(::DRPB::DataType value) {
  _internal_set_dtype(value);
  // @@protoc_insertion_point(field_set:DRPB.BoundedTensorSpecProto.dtype)
}

// .DRPB.TensorProto minimum = 4;
inline bool BoundedTensorSpecProto::_internal_has_minimum() const {
  return this != internal_default_instance() && minimum_ != nullptr;
}
inline bool BoundedTensorSpecProto::has_minimum() const {
  return _internal_has_minimum();
}
inline void BoundedTensorSpecProto::clear_minimum() {
  if (GetArena() == nullptr && minimum_ != nullptr) {
    delete minimum_;
  }
  minimum_ = nullptr;
}
inline const ::DRPB::TensorProto& BoundedTensorSpecProto::_internal_minimum() const {
  const ::DRPB::TensorProto* p = minimum_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorProto&>(
      ::DRPB::_TensorProto_default_instance_);
}
inline const ::DRPB::TensorProto& BoundedTensorSpecProto::minimum() const {
  // @@protoc_insertion_point(field_get:DRPB.BoundedTensorSpecProto.minimum)
  return _internal_minimum();
}
inline void BoundedTensorSpecProto::unsafe_arena_set_allocated_minimum(
    ::DRPB::TensorProto* minimum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minimum_);
  }
  minimum_ = minimum;
  if (minimum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.BoundedTensorSpecProto.minimum)
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::release_minimum() {
  
  ::DRPB::TensorProto* temp = minimum_;
  minimum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::unsafe_arena_release_minimum() {
  // @@protoc_insertion_point(field_release:DRPB.BoundedTensorSpecProto.minimum)
  
  ::DRPB::TensorProto* temp = minimum_;
  minimum_ = nullptr;
  return temp;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::_internal_mutable_minimum() {
  
  if (minimum_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorProto>(GetArena());
    minimum_ = p;
  }
  return minimum_;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::mutable_minimum() {
  // @@protoc_insertion_point(field_mutable:DRPB.BoundedTensorSpecProto.minimum)
  return _internal_mutable_minimum();
}
inline void BoundedTensorSpecProto::set_allocated_minimum(::DRPB::TensorProto* minimum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete minimum_;
  }
  if (minimum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(minimum);
    if (message_arena != submessage_arena) {
      minimum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minimum, submessage_arena);
    }
    
  } else {
    
  }
  minimum_ = minimum;
  // @@protoc_insertion_point(field_set_allocated:DRPB.BoundedTensorSpecProto.minimum)
}

// .DRPB.TensorProto maximum = 5;
inline bool BoundedTensorSpecProto::_internal_has_maximum() const {
  return this != internal_default_instance() && maximum_ != nullptr;
}
inline bool BoundedTensorSpecProto::has_maximum() const {
  return _internal_has_maximum();
}
inline void BoundedTensorSpecProto::clear_maximum() {
  if (GetArena() == nullptr && maximum_ != nullptr) {
    delete maximum_;
  }
  maximum_ = nullptr;
}
inline const ::DRPB::TensorProto& BoundedTensorSpecProto::_internal_maximum() const {
  const ::DRPB::TensorProto* p = maximum_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::TensorProto&>(
      ::DRPB::_TensorProto_default_instance_);
}
inline const ::DRPB::TensorProto& BoundedTensorSpecProto::maximum() const {
  // @@protoc_insertion_point(field_get:DRPB.BoundedTensorSpecProto.maximum)
  return _internal_maximum();
}
inline void BoundedTensorSpecProto::unsafe_arena_set_allocated_maximum(
    ::DRPB::TensorProto* maximum) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maximum_);
  }
  maximum_ = maximum;
  if (maximum) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.BoundedTensorSpecProto.maximum)
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::release_maximum() {
  
  ::DRPB::TensorProto* temp = maximum_;
  maximum_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::unsafe_arena_release_maximum() {
  // @@protoc_insertion_point(field_release:DRPB.BoundedTensorSpecProto.maximum)
  
  ::DRPB::TensorProto* temp = maximum_;
  maximum_ = nullptr;
  return temp;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::_internal_mutable_maximum() {
  
  if (maximum_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::TensorProto>(GetArena());
    maximum_ = p;
  }
  return maximum_;
}
inline ::DRPB::TensorProto* BoundedTensorSpecProto::mutable_maximum() {
  // @@protoc_insertion_point(field_mutable:DRPB.BoundedTensorSpecProto.maximum)
  return _internal_mutable_maximum();
}
inline void BoundedTensorSpecProto::set_allocated_maximum(::DRPB::TensorProto* maximum) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete maximum_;
  }
  if (maximum) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(maximum);
    if (message_arena != submessage_arena) {
      maximum = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maximum, submessage_arena);
    }
    
  } else {
    
  }
  maximum_ = maximum;
  // @@protoc_insertion_point(field_set_allocated:DRPB.BoundedTensorSpecProto.maximum)
}

// -------------------------------------------------------------------

// TypeSpecProto

// .DRPB.TypeSpecProto.TypeSpecClass type_spec_class = 1;
inline void TypeSpecProto::clear_type_spec_class() {
  type_spec_class_ = 0;
}
inline ::DRPB::TypeSpecProto_TypeSpecClass TypeSpecProto::_internal_type_spec_class() const {
  return static_cast< ::DRPB::TypeSpecProto_TypeSpecClass >(type_spec_class_);
}
inline ::DRPB::TypeSpecProto_TypeSpecClass TypeSpecProto::type_spec_class() const {
  // @@protoc_insertion_point(field_get:DRPB.TypeSpecProto.type_spec_class)
  return _internal_type_spec_class();
}
inline void TypeSpecProto::_internal_set_type_spec_class(::DRPB::TypeSpecProto_TypeSpecClass value) {
  
  type_spec_class_ = value;
}
inline void TypeSpecProto::set_type_spec_class(::DRPB::TypeSpecProto_TypeSpecClass value) {
  _internal_set_type_spec_class(value);
  // @@protoc_insertion_point(field_set:DRPB.TypeSpecProto.type_spec_class)
}

// .DRPB.StructuredValue type_state = 2;
inline bool TypeSpecProto::_internal_has_type_state() const {
  return this != internal_default_instance() && type_state_ != nullptr;
}
inline bool TypeSpecProto::has_type_state() const {
  return _internal_has_type_state();
}
inline void TypeSpecProto::clear_type_state() {
  if (GetArena() == nullptr && type_state_ != nullptr) {
    delete type_state_;
  }
  type_state_ = nullptr;
}
inline const ::DRPB::StructuredValue& TypeSpecProto::_internal_type_state() const {
  const ::DRPB::StructuredValue* p = type_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::StructuredValue&>(
      ::DRPB::_StructuredValue_default_instance_);
}
inline const ::DRPB::StructuredValue& TypeSpecProto::type_state() const {
  // @@protoc_insertion_point(field_get:DRPB.TypeSpecProto.type_state)
  return _internal_type_state();
}
inline void TypeSpecProto::unsafe_arena_set_allocated_type_state(
    ::DRPB::StructuredValue* type_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_state_);
  }
  type_state_ = type_state;
  if (type_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.TypeSpecProto.type_state)
}
inline ::DRPB::StructuredValue* TypeSpecProto::release_type_state() {
  
  ::DRPB::StructuredValue* temp = type_state_;
  type_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::StructuredValue* TypeSpecProto::unsafe_arena_release_type_state() {
  // @@protoc_insertion_point(field_release:DRPB.TypeSpecProto.type_state)
  
  ::DRPB::StructuredValue* temp = type_state_;
  type_state_ = nullptr;
  return temp;
}
inline ::DRPB::StructuredValue* TypeSpecProto::_internal_mutable_type_state() {
  
  if (type_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::StructuredValue>(GetArena());
    type_state_ = p;
  }
  return type_state_;
}
inline ::DRPB::StructuredValue* TypeSpecProto::mutable_type_state() {
  // @@protoc_insertion_point(field_mutable:DRPB.TypeSpecProto.type_state)
  return _internal_mutable_type_state();
}
inline void TypeSpecProto::set_allocated_type_state(::DRPB::StructuredValue* type_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_state_;
  }
  if (type_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type_state);
    if (message_arena != submessage_arena) {
      type_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_state, submessage_arena);
    }
    
  } else {
    
  }
  type_state_ = type_state;
  // @@protoc_insertion_point(field_set_allocated:DRPB.TypeSpecProto.type_state)
}

// string type_spec_class_name = 3;
inline void TypeSpecProto::clear_type_spec_class_name() {
  type_spec_class_name_.ClearToEmpty();
}
inline const std::string& TypeSpecProto::type_spec_class_name() const {
  // @@protoc_insertion_point(field_get:DRPB.TypeSpecProto.type_spec_class_name)
  return _internal_type_spec_class_name();
}
inline void TypeSpecProto::set_type_spec_class_name(const std::string& value) {
  _internal_set_type_spec_class_name(value);
  // @@protoc_insertion_point(field_set:DRPB.TypeSpecProto.type_spec_class_name)
}
inline std::string* TypeSpecProto::mutable_type_spec_class_name() {
  // @@protoc_insertion_point(field_mutable:DRPB.TypeSpecProto.type_spec_class_name)
  return _internal_mutable_type_spec_class_name();
}
inline const std::string& TypeSpecProto::_internal_type_spec_class_name() const {
  return type_spec_class_name_.Get();
}
inline void TypeSpecProto::_internal_set_type_spec_class_name(const std::string& value) {
  
  type_spec_class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TypeSpecProto::set_type_spec_class_name(std::string&& value) {
  
  type_spec_class_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DRPB.TypeSpecProto.type_spec_class_name)
}
inline void TypeSpecProto::set_type_spec_class_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_spec_class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DRPB.TypeSpecProto.type_spec_class_name)
}
inline void TypeSpecProto::set_type_spec_class_name(const char* value,
    size_t size) {
  
  type_spec_class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DRPB.TypeSpecProto.type_spec_class_name)
}
inline std::string* TypeSpecProto::_internal_mutable_type_spec_class_name() {
  
  return type_spec_class_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TypeSpecProto::release_type_spec_class_name() {
  // @@protoc_insertion_point(field_release:DRPB.TypeSpecProto.type_spec_class_name)
  return type_spec_class_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TypeSpecProto::set_allocated_type_spec_class_name(std::string* type_spec_class_name) {
  if (type_spec_class_name != nullptr) {
    
  } else {
    
  }
  type_spec_class_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_spec_class_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DRPB.TypeSpecProto.type_spec_class_name)
}

// -------------------------------------------------------------------

// RateLimiterCallStats

// int64 pending = 1;
inline void RateLimiterCallStats::clear_pending() {
  pending_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::_internal_pending() const {
  return pending_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::pending() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterCallStats.pending)
  return _internal_pending();
}
inline void RateLimiterCallStats::_internal_set_pending(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pending_ = value;
}
inline void RateLimiterCallStats::set_pending(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pending(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterCallStats.pending)
}

// int64 completed = 2;
inline void RateLimiterCallStats::clear_completed() {
  completed_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::_internal_completed() const {
  return completed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::completed() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterCallStats.completed)
  return _internal_completed();
}
inline void RateLimiterCallStats::_internal_set_completed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  completed_ = value;
}
inline void RateLimiterCallStats::set_completed(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterCallStats.completed)
}

// int64 limited = 3;
inline void RateLimiterCallStats::clear_limited() {
  limited_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::_internal_limited() const {
  return limited_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterCallStats::limited() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterCallStats.limited)
  return _internal_limited();
}
inline void RateLimiterCallStats::_internal_set_limited(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  limited_ = value;
}
inline void RateLimiterCallStats::set_limited(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_limited(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterCallStats.limited)
}

// .google.protobuf.Duration completed_wait_time = 4;
inline bool RateLimiterCallStats::_internal_has_completed_wait_time() const {
  return this != internal_default_instance() && completed_wait_time_ != nullptr;
}
inline bool RateLimiterCallStats::has_completed_wait_time() const {
  return _internal_has_completed_wait_time();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RateLimiterCallStats::_internal_completed_wait_time() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = completed_wait_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RateLimiterCallStats::completed_wait_time() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterCallStats.completed_wait_time)
  return _internal_completed_wait_time();
}
inline void RateLimiterCallStats::unsafe_arena_set_allocated_completed_wait_time(
    PROTOBUF_NAMESPACE_ID::Duration* completed_wait_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_wait_time_);
  }
  completed_wait_time_ = completed_wait_time;
  if (completed_wait_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.RateLimiterCallStats.completed_wait_time)
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::release_completed_wait_time() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = completed_wait_time_;
  completed_wait_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::unsafe_arena_release_completed_wait_time() {
  // @@protoc_insertion_point(field_release:DRPB.RateLimiterCallStats.completed_wait_time)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = completed_wait_time_;
  completed_wait_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::_internal_mutable_completed_wait_time() {
  
  if (completed_wait_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    completed_wait_time_ = p;
  }
  return completed_wait_time_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::mutable_completed_wait_time() {
  // @@protoc_insertion_point(field_mutable:DRPB.RateLimiterCallStats.completed_wait_time)
  return _internal_mutable_completed_wait_time();
}
inline void RateLimiterCallStats::set_allocated_completed_wait_time(PROTOBUF_NAMESPACE_ID::Duration* completed_wait_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_wait_time_);
  }
  if (completed_wait_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(completed_wait_time)->GetArena();
    if (message_arena != submessage_arena) {
      completed_wait_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, completed_wait_time, submessage_arena);
    }
    
  } else {
    
  }
  completed_wait_time_ = completed_wait_time;
  // @@protoc_insertion_point(field_set_allocated:DRPB.RateLimiterCallStats.completed_wait_time)
}

// .google.protobuf.Duration pending_wait_time = 5;
inline bool RateLimiterCallStats::_internal_has_pending_wait_time() const {
  return this != internal_default_instance() && pending_wait_time_ != nullptr;
}
inline bool RateLimiterCallStats::has_pending_wait_time() const {
  return _internal_has_pending_wait_time();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RateLimiterCallStats::_internal_pending_wait_time() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = pending_wait_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& RateLimiterCallStats::pending_wait_time() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterCallStats.pending_wait_time)
  return _internal_pending_wait_time();
}
inline void RateLimiterCallStats::unsafe_arena_set_allocated_pending_wait_time(
    PROTOBUF_NAMESPACE_ID::Duration* pending_wait_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_wait_time_);
  }
  pending_wait_time_ = pending_wait_time;
  if (pending_wait_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.RateLimiterCallStats.pending_wait_time)
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::release_pending_wait_time() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = pending_wait_time_;
  pending_wait_time_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::unsafe_arena_release_pending_wait_time() {
  // @@protoc_insertion_point(field_release:DRPB.RateLimiterCallStats.pending_wait_time)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = pending_wait_time_;
  pending_wait_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::_internal_mutable_pending_wait_time() {
  
  if (pending_wait_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    pending_wait_time_ = p;
  }
  return pending_wait_time_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* RateLimiterCallStats::mutable_pending_wait_time() {
  // @@protoc_insertion_point(field_mutable:DRPB.RateLimiterCallStats.pending_wait_time)
  return _internal_mutable_pending_wait_time();
}
inline void RateLimiterCallStats::set_allocated_pending_wait_time(PROTOBUF_NAMESPACE_ID::Duration* pending_wait_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_wait_time_);
  }
  if (pending_wait_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pending_wait_time)->GetArena();
    if (message_arena != submessage_arena) {
      pending_wait_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pending_wait_time, submessage_arena);
    }
    
  } else {
    
  }
  pending_wait_time_ = pending_wait_time;
  // @@protoc_insertion_point(field_set_allocated:DRPB.RateLimiterCallStats.pending_wait_time)
}

// -------------------------------------------------------------------

// RateLimiterInfo

// double samples_per_insert = 1;
inline void RateLimiterInfo::clear_samples_per_insert() {
  samples_per_insert_ = 0;
}
inline double RateLimiterInfo::_internal_samples_per_insert() const {
  return samples_per_insert_;
}
inline double RateLimiterInfo::samples_per_insert() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.samples_per_insert)
  return _internal_samples_per_insert();
}
inline void RateLimiterInfo::_internal_set_samples_per_insert(double value) {
  
  samples_per_insert_ = value;
}
inline void RateLimiterInfo::set_samples_per_insert(double value) {
  _internal_set_samples_per_insert(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterInfo.samples_per_insert)
}

// double min_diff = 2;
inline void RateLimiterInfo::clear_min_diff() {
  min_diff_ = 0;
}
inline double RateLimiterInfo::_internal_min_diff() const {
  return min_diff_;
}
inline double RateLimiterInfo::min_diff() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.min_diff)
  return _internal_min_diff();
}
inline void RateLimiterInfo::_internal_set_min_diff(double value) {
  
  min_diff_ = value;
}
inline void RateLimiterInfo::set_min_diff(double value) {
  _internal_set_min_diff(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterInfo.min_diff)
}

// double max_diff = 3;
inline void RateLimiterInfo::clear_max_diff() {
  max_diff_ = 0;
}
inline double RateLimiterInfo::_internal_max_diff() const {
  return max_diff_;
}
inline double RateLimiterInfo::max_diff() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.max_diff)
  return _internal_max_diff();
}
inline void RateLimiterInfo::_internal_set_max_diff(double value) {
  
  max_diff_ = value;
}
inline void RateLimiterInfo::set_max_diff(double value) {
  _internal_set_max_diff(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterInfo.max_diff)
}

// int64 min_size_to_sample = 4;
inline void RateLimiterInfo::clear_min_size_to_sample() {
  min_size_to_sample_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterInfo::_internal_min_size_to_sample() const {
  return min_size_to_sample_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RateLimiterInfo::min_size_to_sample() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.min_size_to_sample)
  return _internal_min_size_to_sample();
}
inline void RateLimiterInfo::_internal_set_min_size_to_sample(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  min_size_to_sample_ = value;
}
inline void RateLimiterInfo::set_min_size_to_sample(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_min_size_to_sample(value);
  // @@protoc_insertion_point(field_set:DRPB.RateLimiterInfo.min_size_to_sample)
}

// .DRPB.RateLimiterCallStats insert_stats = 5;
inline bool RateLimiterInfo::_internal_has_insert_stats() const {
  return this != internal_default_instance() && insert_stats_ != nullptr;
}
inline bool RateLimiterInfo::has_insert_stats() const {
  return _internal_has_insert_stats();
}
inline void RateLimiterInfo::clear_insert_stats() {
  if (GetArena() == nullptr && insert_stats_ != nullptr) {
    delete insert_stats_;
  }
  insert_stats_ = nullptr;
}
inline const ::DRPB::RateLimiterCallStats& RateLimiterInfo::_internal_insert_stats() const {
  const ::DRPB::RateLimiterCallStats* p = insert_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::RateLimiterCallStats&>(
      ::DRPB::_RateLimiterCallStats_default_instance_);
}
inline const ::DRPB::RateLimiterCallStats& RateLimiterInfo::insert_stats() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.insert_stats)
  return _internal_insert_stats();
}
inline void RateLimiterInfo::unsafe_arena_set_allocated_insert_stats(
    ::DRPB::RateLimiterCallStats* insert_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(insert_stats_);
  }
  insert_stats_ = insert_stats;
  if (insert_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.RateLimiterInfo.insert_stats)
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::release_insert_stats() {
  
  ::DRPB::RateLimiterCallStats* temp = insert_stats_;
  insert_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::unsafe_arena_release_insert_stats() {
  // @@protoc_insertion_point(field_release:DRPB.RateLimiterInfo.insert_stats)
  
  ::DRPB::RateLimiterCallStats* temp = insert_stats_;
  insert_stats_ = nullptr;
  return temp;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::_internal_mutable_insert_stats() {
  
  if (insert_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::RateLimiterCallStats>(GetArena());
    insert_stats_ = p;
  }
  return insert_stats_;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::mutable_insert_stats() {
  // @@protoc_insertion_point(field_mutable:DRPB.RateLimiterInfo.insert_stats)
  return _internal_mutable_insert_stats();
}
inline void RateLimiterInfo::set_allocated_insert_stats(::DRPB::RateLimiterCallStats* insert_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete insert_stats_;
  }
  if (insert_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert_stats);
    if (message_arena != submessage_arena) {
      insert_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_stats, submessage_arena);
    }
    
  } else {
    
  }
  insert_stats_ = insert_stats;
  // @@protoc_insertion_point(field_set_allocated:DRPB.RateLimiterInfo.insert_stats)
}

// .DRPB.RateLimiterCallStats sample_stats = 6;
inline bool RateLimiterInfo::_internal_has_sample_stats() const {
  return this != internal_default_instance() && sample_stats_ != nullptr;
}
inline bool RateLimiterInfo::has_sample_stats() const {
  return _internal_has_sample_stats();
}
inline void RateLimiterInfo::clear_sample_stats() {
  if (GetArena() == nullptr && sample_stats_ != nullptr) {
    delete sample_stats_;
  }
  sample_stats_ = nullptr;
}
inline const ::DRPB::RateLimiterCallStats& RateLimiterInfo::_internal_sample_stats() const {
  const ::DRPB::RateLimiterCallStats* p = sample_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::DRPB::RateLimiterCallStats&>(
      ::DRPB::_RateLimiterCallStats_default_instance_);
}
inline const ::DRPB::RateLimiterCallStats& RateLimiterInfo::sample_stats() const {
  // @@protoc_insertion_point(field_get:DRPB.RateLimiterInfo.sample_stats)
  return _internal_sample_stats();
}
inline void RateLimiterInfo::unsafe_arena_set_allocated_sample_stats(
    ::DRPB::RateLimiterCallStats* sample_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sample_stats_);
  }
  sample_stats_ = sample_stats;
  if (sample_stats) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.RateLimiterInfo.sample_stats)
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::release_sample_stats() {
  
  ::DRPB::RateLimiterCallStats* temp = sample_stats_;
  sample_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::unsafe_arena_release_sample_stats() {
  // @@protoc_insertion_point(field_release:DRPB.RateLimiterInfo.sample_stats)
  
  ::DRPB::RateLimiterCallStats* temp = sample_stats_;
  sample_stats_ = nullptr;
  return temp;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::_internal_mutable_sample_stats() {
  
  if (sample_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::DRPB::RateLimiterCallStats>(GetArena());
    sample_stats_ = p;
  }
  return sample_stats_;
}
inline ::DRPB::RateLimiterCallStats* RateLimiterInfo::mutable_sample_stats() {
  // @@protoc_insertion_point(field_mutable:DRPB.RateLimiterInfo.sample_stats)
  return _internal_mutable_sample_stats();
}
inline void RateLimiterInfo::set_allocated_sample_stats(::DRPB::RateLimiterCallStats* sample_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete sample_stats_;
  }
  if (sample_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sample_stats);
    if (message_arena != submessage_arena) {
      sample_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sample_stats, submessage_arena);
    }
    
  } else {
    
  }
  sample_stats_ = sample_stats;
  // @@protoc_insertion_point(field_set_allocated:DRPB.RateLimiterInfo.sample_stats)
}

// -------------------------------------------------------------------

// KeyDistributionOptions_Prioritized

// double priority_exponent = 1;
inline void KeyDistributionOptions_Prioritized::clear_priority_exponent() {
  priority_exponent_ = 0;
}
inline double KeyDistributionOptions_Prioritized::_internal_priority_exponent() const {
  return priority_exponent_;
}
inline double KeyDistributionOptions_Prioritized::priority_exponent() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.Prioritized.priority_exponent)
  return _internal_priority_exponent();
}
inline void KeyDistributionOptions_Prioritized::_internal_set_priority_exponent(double value) {
  
  priority_exponent_ = value;
}
inline void KeyDistributionOptions_Prioritized::set_priority_exponent(double value) {
  _internal_set_priority_exponent(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.Prioritized.priority_exponent)
}

// -------------------------------------------------------------------

// KeyDistributionOptions_Heap

// bool min_heap = 1;
inline void KeyDistributionOptions_Heap::clear_min_heap() {
  min_heap_ = false;
}
inline bool KeyDistributionOptions_Heap::_internal_min_heap() const {
  return min_heap_;
}
inline bool KeyDistributionOptions_Heap::min_heap() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.Heap.min_heap)
  return _internal_min_heap();
}
inline void KeyDistributionOptions_Heap::_internal_set_min_heap(bool value) {
  
  min_heap_ = value;
}
inline void KeyDistributionOptions_Heap::set_min_heap(bool value) {
  _internal_set_min_heap(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.Heap.min_heap)
}

// -------------------------------------------------------------------

// KeyDistributionOptions

// bool fifo = 1;
inline bool KeyDistributionOptions::_internal_has_fifo() const {
  return distribution_case() == kFifo;
}
inline bool KeyDistributionOptions::has_fifo() const {
  return _internal_has_fifo();
}
inline void KeyDistributionOptions::set_has_fifo() {
  _oneof_case_[0] = kFifo;
}
inline void KeyDistributionOptions::clear_fifo() {
  if (_internal_has_fifo()) {
    distribution_.fifo_ = false;
    clear_has_distribution();
  }
}
inline bool KeyDistributionOptions::_internal_fifo() const {
  if (_internal_has_fifo()) {
    return distribution_.fifo_;
  }
  return false;
}
inline void KeyDistributionOptions::_internal_set_fifo(bool value) {
  if (!_internal_has_fifo()) {
    clear_distribution();
    set_has_fifo();
  }
  distribution_.fifo_ = value;
}
inline bool KeyDistributionOptions::fifo() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.fifo)
  return _internal_fifo();
}
inline void KeyDistributionOptions::set_fifo(bool value) {
  _internal_set_fifo(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.fifo)
}

// bool uniform = 2;
inline bool KeyDistributionOptions::_internal_has_uniform() const {
  return distribution_case() == kUniform;
}
inline bool KeyDistributionOptions::has_uniform() const {
  return _internal_has_uniform();
}
inline void KeyDistributionOptions::set_has_uniform() {
  _oneof_case_[0] = kUniform;
}
inline void KeyDistributionOptions::clear_uniform() {
  if (_internal_has_uniform()) {
    distribution_.uniform_ = false;
    clear_has_distribution();
  }
}
inline bool KeyDistributionOptions::_internal_uniform() const {
  if (_internal_has_uniform()) {
    return distribution_.uniform_;
  }
  return false;
}
inline void KeyDistributionOptions::_internal_set_uniform(bool value) {
  if (!_internal_has_uniform()) {
    clear_distribution();
    set_has_uniform();
  }
  distribution_.uniform_ = value;
}
inline bool KeyDistributionOptions::uniform() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.uniform)
  return _internal_uniform();
}
inline void KeyDistributionOptions::set_uniform(bool value) {
  _internal_set_uniform(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.uniform)
}

// .DRPB.KeyDistributionOptions.Prioritized prioritized = 3;
inline bool KeyDistributionOptions::_internal_has_prioritized() const {
  return distribution_case() == kPrioritized;
}
inline bool KeyDistributionOptions::has_prioritized() const {
  return _internal_has_prioritized();
}
inline void KeyDistributionOptions::set_has_prioritized() {
  _oneof_case_[0] = kPrioritized;
}
inline void KeyDistributionOptions::clear_prioritized() {
  if (_internal_has_prioritized()) {
    if (GetArena() == nullptr) {
      delete distribution_.prioritized_;
    }
    clear_has_distribution();
  }
}
inline ::DRPB::KeyDistributionOptions_Prioritized* KeyDistributionOptions::release_prioritized() {
  // @@protoc_insertion_point(field_release:DRPB.KeyDistributionOptions.prioritized)
  if (_internal_has_prioritized()) {
    clear_has_distribution();
      ::DRPB::KeyDistributionOptions_Prioritized* temp = distribution_.prioritized_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    distribution_.prioritized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::KeyDistributionOptions_Prioritized& KeyDistributionOptions::_internal_prioritized() const {
  return _internal_has_prioritized()
      ? *distribution_.prioritized_
      : reinterpret_cast< ::DRPB::KeyDistributionOptions_Prioritized&>(::DRPB::_KeyDistributionOptions_Prioritized_default_instance_);
}
inline const ::DRPB::KeyDistributionOptions_Prioritized& KeyDistributionOptions::prioritized() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.prioritized)
  return _internal_prioritized();
}
inline ::DRPB::KeyDistributionOptions_Prioritized* KeyDistributionOptions::unsafe_arena_release_prioritized() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.KeyDistributionOptions.prioritized)
  if (_internal_has_prioritized()) {
    clear_has_distribution();
    ::DRPB::KeyDistributionOptions_Prioritized* temp = distribution_.prioritized_;
    distribution_.prioritized_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KeyDistributionOptions::unsafe_arena_set_allocated_prioritized(::DRPB::KeyDistributionOptions_Prioritized* prioritized) {
  clear_distribution();
  if (prioritized) {
    set_has_prioritized();
    distribution_.prioritized_ = prioritized;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.KeyDistributionOptions.prioritized)
}
inline ::DRPB::KeyDistributionOptions_Prioritized* KeyDistributionOptions::_internal_mutable_prioritized() {
  if (!_internal_has_prioritized()) {
    clear_distribution();
    set_has_prioritized();
    distribution_.prioritized_ = CreateMaybeMessage< ::DRPB::KeyDistributionOptions_Prioritized >(GetArena());
  }
  return distribution_.prioritized_;
}
inline ::DRPB::KeyDistributionOptions_Prioritized* KeyDistributionOptions::mutable_prioritized() {
  // @@protoc_insertion_point(field_mutable:DRPB.KeyDistributionOptions.prioritized)
  return _internal_mutable_prioritized();
}

// .DRPB.KeyDistributionOptions.Heap heap = 4;
inline bool KeyDistributionOptions::_internal_has_heap() const {
  return distribution_case() == kHeap;
}
inline bool KeyDistributionOptions::has_heap() const {
  return _internal_has_heap();
}
inline void KeyDistributionOptions::set_has_heap() {
  _oneof_case_[0] = kHeap;
}
inline void KeyDistributionOptions::clear_heap() {
  if (_internal_has_heap()) {
    if (GetArena() == nullptr) {
      delete distribution_.heap_;
    }
    clear_has_distribution();
  }
}
inline ::DRPB::KeyDistributionOptions_Heap* KeyDistributionOptions::release_heap() {
  // @@protoc_insertion_point(field_release:DRPB.KeyDistributionOptions.heap)
  if (_internal_has_heap()) {
    clear_has_distribution();
      ::DRPB::KeyDistributionOptions_Heap* temp = distribution_.heap_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    distribution_.heap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DRPB::KeyDistributionOptions_Heap& KeyDistributionOptions::_internal_heap() const {
  return _internal_has_heap()
      ? *distribution_.heap_
      : reinterpret_cast< ::DRPB::KeyDistributionOptions_Heap&>(::DRPB::_KeyDistributionOptions_Heap_default_instance_);
}
inline const ::DRPB::KeyDistributionOptions_Heap& KeyDistributionOptions::heap() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.heap)
  return _internal_heap();
}
inline ::DRPB::KeyDistributionOptions_Heap* KeyDistributionOptions::unsafe_arena_release_heap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DRPB.KeyDistributionOptions.heap)
  if (_internal_has_heap()) {
    clear_has_distribution();
    ::DRPB::KeyDistributionOptions_Heap* temp = distribution_.heap_;
    distribution_.heap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void KeyDistributionOptions::unsafe_arena_set_allocated_heap(::DRPB::KeyDistributionOptions_Heap* heap) {
  clear_distribution();
  if (heap) {
    set_has_heap();
    distribution_.heap_ = heap;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DRPB.KeyDistributionOptions.heap)
}
inline ::DRPB::KeyDistributionOptions_Heap* KeyDistributionOptions::_internal_mutable_heap() {
  if (!_internal_has_heap()) {
    clear_distribution();
    set_has_heap();
    distribution_.heap_ = CreateMaybeMessage< ::DRPB::KeyDistributionOptions_Heap >(GetArena());
  }
  return distribution_.heap_;
}
inline ::DRPB::KeyDistributionOptions_Heap* KeyDistributionOptions::mutable_heap() {
  // @@protoc_insertion_point(field_mutable:DRPB.KeyDistributionOptions.heap)
  return _internal_mutable_heap();
}

// bool lifo = 6;
inline bool KeyDistributionOptions::_internal_has_lifo() const {
  return distribution_case() == kLifo;
}
inline bool KeyDistributionOptions::has_lifo() const {
  return _internal_has_lifo();
}
inline void KeyDistributionOptions::set_has_lifo() {
  _oneof_case_[0] = kLifo;
}
inline void KeyDistributionOptions::clear_lifo() {
  if (_internal_has_lifo()) {
    distribution_.lifo_ = false;
    clear_has_distribution();
  }
}
inline bool KeyDistributionOptions::_internal_lifo() const {
  if (_internal_has_lifo()) {
    return distribution_.lifo_;
  }
  return false;
}
inline void KeyDistributionOptions::_internal_set_lifo(bool value) {
  if (!_internal_has_lifo()) {
    clear_distribution();
    set_has_lifo();
  }
  distribution_.lifo_ = value;
}
inline bool KeyDistributionOptions::lifo() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.lifo)
  return _internal_lifo();
}
inline void KeyDistributionOptions::set_lifo(bool value) {
  _internal_set_lifo(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.lifo)
}

// bool is_deterministic = 7;
inline void KeyDistributionOptions::clear_is_deterministic() {
  is_deterministic_ = false;
}
inline bool KeyDistributionOptions::_internal_is_deterministic() const {
  return is_deterministic_;
}
inline bool KeyDistributionOptions::is_deterministic() const {
  // @@protoc_insertion_point(field_get:DRPB.KeyDistributionOptions.is_deterministic)
  return _internal_is_deterministic();
}
inline void KeyDistributionOptions::_internal_set_is_deterministic(bool value) {
  
  is_deterministic_ = value;
}
inline void KeyDistributionOptions::set_is_deterministic(bool value) {
  _internal_set_is_deterministic(value);
  // @@protoc_insertion_point(field_set:DRPB.KeyDistributionOptions.is_deterministic)
}

inline bool KeyDistributionOptions::has_distribution() const {
  return distribution_case() != DISTRIBUTION_NOT_SET;
}
inline void KeyDistributionOptions::clear_has_distribution() {
  _oneof_case_[0] = DISTRIBUTION_NOT_SET;
}
inline KeyDistributionOptions::DistributionCase KeyDistributionOptions::distribution_case() const {
  return KeyDistributionOptions::DistributionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Uint128

// uint64 high = 1;
inline void Uint128::clear_high() {
  high_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::_internal_high() const {
  return high_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::high() const {
  // @@protoc_insertion_point(field_get:DRPB.Uint128.high)
  return _internal_high();
}
inline void Uint128::_internal_set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  high_ = value;
}
inline void Uint128::set_high(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:DRPB.Uint128.high)
}

// uint64 low = 2;
inline void Uint128::clear_low() {
  low_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::_internal_low() const {
  return low_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Uint128::low() const {
  // @@protoc_insertion_point(field_get:DRPB.Uint128.low)
  return _internal_low();
}
inline void Uint128::_internal_set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  low_ = value;
}
inline void Uint128::set_low(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:DRPB.Uint128.low)
}

// -------------------------------------------------------------------

// Timeout

// int64 milliseconds = 1;
inline void Timeout::clear_milliseconds() {
  milliseconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timeout::_internal_milliseconds() const {
  return milliseconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timeout::milliseconds() const {
  // @@protoc_insertion_point(field_get:DRPB.Timeout.milliseconds)
  return _internal_milliseconds();
}
inline void Timeout::_internal_set_milliseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  milliseconds_ = value;
}
inline void Timeout::set_milliseconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_milliseconds(value);
  // @@protoc_insertion_point(field_set:DRPB.Timeout.milliseconds)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DRPB

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DRPB::TypeSpecProto_TypeSpecClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DRPB::TypeSpecProto_TypeSpecClass>() {
  return ::DRPB::TypeSpecProto_TypeSpecClass_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schema_2eproto
