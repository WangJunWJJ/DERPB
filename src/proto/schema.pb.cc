// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace DRPB {
constexpr TensorProto::TensorProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : float_val_()
  , _float_val_cached_byte_size_()
  , double_val_()
  , _double_val_cached_byte_size_()
  , int_val_()
  , _int_val_cached_byte_size_()
  , string_val_()
  , scomplex_val_()
  , _scomplex_val_cached_byte_size_()
  , int64_val_()
  , _int64_val_cached_byte_size_()
  , bool_val_()
  , _bool_val_cached_byte_size_()
  , dcomplex_val_()
  , _dcomplex_val_cached_byte_size_()
  , half_val_()
  , _half_val_cached_byte_size_()
  , resource_handle_val_()
  , variant_val_()
  , uint32_val_()
  , _uint32_val_cached_byte_size_()
  , uint64_val_()
  , _uint64_val_cached_byte_size_()
  , tensor_content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tensor_shape_(nullptr)
  , dtype_(0)

  , version_number_(0){}
struct TensorProtoDefaultTypeInternal {
  constexpr TensorProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorProtoDefaultTypeInternal() {}
  union {
    TensorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorProtoDefaultTypeInternal _TensorProto_default_instance_;
constexpr VariantTensorDataProto::VariantTensorDataProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensors_()
  , type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VariantTensorDataProtoDefaultTypeInternal {
  constexpr VariantTensorDataProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VariantTensorDataProtoDefaultTypeInternal() {}
  union {
    VariantTensorDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VariantTensorDataProtoDefaultTypeInternal _VariantTensorDataProto_default_instance_;
constexpr TensorShapeProto_Dim::TensorShapeProto_Dim(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , size_(PROTOBUF_LONGLONG(0)){}
struct TensorShapeProto_DimDefaultTypeInternal {
  constexpr TensorShapeProto_DimDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorShapeProto_DimDefaultTypeInternal() {}
  union {
    TensorShapeProto_Dim _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorShapeProto_DimDefaultTypeInternal _TensorShapeProto_Dim_default_instance_;
constexpr TensorShapeProto::TensorShapeProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dim_()
  , unknown_rank_(false){}
struct TensorShapeProtoDefaultTypeInternal {
  constexpr TensorShapeProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorShapeProtoDefaultTypeInternal() {}
  union {
    TensorShapeProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;
constexpr ResourceHandleProto_DtypeAndShape::ResourceHandleProto_DtypeAndShape(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : shape_(nullptr)
  , dtype_(0)
{}
struct ResourceHandleProto_DtypeAndShapeDefaultTypeInternal {
  constexpr ResourceHandleProto_DtypeAndShapeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceHandleProto_DtypeAndShapeDefaultTypeInternal() {}
  union {
    ResourceHandleProto_DtypeAndShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceHandleProto_DtypeAndShapeDefaultTypeInternal _ResourceHandleProto_DtypeAndShape_default_instance_;
constexpr ResourceHandleProto::ResourceHandleProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dtypes_and_shapes_()
  , device_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , container_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , maybe_type_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_code_(PROTOBUF_ULONGLONG(0)){}
struct ResourceHandleProtoDefaultTypeInternal {
  constexpr ResourceHandleProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourceHandleProtoDefaultTypeInternal() {}
  union {
    ResourceHandleProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourceHandleProtoDefaultTypeInternal _ResourceHandleProto_default_instance_;
constexpr ChunkData_Data::ChunkData_Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tensors_(){}
struct ChunkData_DataDefaultTypeInternal {
  constexpr ChunkData_DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkData_DataDefaultTypeInternal() {}
  union {
    ChunkData_Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkData_DataDefaultTypeInternal _ChunkData_Data_default_instance_;
constexpr ChunkData::ChunkData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deprecated_data_()
  , sequence_range_(nullptr)
  , data_(nullptr)
  , chunk_key_(PROTOBUF_ULONGLONG(0))
  , delta_encoded_(false)
  , data_tensors_len_(0){}
struct ChunkDataDefaultTypeInternal {
  constexpr ChunkDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChunkDataDefaultTypeInternal() {}
  union {
    ChunkData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChunkDataDefaultTypeInternal _ChunkData_default_instance_;
constexpr SliceRange::SliceRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : offset_(0)
  , length_(0){}
struct SliceRangeDefaultTypeInternal {
  constexpr SliceRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceRangeDefaultTypeInternal() {}
  union {
    SliceRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceRangeDefaultTypeInternal _SliceRange_default_instance_;
constexpr SequenceRange::SequenceRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : episode_id_(PROTOBUF_ULONGLONG(0))
  , start_(0)
  , end_(0)
  , sparse_(false){}
struct SequenceRangeDefaultTypeInternal {
  constexpr SequenceRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SequenceRangeDefaultTypeInternal() {}
  union {
    SequenceRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SequenceRangeDefaultTypeInternal _SequenceRange_default_instance_;
constexpr FlatTrajectory_ChunkSlice::FlatTrajectory_ChunkSlice(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_key_(PROTOBUF_ULONGLONG(0))
  , offset_(0)
  , length_(0)
  , index_(0){}
struct FlatTrajectory_ChunkSliceDefaultTypeInternal {
  constexpr FlatTrajectory_ChunkSliceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlatTrajectory_ChunkSliceDefaultTypeInternal() {}
  union {
    FlatTrajectory_ChunkSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlatTrajectory_ChunkSliceDefaultTypeInternal _FlatTrajectory_ChunkSlice_default_instance_;
constexpr FlatTrajectory_Column::FlatTrajectory_Column(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chunk_slices_()
  , squeeze_(false){}
struct FlatTrajectory_ColumnDefaultTypeInternal {
  constexpr FlatTrajectory_ColumnDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlatTrajectory_ColumnDefaultTypeInternal() {}
  union {
    FlatTrajectory_Column _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlatTrajectory_ColumnDefaultTypeInternal _FlatTrajectory_Column_default_instance_;
constexpr FlatTrajectory::FlatTrajectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : columns_(){}
struct FlatTrajectoryDefaultTypeInternal {
  constexpr FlatTrajectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FlatTrajectoryDefaultTypeInternal() {}
  union {
    FlatTrajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FlatTrajectoryDefaultTypeInternal _FlatTrajectory_default_instance_;
constexpr PrioritizedItem::PrioritizedItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : deprecated_chunk_keys_()
  , _deprecated_chunk_keys_cached_byte_size_()
  , table_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , deprecated_sequence_range_(nullptr)
  , inserted_at_(nullptr)
  , flat_trajectory_(nullptr)
  , key_(PROTOBUF_ULONGLONG(0))
  , priority_(0)
  , times_sampled_(0){}
struct PrioritizedItemDefaultTypeInternal {
  constexpr PrioritizedItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrioritizedItemDefaultTypeInternal() {}
  union {
    PrioritizedItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrioritizedItemDefaultTypeInternal _PrioritizedItem_default_instance_;
constexpr KeyWithPriority::KeyWithPriority(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(PROTOBUF_ULONGLONG(0))
  , priority_(0){}
struct KeyWithPriorityDefaultTypeInternal {
  constexpr KeyWithPriorityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyWithPriorityDefaultTypeInternal() {}
  union {
    KeyWithPriority _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyWithPriorityDefaultTypeInternal _KeyWithPriority_default_instance_;
constexpr SampleInfo::SampleInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_(nullptr)
  , probability_(0)
  , table_size_(PROTOBUF_LONGLONG(0))
  , rate_limited_(false){}
struct SampleInfoDefaultTypeInternal {
  constexpr SampleInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SampleInfoDefaultTypeInternal() {}
  union {
    SampleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SampleInfoDefaultTypeInternal _SampleInfo_default_instance_;
constexpr TableInfo::TableInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sampler_options_(nullptr)
  , remover_options_(nullptr)
  , rate_limiter_info_(nullptr)
  , signature_(nullptr)
  , max_size_(PROTOBUF_LONGLONG(0))
  , current_size_(PROTOBUF_LONGLONG(0))
  , num_episodes_(PROTOBUF_LONGLONG(0))
  , num_deleted_episodes_(PROTOBUF_LONGLONG(0))
  , num_unique_samples_(PROTOBUF_LONGLONG(0))
  , max_times_sampled_(0){}
struct TableInfoDefaultTypeInternal {
  constexpr TableInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TableInfoDefaultTypeInternal() {}
  union {
    TableInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TableInfoDefaultTypeInternal _TableInfo_default_instance_;
constexpr StructuredValue::StructuredValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct StructuredValueDefaultTypeInternal {
  constexpr StructuredValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StructuredValueDefaultTypeInternal() {}
  union {
    StructuredValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StructuredValueDefaultTypeInternal _StructuredValue_default_instance_;
constexpr NoneValue::NoneValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct NoneValueDefaultTypeInternal {
  constexpr NoneValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NoneValueDefaultTypeInternal() {}
  union {
    NoneValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NoneValueDefaultTypeInternal _NoneValue_default_instance_;
constexpr ListValue::ListValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct ListValueDefaultTypeInternal {
  constexpr ListValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListValueDefaultTypeInternal() {}
  union {
    ListValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListValueDefaultTypeInternal _ListValue_default_instance_;
constexpr TupleValue::TupleValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(){}
struct TupleValueDefaultTypeInternal {
  constexpr TupleValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TupleValueDefaultTypeInternal() {}
  union {
    TupleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TupleValueDefaultTypeInternal _TupleValue_default_instance_;
constexpr DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct DictValue_FieldsEntry_DoNotUseDefaultTypeInternal {
  constexpr DictValue_FieldsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictValue_FieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DictValue_FieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictValue_FieldsEntry_DoNotUseDefaultTypeInternal _DictValue_FieldsEntry_DoNotUse_default_instance_;
constexpr DictValue::DictValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fields_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct DictValueDefaultTypeInternal {
  constexpr DictValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DictValueDefaultTypeInternal() {}
  union {
    DictValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DictValueDefaultTypeInternal _DictValue_default_instance_;
constexpr PairValue::PairValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(nullptr){}
struct PairValueDefaultTypeInternal {
  constexpr PairValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PairValueDefaultTypeInternal() {}
  union {
    PairValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PairValueDefaultTypeInternal _PairValue_default_instance_;
constexpr NamedTupleValue::NamedTupleValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct NamedTupleValueDefaultTypeInternal {
  constexpr NamedTupleValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NamedTupleValueDefaultTypeInternal() {}
  union {
    NamedTupleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NamedTupleValueDefaultTypeInternal _NamedTupleValue_default_instance_;
constexpr TensorSpecProto::TensorSpecProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_(nullptr)
  , dtype_(0)
{}
struct TensorSpecProtoDefaultTypeInternal {
  constexpr TensorSpecProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TensorSpecProtoDefaultTypeInternal() {}
  union {
    TensorSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TensorSpecProtoDefaultTypeInternal _TensorSpecProto_default_instance_;
constexpr BoundedTensorSpecProto::BoundedTensorSpecProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , shape_(nullptr)
  , minimum_(nullptr)
  , maximum_(nullptr)
  , dtype_(0)
{}
struct BoundedTensorSpecProtoDefaultTypeInternal {
  constexpr BoundedTensorSpecProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BoundedTensorSpecProtoDefaultTypeInternal() {}
  union {
    BoundedTensorSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BoundedTensorSpecProtoDefaultTypeInternal _BoundedTensorSpecProto_default_instance_;
constexpr TypeSpecProto::TypeSpecProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_spec_class_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_state_(nullptr)
  , type_spec_class_(0)
{}
struct TypeSpecProtoDefaultTypeInternal {
  constexpr TypeSpecProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeSpecProtoDefaultTypeInternal() {}
  union {
    TypeSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeSpecProtoDefaultTypeInternal _TypeSpecProto_default_instance_;
constexpr RateLimiterCallStats::RateLimiterCallStats(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : completed_wait_time_(nullptr)
  , pending_wait_time_(nullptr)
  , pending_(PROTOBUF_LONGLONG(0))
  , completed_(PROTOBUF_LONGLONG(0))
  , limited_(PROTOBUF_LONGLONG(0)){}
struct RateLimiterCallStatsDefaultTypeInternal {
  constexpr RateLimiterCallStatsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateLimiterCallStatsDefaultTypeInternal() {}
  union {
    RateLimiterCallStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateLimiterCallStatsDefaultTypeInternal _RateLimiterCallStats_default_instance_;
constexpr RateLimiterInfo::RateLimiterInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insert_stats_(nullptr)
  , sample_stats_(nullptr)
  , samples_per_insert_(0)
  , min_diff_(0)
  , max_diff_(0)
  , min_size_to_sample_(PROTOBUF_LONGLONG(0)){}
struct RateLimiterInfoDefaultTypeInternal {
  constexpr RateLimiterInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RateLimiterInfoDefaultTypeInternal() {}
  union {
    RateLimiterInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RateLimiterInfoDefaultTypeInternal _RateLimiterInfo_default_instance_;
constexpr KeyDistributionOptions_Prioritized::KeyDistributionOptions_Prioritized(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priority_exponent_(0){}
struct KeyDistributionOptions_PrioritizedDefaultTypeInternal {
  constexpr KeyDistributionOptions_PrioritizedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDistributionOptions_PrioritizedDefaultTypeInternal() {}
  union {
    KeyDistributionOptions_Prioritized _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDistributionOptions_PrioritizedDefaultTypeInternal _KeyDistributionOptions_Prioritized_default_instance_;
constexpr KeyDistributionOptions_Heap::KeyDistributionOptions_Heap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_heap_(false){}
struct KeyDistributionOptions_HeapDefaultTypeInternal {
  constexpr KeyDistributionOptions_HeapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDistributionOptions_HeapDefaultTypeInternal() {}
  union {
    KeyDistributionOptions_Heap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDistributionOptions_HeapDefaultTypeInternal _KeyDistributionOptions_Heap_default_instance_;
constexpr KeyDistributionOptions::KeyDistributionOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : is_deterministic_(false)
  , _oneof_case_{}{}
struct KeyDistributionOptionsDefaultTypeInternal {
  constexpr KeyDistributionOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KeyDistributionOptionsDefaultTypeInternal() {}
  union {
    KeyDistributionOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KeyDistributionOptionsDefaultTypeInternal _KeyDistributionOptions_default_instance_;
constexpr Uint128::Uint128(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : high_(PROTOBUF_ULONGLONG(0))
  , low_(PROTOBUF_ULONGLONG(0)){}
struct Uint128DefaultTypeInternal {
  constexpr Uint128DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Uint128DefaultTypeInternal() {}
  union {
    Uint128 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Uint128DefaultTypeInternal _Uint128_default_instance_;
constexpr Timeout::Timeout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : milliseconds_(PROTOBUF_LONGLONG(0)){}
struct TimeoutDefaultTypeInternal {
  constexpr TimeoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeoutDefaultTypeInternal() {}
  union {
    Timeout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeoutDefaultTypeInternal _Timeout_default_instance_;
}  // namespace DRPB
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_schema_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_schema_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_schema_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_schema_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, version_number_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, tensor_content_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, half_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, float_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, double_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, int_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, string_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, scomplex_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, int64_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, bool_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, dcomplex_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, resource_handle_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, variant_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, uint32_val_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorProto, uint64_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::VariantTensorDataProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::VariantTensorDataProto, type_name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::VariantTensorDataProto, metadata_),
  PROTOBUF_FIELD_OFFSET(::DRPB::VariantTensorDataProto, tensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto_Dim, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto_Dim, size_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto_Dim, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto, dim_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorShapeProto, unknown_rank_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto_DtypeAndShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto_DtypeAndShape, dtype_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto_DtypeAndShape, shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, device_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, container_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, hash_code_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, maybe_type_name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ResourceHandleProto, dtypes_and_shapes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData_Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData_Data, tensors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, chunk_key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, sequence_range_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, data_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, data_tensors_len_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, delta_encoded_),
  PROTOBUF_FIELD_OFFSET(::DRPB::ChunkData, deprecated_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::SliceRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::SliceRange, offset_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SliceRange, length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::SequenceRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::SequenceRange, episode_id_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SequenceRange, start_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SequenceRange, end_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SequenceRange, sparse_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_ChunkSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_ChunkSlice, chunk_key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_ChunkSlice, offset_),
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_ChunkSlice, length_),
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_ChunkSlice, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_Column, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_Column, chunk_slices_),
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory_Column, squeeze_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::FlatTrajectory, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, table_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, priority_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, times_sampled_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, inserted_at_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, flat_trajectory_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, deprecated_chunk_keys_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PrioritizedItem, deprecated_sequence_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyWithPriority, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyWithPriority, key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyWithPriority, priority_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::SampleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::SampleInfo, item_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SampleInfo, probability_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SampleInfo, table_size_),
  PROTOBUF_FIELD_OFFSET(::DRPB::SampleInfo, rate_limited_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, sampler_options_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, remover_options_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, max_size_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, max_times_sampled_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, rate_limiter_info_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, signature_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, current_size_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, num_episodes_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, num_deleted_episodes_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TableInfo, num_unique_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::StructuredValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DRPB::StructuredValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DRPB::StructuredValue, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::NoneValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::ListValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TupleValue, values_),
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::DictValue, fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::PairValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::PairValue, key_),
  PROTOBUF_FIELD_OFFSET(::DRPB::PairValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::NamedTupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::NamedTupleValue, name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::NamedTupleValue, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorSpecProto, name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorSpecProto, shape_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TensorSpecProto, dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, name_),
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, shape_),
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, dtype_),
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, minimum_),
  PROTOBUF_FIELD_OFFSET(::DRPB::BoundedTensorSpecProto, maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::TypeSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::TypeSpecProto, type_spec_class_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TypeSpecProto, type_state_),
  PROTOBUF_FIELD_OFFSET(::DRPB::TypeSpecProto, type_spec_class_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, pending_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, completed_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, limited_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, completed_wait_time_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterCallStats, pending_wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, samples_per_insert_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, min_diff_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, max_diff_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, min_size_to_sample_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, insert_stats_),
  PROTOBUF_FIELD_OFFSET(::DRPB::RateLimiterInfo, sample_stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions_Prioritized, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions_Prioritized, priority_exponent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions_Heap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions_Heap, min_heap_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions, is_deterministic_),
  PROTOBUF_FIELD_OFFSET(::DRPB::KeyDistributionOptions, distribution_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::Uint128, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::Uint128, high_),
  PROTOBUF_FIELD_OFFSET(::DRPB::Uint128, low_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DRPB::Timeout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DRPB::Timeout, milliseconds_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DRPB::TensorProto)},
  { 22, -1, sizeof(::DRPB::VariantTensorDataProto)},
  { 30, -1, sizeof(::DRPB::TensorShapeProto_Dim)},
  { 37, -1, sizeof(::DRPB::TensorShapeProto)},
  { 44, -1, sizeof(::DRPB::ResourceHandleProto_DtypeAndShape)},
  { 51, -1, sizeof(::DRPB::ResourceHandleProto)},
  { 62, -1, sizeof(::DRPB::ChunkData_Data)},
  { 68, -1, sizeof(::DRPB::ChunkData)},
  { 79, -1, sizeof(::DRPB::SliceRange)},
  { 86, -1, sizeof(::DRPB::SequenceRange)},
  { 95, -1, sizeof(::DRPB::FlatTrajectory_ChunkSlice)},
  { 104, -1, sizeof(::DRPB::FlatTrajectory_Column)},
  { 111, -1, sizeof(::DRPB::FlatTrajectory)},
  { 117, -1, sizeof(::DRPB::PrioritizedItem)},
  { 130, -1, sizeof(::DRPB::KeyWithPriority)},
  { 137, -1, sizeof(::DRPB::SampleInfo)},
  { 146, -1, sizeof(::DRPB::TableInfo)},
  { 162, -1, sizeof(::DRPB::StructuredValue)},
  { 182, -1, sizeof(::DRPB::NoneValue)},
  { 187, -1, sizeof(::DRPB::ListValue)},
  { 193, -1, sizeof(::DRPB::TupleValue)},
  { 199, 206, sizeof(::DRPB::DictValue_FieldsEntry_DoNotUse)},
  { 208, -1, sizeof(::DRPB::DictValue)},
  { 214, -1, sizeof(::DRPB::PairValue)},
  { 221, -1, sizeof(::DRPB::NamedTupleValue)},
  { 228, -1, sizeof(::DRPB::TensorSpecProto)},
  { 236, -1, sizeof(::DRPB::BoundedTensorSpecProto)},
  { 246, -1, sizeof(::DRPB::TypeSpecProto)},
  { 254, -1, sizeof(::DRPB::RateLimiterCallStats)},
  { 264, -1, sizeof(::DRPB::RateLimiterInfo)},
  { 275, -1, sizeof(::DRPB::KeyDistributionOptions_Prioritized)},
  { 281, -1, sizeof(::DRPB::KeyDistributionOptions_Heap)},
  { 287, -1, sizeof(::DRPB::KeyDistributionOptions)},
  { 299, -1, sizeof(::DRPB::Uint128)},
  { 306, -1, sizeof(::DRPB::Timeout)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TensorProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_VariantTensorDataProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TensorShapeProto_Dim_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TensorShapeProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_ResourceHandleProto_DtypeAndShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_ResourceHandleProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_ChunkData_Data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_ChunkData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_SliceRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_SequenceRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_FlatTrajectory_ChunkSlice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_FlatTrajectory_Column_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_FlatTrajectory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_PrioritizedItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_KeyWithPriority_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_SampleInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TableInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_StructuredValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_NoneValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_ListValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TupleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_DictValue_FieldsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_DictValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_PairValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_NamedTupleValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TensorSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_BoundedTensorSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_TypeSpecProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_RateLimiterCallStats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_RateLimiterInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_KeyDistributionOptions_Prioritized_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_KeyDistributionOptions_Heap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_KeyDistributionOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_Uint128_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DRPB::_Timeout_default_instance_),
};

const char descriptor_table_protodef_schema_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014schema.proto\022\004DRPB\032\036google/protobuf/du"
  "ration.proto\032\037google/protobuf/timestamp."
  "proto\032\013types.proto\"\364\003\n\013TensorProto\022\035\n\005dt"
  "ype\030\001 \001(\0162\016.DRPB.DataType\022,\n\014tensor_shap"
  "e\030\002 \001(\0132\026.DRPB.TensorShapeProto\022\026\n\016versi"
  "on_number\030\003 \001(\005\022\026\n\016tensor_content\030\004 \001(\014\022"
  "\024\n\010half_val\030\r \003(\005B\002\020\001\022\025\n\tfloat_val\030\005 \003(\002"
  "B\002\020\001\022\026\n\ndouble_val\030\006 \003(\001B\002\020\001\022\023\n\007int_val\030"
  "\007 \003(\005B\002\020\001\022\022\n\nstring_val\030\010 \003(\014\022\030\n\014scomple"
  "x_val\030\t \003(\002B\002\020\001\022\025\n\tint64_val\030\n \003(\003B\002\020\001\022\024"
  "\n\010bool_val\030\013 \003(\010B\002\020\001\022\030\n\014dcomplex_val\030\014 \003"
  "(\001B\002\020\001\0226\n\023resource_handle_val\030\016 \003(\0132\031.DR"
  "PB.ResourceHandleProto\0221\n\013variant_val\030\017 "
  "\003(\0132\034.DRPB.VariantTensorDataProto\022\026\n\nuin"
  "t32_val\030\020 \003(\rB\002\020\001\022\026\n\nuint64_val\030\021 \003(\004B\002\020"
  "\001\"a\n\026VariantTensorDataProto\022\021\n\ttype_name"
  "\030\001 \001(\t\022\020\n\010metadata\030\002 \001(\014\022\"\n\007tensors\030\003 \003("
  "\0132\021.DRPB.TensorProto\"t\n\020TensorShapeProto"
  "\022\'\n\003dim\030\002 \003(\0132\032.DRPB.TensorShapeProto.Di"
  "m\022\024\n\014unknown_rank\030\003 \001(\010\032!\n\003Dim\022\014\n\004size\030\001"
  " \001(\003\022\014\n\004name\030\002 \001(\t\"\223\002\n\023ResourceHandlePro"
  "to\022\016\n\006device\030\001 \001(\t\022\021\n\tcontainer\030\002 \001(\t\022\014\n"
  "\004name\030\003 \001(\t\022\021\n\thash_code\030\004 \001(\004\022\027\n\017maybe_"
  "type_name\030\005 \001(\t\022B\n\021dtypes_and_shapes\030\006 \003"
  "(\0132\'.DRPB.ResourceHandleProto.DtypeAndSh"
  "ape\032U\n\rDtypeAndShape\022\035\n\005dtype\030\001 \001(\0162\016.DR"
  "PB.DataType\022%\n\005shape\030\002 \001(\0132\026.DRPB.Tensor"
  "ShapeProtoJ\004\010\007\020\010\"\200\002\n\tChunkData\022\021\n\tchunk_"
  "key\030\001 \001(\004\022+\n\016sequence_range\030\002 \001(\0132\023.DRPB"
  ".SequenceRange\022&\n\004data\030\005 \001(\0132\024.DRPB.Chun"
  "kData.DataB\002(\001\022\030\n\020data_tensors_len\030\006 \001(\005"
  "\022\025\n\rdelta_encoded\030\004 \001(\010\022.\n\017deprecated_da"
  "ta\030\003 \003(\0132\021.DRPB.TensorProtoB\002\030\001\032*\n\004Data\022"
  "\"\n\007tensors\030\001 \003(\0132\021.DRPB.TensorProto\",\n\nS"
  "liceRange\022\016\n\006offset\030\001 \001(\005\022\016\n\006length\030\002 \001("
  "\005\"O\n\rSequenceRange\022\022\n\nepisode_id\030\001 \001(\004\022\r"
  "\n\005start\030\002 \001(\005\022\013\n\003end\030\003 \001(\005\022\016\n\006sparse\030\004 \001"
  "(\010\"\340\001\n\016FlatTrajectory\022,\n\007columns\030\001 \003(\0132\033"
  ".DRPB.FlatTrajectory.Column\032N\n\nChunkSlic"
  "e\022\021\n\tchunk_key\030\001 \001(\004\022\016\n\006offset\030\002 \001(\005\022\016\n\006"
  "length\030\003 \001(\005\022\r\n\005index\030\004 \001(\005\032P\n\006Column\0225\n"
  "\014chunk_slices\030\001 \003(\0132\037.DRPB.FlatTrajector"
  "y.ChunkSlice\022\017\n\007squeeze\030\002 \001(\010\"\222\002\n\017Priori"
  "tizedItem\022\013\n\003key\030\001 \001(\004\022\r\n\005table\030\002 \001(\t\022\020\n"
  "\010priority\030\005 \001(\001\022\025\n\rtimes_sampled\030\006 \001(\005\022/"
  "\n\013inserted_at\030\007 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022-\n\017flat_trajectory\030\010 \001(\0132\024.DRPB."
  "FlatTrajectory\022!\n\025deprecated_chunk_keys\030"
  "\003 \003(\004B\002\030\001\0227\n\031deprecated_sequence_range\030\004"
  " \001(\0132\020.DRPB.SliceRangeB\002\030\001\"0\n\017KeyWithPri"
  "ority\022\013\n\003key\030\001 \001(\004\022\020\n\010priority\030\002 \001(\001\"p\n\n"
  "SampleInfo\022#\n\004item\030\001 \001(\0132\025.DRPB.Prioriti"
  "zedItem\022\023\n\013probability\030\002 \001(\001\022\022\n\ntable_si"
  "ze\030\003 \001(\003\022\024\n\014rate_limited\030\004 \001(\010\"\366\002\n\tTable"
  "Info\022\014\n\004name\030\010 \001(\t\0225\n\017sampler_options\030\001 "
  "\001(\0132\034.DRPB.KeyDistributionOptions\0225\n\017rem"
  "over_options\030\002 \001(\0132\034.DRPB.KeyDistributio"
  "nOptions\022\020\n\010max_size\030\003 \001(\003\022\031\n\021max_times_"
  "sampled\030\004 \001(\005\0220\n\021rate_limiter_info\030\005 \001(\013"
  "2\025.DRPB.RateLimiterInfo\022(\n\tsignature\030\006 \001"
  "(\0132\025.DRPB.StructuredValue\022\024\n\014current_siz"
  "e\030\007 \001(\003\022\024\n\014num_episodes\030\t \001(\003\022\034\n\024num_del"
  "eted_episodes\030\n \001(\003\022\032\n\022num_unique_sample"
  "s\030\013 \001(\003\"\324\004\n\017StructuredValue\022%\n\nnone_valu"
  "e\030\001 \001(\0132\017.DRPB.NoneValueH\000\022\027\n\rfloat64_va"
  "lue\030\013 \001(\001H\000\022\025\n\013int64_value\030\014 \001(\022H\000\022\026\n\014st"
  "ring_value\030\r \001(\tH\000\022\024\n\nbool_value\030\016 \001(\010H\000"
  "\0224\n\022tensor_shape_value\030\037 \001(\0132\026.DRPB.Tens"
  "orShapeProtoH\000\022,\n\022tensor_dtype_value\030  \001"
  "(\0162\016.DRPB.DataTypeH\000\0222\n\021tensor_spec_valu"
  "e\030! \001(\0132\025.DRPB.TensorSpecProtoH\000\022.\n\017type"
  "_spec_value\030\" \001(\0132\023.DRPB.TypeSpecProtoH\000"
  "\022A\n\031bounded_tensor_spec_value\030# \001(\0132\034.DR"
  "PB.BoundedTensorSpecProtoH\000\022%\n\nlist_valu"
  "e\0303 \001(\0132\017.DRPB.ListValueH\000\022\'\n\013tuple_valu"
  "e\0304 \001(\0132\020.DRPB.TupleValueH\000\022%\n\ndict_valu"
  "e\0305 \001(\0132\017.DRPB.DictValueH\000\0222\n\021named_tupl"
  "e_value\0306 \001(\0132\025.DRPB.NamedTupleValueH\000B\006"
  "\n\004kind\"\013\n\tNoneValue\"2\n\tListValue\022%\n\006valu"
  "es\030\001 \003(\0132\025.DRPB.StructuredValue\"3\n\nTuple"
  "Value\022%\n\006values\030\001 \003(\0132\025.DRPB.StructuredV"
  "alue\"~\n\tDictValue\022+\n\006fields\030\001 \003(\0132\033.DRPB"
  ".DictValue.FieldsEntry\032D\n\013FieldsEntry\022\013\n"
  "\003key\030\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.DRPB.Structu"
  "redValue:\0028\001\">\n\tPairValue\022\013\n\003key\030\001 \001(\t\022$"
  "\n\005value\030\002 \001(\0132\025.DRPB.StructuredValue\"@\n\017"
  "NamedTupleValue\022\014\n\004name\030\001 \001(\t\022\037\n\006values\030"
  "\002 \003(\0132\017.DRPB.PairValue\"e\n\017TensorSpecProt"
  "o\022\014\n\004name\030\001 \001(\t\022%\n\005shape\030\002 \001(\0132\026.DRPB.Te"
  "nsorShapeProto\022\035\n\005dtype\030\003 \001(\0162\016.DRPB.Dat"
  "aType\"\264\001\n\026BoundedTensorSpecProto\022\014\n\004name"
  "\030\001 \001(\t\022%\n\005shape\030\002 \001(\0132\026.DRPB.TensorShape"
  "Proto\022\035\n\005dtype\030\003 \001(\0162\016.DRPB.DataType\022\"\n\007"
  "minimum\030\004 \001(\0132\021.DRPB.TensorProto\022\"\n\007maxi"
  "mum\030\005 \001(\0132\021.DRPB.TensorProto\"\317\003\n\rTypeSpe"
  "cProto\022:\n\017type_spec_class\030\001 \001(\0162!.DRPB.T"
  "ypeSpecProto.TypeSpecClass\022)\n\ntype_state"
  "\030\002 \001(\0132\025.DRPB.StructuredValue\022\034\n\024type_sp"
  "ec_class_name\030\003 \001(\t\"\270\002\n\rTypeSpecClass\022\013\n"
  "\007UNKNOWN\020\000\022\026\n\022SPARSE_TENSOR_SPEC\020\001\022\027\n\023IN"
  "DEXED_SLICES_SPEC\020\002\022\026\n\022RAGGED_TENSOR_SPE"
  "C\020\003\022\025\n\021TENSOR_ARRAY_SPEC\020\004\022\025\n\021DATA_DATAS"
  "ET_SPEC\020\005\022\026\n\022DATA_ITERATOR_SPEC\020\006\022\021\n\rOPT"
  "IONAL_SPEC\020\007\022\024\n\020PER_REPLICA_SPEC\020\010\022\021\n\rVA"
  "RIABLE_SPEC\020\t\022\026\n\022ROW_PARTITION_SPEC\020\n\022\030\n"
  "\024REGISTERED_TYPE_SPEC\020\014\022\027\n\023EXTENSION_TYP"
  "E_SPEC\020\r\"\004\010\013\020\013\"\271\001\n\024RateLimiterCallStats\022"
  "\017\n\007pending\030\001 \001(\003\022\021\n\tcompleted\030\002 \001(\003\022\017\n\007l"
  "imited\030\003 \001(\003\0226\n\023completed_wait_time\030\004 \001("
  "\0132\031.google.protobuf.Duration\0224\n\021pending_"
  "wait_time\030\005 \001(\0132\031.google.protobuf.Durati"
  "on\"\321\001\n\017RateLimiterInfo\022\032\n\022samples_per_in"
  "sert\030\001 \001(\001\022\020\n\010min_diff\030\002 \001(\001\022\020\n\010max_diff"
  "\030\003 \001(\001\022\032\n\022min_size_to_sample\030\004 \001(\003\0220\n\014in"
  "sert_stats\030\005 \001(\0132\032.DRPB.RateLimiterCallS"
  "tats\0220\n\014sample_stats\030\006 \001(\0132\032.DRPB.RateLi"
  "miterCallStats\"\263\002\n\026KeyDistributionOption"
  "s\022\016\n\004fifo\030\001 \001(\010H\000\022\021\n\007uniform\030\002 \001(\010H\000\022\?\n\013"
  "prioritized\030\003 \001(\0132(.DRPB.KeyDistribution"
  "Options.PrioritizedH\000\0221\n\004heap\030\004 \001(\0132!.DR"
  "PB.KeyDistributionOptions.HeapH\000\022\016\n\004lifo"
  "\030\006 \001(\010H\000\022\030\n\020is_deterministic\030\007 \001(\010\032(\n\013Pr"
  "ioritized\022\031\n\021priority_exponent\030\001 \001(\001\032\030\n\004"
  "Heap\022\020\n\010min_heap\030\001 \001(\010B\016\n\014distributionJ\004"
  "\010\005\020\006\"$\n\007Uint128\022\014\n\004high\030\001 \001(\004\022\013\n\003low\030\002 \001"
  "(\004\"\037\n\007Timeout\022\024\n\014milliseconds\030\001 \001(\003b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_schema_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_types_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_schema_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schema_2eproto = {
  false, false, 5043, descriptor_table_protodef_schema_2eproto, "schema.proto", 
  &descriptor_table_schema_2eproto_once, descriptor_table_schema_2eproto_deps, 3, 35,
  schemas, file_default_instances, TableStruct_schema_2eproto::offsets,
  file_level_metadata_schema_2eproto, file_level_enum_descriptors_schema_2eproto, file_level_service_descriptors_schema_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_schema_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return descriptor_table_schema_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_schema_2eproto(&descriptor_table_schema_2eproto);
namespace DRPB {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeSpecProto_TypeSpecClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_schema_2eproto);
  return file_level_enum_descriptors_schema_2eproto[0];
}
bool TypeSpecProto_TypeSpecClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::UNKNOWN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::SPARSE_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::INDEXED_SLICES_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::RAGGED_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TENSOR_ARRAY_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_DATASET_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_ITERATOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::OPTIONAL_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::PER_REPLICA_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::VARIABLE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::ROW_PARTITION_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::REGISTERED_TYPE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::EXTENSION_TYPE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MIN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MAX;
constexpr int TypeSpecProto::TypeSpecClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class TensorProto::_Internal {
 public:
  static const ::DRPB::TensorShapeProto& tensor_shape(const TensorProto* msg);
};

const ::DRPB::TensorShapeProto&
TensorProto::_Internal::tensor_shape(const TensorProto* msg) {
  return *msg->tensor_shape_;
}
TensorProto::TensorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  float_val_(arena),
  double_val_(arena),
  int_val_(arena),
  string_val_(arena),
  scomplex_val_(arena),
  int64_val_(arena),
  bool_val_(arena),
  dcomplex_val_(arena),
  half_val_(arena),
  resource_handle_val_(arena),
  variant_val_(arena),
  uint32_val_(arena),
  uint64_val_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TensorProto)
}
TensorProto::TensorProto(const TensorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      float_val_(from.float_val_),
      double_val_(from.double_val_),
      int_val_(from.int_val_),
      string_val_(from.string_val_),
      scomplex_val_(from.scomplex_val_),
      int64_val_(from.int64_val_),
      bool_val_(from.bool_val_),
      dcomplex_val_(from.dcomplex_val_),
      half_val_(from.half_val_),
      resource_handle_val_(from.resource_handle_val_),
      variant_val_(from.variant_val_),
      uint32_val_(from.uint32_val_),
      uint64_val_(from.uint64_val_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tensor_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tensor_content().empty()) {
    tensor_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tensor_content(), 
      GetArena());
  }
  if (from._internal_has_tensor_shape()) {
    tensor_shape_ = new ::DRPB::TensorShapeProto(*from.tensor_shape_);
  } else {
    tensor_shape_ = nullptr;
  }
  ::memcpy(&dtype_, &from.dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&dtype_)) + sizeof(version_number_));
  // @@protoc_insertion_point(copy_constructor:DRPB.TensorProto)
}

void TensorProto::SharedCtor() {
tensor_content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tensor_shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_number_) -
    reinterpret_cast<char*>(&tensor_shape_)) + sizeof(version_number_));
}

TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:DRPB.TensorProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tensor_content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tensor_shape_;
}

void TensorProto::ArenaDtor(void* object) {
  TensorProto* _this = reinterpret_cast< TensorProto* >(object);
  (void)_this;
}
void TensorProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_val_.Clear();
  double_val_.Clear();
  int_val_.Clear();
  string_val_.Clear();
  scomplex_val_.Clear();
  int64_val_.Clear();
  bool_val_.Clear();
  dcomplex_val_.Clear();
  half_val_.Clear();
  resource_handle_val_.Clear();
  variant_val_.Clear();
  uint32_val_.Clear();
  uint64_val_.Clear();
  tensor_content_.ClearToEmpty();
  if (GetArena() == nullptr && tensor_shape_ != nullptr) {
    delete tensor_shape_;
  }
  tensor_shape_ = nullptr;
  ::memset(&dtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&version_number_) -
      reinterpret_cast<char*>(&dtype_)) + sizeof(version_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::DRPB::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorShapeProto tensor_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 version_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes tensor_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_tensor_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float float_val = 5 [packed = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_float_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated double double_val = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_double_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49) {
          _internal_add_double_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 int_val = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_int_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes string_val = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_val();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float scomplex_val = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scomplex_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_scomplex_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int64 int64_val = 10 [packed = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_int64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_int64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bool_val = 11 [packed = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bool_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88) {
          _internal_add_bool_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double dcomplex_val = 12 [packed = true];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_dcomplex_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97) {
          _internal_add_dcomplex_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int32 half_val = 13 [packed = true];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_half_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104) {
          _internal_add_half_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.ResourceHandleProto resource_handle_val = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_handle_val(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.VariantTensorDataProto variant_val = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_variant_val(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 uint32_val = 16 [packed = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_uint32_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_uint32_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 uint64_val = 17 [packed = true];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uint64_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136) {
          _internal_add_uint64_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TensorProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .DRPB.TensorShapeProto tensor_shape = 2;
  if (this->has_tensor_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tensor_shape(this), target, stream);
  }

  // int32 version_number = 3;
  if (this->version_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_version_number(), target);
  }

  // bytes tensor_content = 4;
  if (this->tensor_content().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_tensor_content(), target);
  }

  // repeated float float_val = 5 [packed = true];
  if (this->_internal_float_val_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_float_val(), target);
  }

  // repeated double double_val = 6 [packed = true];
  if (this->_internal_double_val_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_double_val(), target);
  }

  // repeated int32 int_val = 7 [packed = true];
  {
    int byte_size = _int_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_int_val(), byte_size, target);
    }
  }

  // repeated bytes string_val = 8;
  for (int i = 0, n = this->_internal_string_val_size(); i < n; i++) {
    const auto& s = this->_internal_string_val(i);
    target = stream->WriteBytes(8, s, target);
  }

  // repeated float scomplex_val = 9 [packed = true];
  if (this->_internal_scomplex_val_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_scomplex_val(), target);
  }

  // repeated int64 int64_val = 10 [packed = true];
  {
    int byte_size = _int64_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          10, _internal_int64_val(), byte_size, target);
    }
  }

  // repeated bool bool_val = 11 [packed = true];
  if (this->_internal_bool_val_size() > 0) {
    target = stream->WriteFixedPacked(11, _internal_bool_val(), target);
  }

  // repeated double dcomplex_val = 12 [packed = true];
  if (this->_internal_dcomplex_val_size() > 0) {
    target = stream->WriteFixedPacked(12, _internal_dcomplex_val(), target);
  }

  // repeated int32 half_val = 13 [packed = true];
  {
    int byte_size = _half_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          13, _internal_half_val(), byte_size, target);
    }
  }

  // repeated .DRPB.ResourceHandleProto resource_handle_val = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resource_handle_val_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_resource_handle_val(i), target, stream);
  }

  // repeated .DRPB.VariantTensorDataProto variant_val = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_variant_val_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_variant_val(i), target, stream);
  }

  // repeated uint32 uint32_val = 16 [packed = true];
  {
    int byte_size = _uint32_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          16, _internal_uint32_val(), byte_size, target);
    }
  }

  // repeated uint64 uint64_val = 17 [packed = true];
  {
    int byte_size = _uint64_val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          17, _internal_uint64_val(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TensorProto)
  return target;
}

size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TensorProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_val = 5 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _float_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double double_val = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_double_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _double_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 int_val = 7 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->int_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bytes string_val = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_val_.size());
  for (int i = 0, n = string_val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      string_val_.Get(i));
  }

  // repeated float scomplex_val = 9 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scomplex_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scomplex_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 int64_val = 10 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->int64_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _int64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool bool_val = 11 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bool_val_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bool_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated double dcomplex_val = 12 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_dcomplex_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dcomplex_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 half_val = 13 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->half_val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _half_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .DRPB.ResourceHandleProto resource_handle_val = 14;
  total_size += 1UL * this->_internal_resource_handle_val_size();
  for (const auto& msg : this->resource_handle_val_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DRPB.VariantTensorDataProto variant_val = 15;
  total_size += 1UL * this->_internal_variant_val_size();
  for (const auto& msg : this->variant_val_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 uint32_val = 16 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->uint32_val_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint32_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 uint64_val = 17 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->uint64_val_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _uint64_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes tensor_content = 4;
  if (this->tensor_content().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_tensor_content());
  }

  // .DRPB.TensorShapeProto tensor_shape = 2;
  if (this->has_tensor_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_shape_);
  }

  // .DRPB.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  // int32 version_number = 3;
  if (this->version_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TensorProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TensorProto)
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TensorProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  float_val_.MergeFrom(from.float_val_);
  double_val_.MergeFrom(from.double_val_);
  int_val_.MergeFrom(from.int_val_);
  string_val_.MergeFrom(from.string_val_);
  scomplex_val_.MergeFrom(from.scomplex_val_);
  int64_val_.MergeFrom(from.int64_val_);
  bool_val_.MergeFrom(from.bool_val_);
  dcomplex_val_.MergeFrom(from.dcomplex_val_);
  half_val_.MergeFrom(from.half_val_);
  resource_handle_val_.MergeFrom(from.resource_handle_val_);
  variant_val_.MergeFrom(from.variant_val_);
  uint32_val_.MergeFrom(from.uint32_val_);
  uint64_val_.MergeFrom(from.uint64_val_);
  if (from.tensor_content().size() > 0) {
    _internal_set_tensor_content(from._internal_tensor_content());
  }
  if (from.has_tensor_shape()) {
    _internal_mutable_tensor_shape()->::DRPB::TensorShapeProto::MergeFrom(from._internal_tensor_shape());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
  if (from.version_number() != 0) {
    _internal_set_version_number(from._internal_version_number());
  }
}

void TensorProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {
  return true;
}

void TensorProto::InternalSwap(TensorProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  float_val_.InternalSwap(&other->float_val_);
  double_val_.InternalSwap(&other->double_val_);
  int_val_.InternalSwap(&other->int_val_);
  string_val_.InternalSwap(&other->string_val_);
  scomplex_val_.InternalSwap(&other->scomplex_val_);
  int64_val_.InternalSwap(&other->int64_val_);
  bool_val_.InternalSwap(&other->bool_val_);
  dcomplex_val_.InternalSwap(&other->dcomplex_val_);
  half_val_.InternalSwap(&other->half_val_);
  resource_handle_val_.InternalSwap(&other->resource_handle_val_);
  variant_val_.InternalSwap(&other->variant_val_);
  uint32_val_.InternalSwap(&other->uint32_val_);
  uint64_val_.InternalSwap(&other->uint64_val_);
  tensor_content_.Swap(&other->tensor_content_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, version_number_)
      + sizeof(TensorProto::version_number_)
      - PROTOBUF_FIELD_OFFSET(TensorProto, tensor_shape_)>(
          reinterpret_cast<char*>(&tensor_shape_),
          reinterpret_cast<char*>(&other->tensor_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VariantTensorDataProto::_Internal {
 public:
};

VariantTensorDataProto::VariantTensorDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.VariantTensorDataProto)
}
VariantTensorDataProto::VariantTensorDataProto(const VariantTensorDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_name().empty()) {
    type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_name(), 
      GetArena());
  }
  metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metadata().empty()) {
    metadata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_metadata(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DRPB.VariantTensorDataProto)
}

void VariantTensorDataProto::SharedCtor() {
type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VariantTensorDataProto::~VariantTensorDataProto() {
  // @@protoc_insertion_point(destructor:DRPB.VariantTensorDataProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VariantTensorDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VariantTensorDataProto::ArenaDtor(void* object) {
  VariantTensorDataProto* _this = reinterpret_cast< VariantTensorDataProto* >(object);
  (void)_this;
}
void VariantTensorDataProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VariantTensorDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VariantTensorDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.VariantTensorDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  type_name_.ClearToEmpty();
  metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariantTensorDataProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.VariantTensorDataProto.type_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_metadata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.TensorProto tensors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VariantTensorDataProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.VariantTensorDataProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_name = 1;
  if (this->type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.VariantTensorDataProto.type_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_name(), target);
  }

  // bytes metadata = 2;
  if (this->metadata().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_metadata(), target);
  }

  // repeated .DRPB.TensorProto tensors = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tensors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.VariantTensorDataProto)
  return target;
}

size_t VariantTensorDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.VariantTensorDataProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.TensorProto tensors = 3;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type_name = 1;
  if (this->type_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  // bytes metadata = 2;
  if (this->metadata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VariantTensorDataProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.VariantTensorDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  const VariantTensorDataProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VariantTensorDataProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.VariantTensorDataProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.VariantTensorDataProto)
    MergeFrom(*source);
  }
}

void VariantTensorDataProto::MergeFrom(const VariantTensorDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.VariantTensorDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
  if (from.type_name().size() > 0) {
    _internal_set_type_name(from._internal_type_name());
  }
  if (from.metadata().size() > 0) {
    _internal_set_metadata(from._internal_metadata());
  }
}

void VariantTensorDataProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.VariantTensorDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariantTensorDataProto::CopyFrom(const VariantTensorDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.VariantTensorDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariantTensorDataProto::IsInitialized() const {
  return true;
}

void VariantTensorDataProto::InternalSwap(VariantTensorDataProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensors_.InternalSwap(&other->tensors_);
  type_name_.Swap(&other->type_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metadata_.Swap(&other->metadata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VariantTensorDataProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TensorShapeProto_Dim::_Internal {
 public:
};

TensorShapeProto_Dim::TensorShapeProto_Dim(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TensorShapeProto.Dim)
}
TensorShapeProto_Dim::TensorShapeProto_Dim(const TensorShapeProto_Dim& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:DRPB.TensorShapeProto.Dim)
}

void TensorShapeProto_Dim::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
size_ = PROTOBUF_LONGLONG(0);
}

TensorShapeProto_Dim::~TensorShapeProto_Dim() {
  // @@protoc_insertion_point(destructor:DRPB.TensorShapeProto.Dim)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorShapeProto_Dim::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TensorShapeProto_Dim::ArenaDtor(void* object) {
  TensorShapeProto_Dim* _this = reinterpret_cast< TensorShapeProto_Dim* >(object);
  (void)_this;
}
void TensorShapeProto_Dim::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorShapeProto_Dim::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TensorShapeProto_Dim::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TensorShapeProto.Dim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  size_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorShapeProto_Dim::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.TensorShapeProto.Dim.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorShapeProto_Dim::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TensorShapeProto.Dim)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.TensorShapeProto.Dim.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TensorShapeProto.Dim)
  return target;
}

size_t TensorShapeProto_Dim::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TensorShapeProto.Dim)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size = 1;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorShapeProto_Dim::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TensorShapeProto.Dim)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorShapeProto_Dim* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorShapeProto_Dim>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TensorShapeProto.Dim)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TensorShapeProto.Dim)
    MergeFrom(*source);
  }
}

void TensorShapeProto_Dim::MergeFrom(const TensorShapeProto_Dim& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TensorShapeProto.Dim)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void TensorShapeProto_Dim::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TensorShapeProto.Dim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShapeProto_Dim::CopyFrom(const TensorShapeProto_Dim& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TensorShapeProto.Dim)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapeProto_Dim::IsInitialized() const {
  return true;
}

void TensorShapeProto_Dim::InternalSwap(TensorShapeProto_Dim* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto_Dim::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TensorShapeProto::_Internal {
 public:
};

TensorShapeProto::TensorShapeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dim_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TensorShapeProto)
}
TensorShapeProto::TensorShapeProto(const TensorShapeProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dim_(from.dim_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  unknown_rank_ = from.unknown_rank_;
  // @@protoc_insertion_point(copy_constructor:DRPB.TensorShapeProto)
}

void TensorShapeProto::SharedCtor() {
unknown_rank_ = false;
}

TensorShapeProto::~TensorShapeProto() {
  // @@protoc_insertion_point(destructor:DRPB.TensorShapeProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorShapeProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TensorShapeProto::ArenaDtor(void* object) {
  TensorShapeProto* _this = reinterpret_cast< TensorShapeProto* >(object);
  (void)_this;
}
void TensorShapeProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorShapeProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TensorShapeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dim_.Clear();
  unknown_rank_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorShapeProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.TensorShapeProto.Dim dim = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dim(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool unknown_rank = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unknown_rank_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorShapeProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TensorShapeProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.TensorShapeProto.Dim dim = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dim_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dim(i), target, stream);
  }

  // bool unknown_rank = 3;
  if (this->unknown_rank() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unknown_rank(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TensorShapeProto)
  return target;
}

size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TensorShapeProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.TensorShapeProto.Dim dim = 2;
  total_size += 1UL * this->_internal_dim_size();
  for (const auto& msg : this->dim_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool unknown_rank = 3;
  if (this->unknown_rank() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorShapeProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TensorShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorShapeProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorShapeProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TensorShapeProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TensorShapeProto)
    MergeFrom(*source);
  }
}

void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TensorShapeProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dim_.MergeFrom(from.dim_);
  if (from.unknown_rank() != 0) {
    _internal_set_unknown_rank(from._internal_unknown_rank());
  }
}

void TensorShapeProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TensorShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShapeProto::CopyFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TensorShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapeProto::IsInitialized() const {
  return true;
}

void TensorShapeProto::InternalSwap(TensorShapeProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dim_.InternalSwap(&other->dim_);
  swap(unknown_rank_, other->unknown_rank_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorShapeProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceHandleProto_DtypeAndShape::_Internal {
 public:
  static const ::DRPB::TensorShapeProto& shape(const ResourceHandleProto_DtypeAndShape* msg);
};

const ::DRPB::TensorShapeProto&
ResourceHandleProto_DtypeAndShape::_Internal::shape(const ResourceHandleProto_DtypeAndShape* msg) {
  return *msg->shape_;
}
ResourceHandleProto_DtypeAndShape::ResourceHandleProto_DtypeAndShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.ResourceHandleProto.DtypeAndShape)
}
ResourceHandleProto_DtypeAndShape::ResourceHandleProto_DtypeAndShape(const ResourceHandleProto_DtypeAndShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    shape_ = new ::DRPB::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:DRPB.ResourceHandleProto.DtypeAndShape)
}

void ResourceHandleProto_DtypeAndShape::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

ResourceHandleProto_DtypeAndShape::~ResourceHandleProto_DtypeAndShape() {
  // @@protoc_insertion_point(destructor:DRPB.ResourceHandleProto.DtypeAndShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceHandleProto_DtypeAndShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete shape_;
}

void ResourceHandleProto_DtypeAndShape::ArenaDtor(void* object) {
  ResourceHandleProto_DtypeAndShape* _this = reinterpret_cast< ResourceHandleProto_DtypeAndShape* >(object);
  (void)_this;
}
void ResourceHandleProto_DtypeAndShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceHandleProto_DtypeAndShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceHandleProto_DtypeAndShape::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.ResourceHandleProto.DtypeAndShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceHandleProto_DtypeAndShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::DRPB::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceHandleProto_DtypeAndShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.ResourceHandleProto.DtypeAndShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.DataType dtype = 1;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.ResourceHandleProto.DtypeAndShape)
  return target;
}

size_t ResourceHandleProto_DtypeAndShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.ResourceHandleProto.DtypeAndShape)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .DRPB.DataType dtype = 1;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceHandleProto_DtypeAndShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.ResourceHandleProto.DtypeAndShape)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceHandleProto_DtypeAndShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceHandleProto_DtypeAndShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.ResourceHandleProto.DtypeAndShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.ResourceHandleProto.DtypeAndShape)
    MergeFrom(*source);
  }
}

void ResourceHandleProto_DtypeAndShape::MergeFrom(const ResourceHandleProto_DtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.ResourceHandleProto.DtypeAndShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shape()) {
    _internal_mutable_shape()->::DRPB::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void ResourceHandleProto_DtypeAndShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.ResourceHandleProto.DtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceHandleProto_DtypeAndShape::CopyFrom(const ResourceHandleProto_DtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.ResourceHandleProto.DtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceHandleProto_DtypeAndShape::IsInitialized() const {
  return true;
}

void ResourceHandleProto_DtypeAndShape::InternalSwap(ResourceHandleProto_DtypeAndShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceHandleProto_DtypeAndShape, dtype_)
      + sizeof(ResourceHandleProto_DtypeAndShape::dtype_)
      - PROTOBUF_FIELD_OFFSET(ResourceHandleProto_DtypeAndShape, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceHandleProto_DtypeAndShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ResourceHandleProto::_Internal {
 public:
};

ResourceHandleProto::ResourceHandleProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dtypes_and_shapes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.ResourceHandleProto)
}
ResourceHandleProto::ResourceHandleProto(const ResourceHandleProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      dtypes_and_shapes_(from.dtypes_and_shapes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device().empty()) {
    device_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device(), 
      GetArena());
  }
  container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_container().empty()) {
    container_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_container(), 
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  maybe_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_maybe_type_name().empty()) {
    maybe_type_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_maybe_type_name(), 
      GetArena());
  }
  hash_code_ = from.hash_code_;
  // @@protoc_insertion_point(copy_constructor:DRPB.ResourceHandleProto)
}

void ResourceHandleProto::SharedCtor() {
device_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
container_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
maybe_type_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hash_code_ = PROTOBUF_ULONGLONG(0);
}

ResourceHandleProto::~ResourceHandleProto() {
  // @@protoc_insertion_point(destructor:DRPB.ResourceHandleProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourceHandleProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  device_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  container_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  maybe_type_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResourceHandleProto::ArenaDtor(void* object) {
  ResourceHandleProto* _this = reinterpret_cast< ResourceHandleProto* >(object);
  (void)_this;
}
void ResourceHandleProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourceHandleProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceHandleProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.ResourceHandleProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dtypes_and_shapes_.Clear();
  device_.ClearToEmpty();
  container_.ClearToEmpty();
  name_.ClearToEmpty();
  maybe_type_name_.ClearToEmpty();
  hash_code_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceHandleProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_device();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.ResourceHandleProto.device"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string container = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_container();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.ResourceHandleProto.container"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.ResourceHandleProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 hash_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hash_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string maybe_type_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_maybe_type_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.ResourceHandleProto.maybe_type_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dtypes_and_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourceHandleProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.ResourceHandleProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string device = 1;
  if (this->device().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.ResourceHandleProto.device");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device(), target);
  }

  // string container = 2;
  if (this->container().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_container().data(), static_cast<int>(this->_internal_container().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.ResourceHandleProto.container");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_container(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.ResourceHandleProto.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // uint64 hash_code = 4;
  if (this->hash_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_hash_code(), target);
  }

  // string maybe_type_name = 5;
  if (this->maybe_type_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maybe_type_name().data(), static_cast<int>(this->_internal_maybe_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.ResourceHandleProto.maybe_type_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_maybe_type_name(), target);
  }

  // repeated .DRPB.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dtypes_and_shapes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_dtypes_and_shapes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.ResourceHandleProto)
  return target;
}

size_t ResourceHandleProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.ResourceHandleProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.ResourceHandleProto.DtypeAndShape dtypes_and_shapes = 6;
  total_size += 1UL * this->_internal_dtypes_and_shapes_size();
  for (const auto& msg : this->dtypes_and_shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device = 1;
  if (this->device().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // string container = 2;
  if (this->container().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_container());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string maybe_type_name = 5;
  if (this->maybe_type_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maybe_type_name());
  }

  // uint64 hash_code = 4;
  if (this->hash_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hash_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourceHandleProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.ResourceHandleProto)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourceHandleProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourceHandleProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.ResourceHandleProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.ResourceHandleProto)
    MergeFrom(*source);
  }
}

void ResourceHandleProto::MergeFrom(const ResourceHandleProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.ResourceHandleProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dtypes_and_shapes_.MergeFrom(from.dtypes_and_shapes_);
  if (from.device().size() > 0) {
    _internal_set_device(from._internal_device());
  }
  if (from.container().size() > 0) {
    _internal_set_container(from._internal_container());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.maybe_type_name().size() > 0) {
    _internal_set_maybe_type_name(from._internal_maybe_type_name());
  }
  if (from.hash_code() != 0) {
    _internal_set_hash_code(from._internal_hash_code());
  }
}

void ResourceHandleProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.ResourceHandleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceHandleProto::CopyFrom(const ResourceHandleProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.ResourceHandleProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceHandleProto::IsInitialized() const {
  return true;
}

void ResourceHandleProto::InternalSwap(ResourceHandleProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dtypes_and_shapes_.InternalSwap(&other->dtypes_and_shapes_);
  device_.Swap(&other->device_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  container_.Swap(&other->container_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  maybe_type_name_.Swap(&other->maybe_type_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hash_code_, other->hash_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceHandleProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkData_Data::_Internal {
 public:
};

ChunkData_Data::ChunkData_Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tensors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.ChunkData.Data)
}
ChunkData_Data::ChunkData_Data(const ChunkData_Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tensors_(from.tensors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DRPB.ChunkData.Data)
}

void ChunkData_Data::SharedCtor() {
}

ChunkData_Data::~ChunkData_Data() {
  // @@protoc_insertion_point(destructor:DRPB.ChunkData.Data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData_Data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ChunkData_Data::ArenaDtor(void* object) {
  ChunkData_Data* _this = reinterpret_cast< ChunkData_Data* >(object);
  (void)_this;
}
void ChunkData_Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData_Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkData_Data::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.ChunkData.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tensors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData_Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.TensorProto tensors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData_Data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.ChunkData.Data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.TensorProto tensors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tensors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tensors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.ChunkData.Data)
  return target;
}

size_t ChunkData_Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.ChunkData.Data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.TensorProto tensors = 1;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData_Data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.ChunkData.Data)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData_Data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData_Data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.ChunkData.Data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.ChunkData.Data)
    MergeFrom(*source);
  }
}

void ChunkData_Data::MergeFrom(const ChunkData_Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.ChunkData.Data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tensors_.MergeFrom(from.tensors_);
}

void ChunkData_Data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.ChunkData.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData_Data::CopyFrom(const ChunkData_Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.ChunkData.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData_Data::IsInitialized() const {
  return true;
}

void ChunkData_Data::InternalSwap(ChunkData_Data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tensors_.InternalSwap(&other->tensors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData_Data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChunkData::_Internal {
 public:
  static const ::DRPB::SequenceRange& sequence_range(const ChunkData* msg);
  static const ::DRPB::ChunkData_Data& data(const ChunkData* msg);
};

const ::DRPB::SequenceRange&
ChunkData::_Internal::sequence_range(const ChunkData* msg) {
  return *msg->sequence_range_;
}
const ::DRPB::ChunkData_Data&
ChunkData::_Internal::data(const ChunkData* msg) {
  return *msg->data_;
}
ChunkData::ChunkData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deprecated_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.ChunkData)
}
ChunkData::ChunkData(const ChunkData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deprecated_data_(from.deprecated_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sequence_range()) {
    sequence_range_ = new ::DRPB::SequenceRange(*from.sequence_range_);
  } else {
    sequence_range_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::DRPB::ChunkData_Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&chunk_key_, &from.chunk_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_tensors_len_) -
    reinterpret_cast<char*>(&chunk_key_)) + sizeof(data_tensors_len_));
  // @@protoc_insertion_point(copy_constructor:DRPB.ChunkData)
}

void ChunkData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sequence_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_tensors_len_) -
    reinterpret_cast<char*>(&sequence_range_)) + sizeof(data_tensors_len_));
}

ChunkData::~ChunkData() {
  // @@protoc_insertion_point(destructor:DRPB.ChunkData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChunkData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete sequence_range_;
  if (this != internal_default_instance()) delete data_;
}

void ChunkData::ArenaDtor(void* object) {
  ChunkData* _this = reinterpret_cast< ChunkData* >(object);
  (void)_this;
}
void ChunkData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChunkData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChunkData::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_data_.Clear();
  if (GetArena() == nullptr && sequence_range_ != nullptr) {
    delete sequence_range_;
  }
  sequence_range_ = nullptr;
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&chunk_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_tensors_len_) -
      reinterpret_cast<char*>(&chunk_key_)) + sizeof(data_tensors_len_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunkData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chunk_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.SequenceRange sequence_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sequence_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.TensorProto deprecated_data = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deprecated_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool delta_encoded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          delta_encoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.ChunkData.Data data = 5 [lazy = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 data_tensors_len = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          data_tensors_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChunkData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.ChunkData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_key = 1;
  if (this->chunk_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chunk_key(), target);
  }

  // .DRPB.SequenceRange sequence_range = 2;
  if (this->has_sequence_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sequence_range(this), target, stream);
  }

  // repeated .DRPB.TensorProto deprecated_data = 3 [deprecated = true];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deprecated_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_deprecated_data(i), target, stream);
  }

  // bool delta_encoded = 4;
  if (this->delta_encoded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_delta_encoded(), target);
  }

  // .DRPB.ChunkData.Data data = 5 [lazy = true];
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data(this), target, stream);
  }

  // int32 data_tensors_len = 6;
  if (this->data_tensors_len() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_data_tensors_len(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.ChunkData)
  return target;
}

size_t ChunkData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.ChunkData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.TensorProto deprecated_data = 3 [deprecated = true];
  total_size += 1UL * this->_internal_deprecated_data_size();
  for (const auto& msg : this->deprecated_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .DRPB.SequenceRange sequence_range = 2;
  if (this->has_sequence_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sequence_range_);
  }

  // .DRPB.ChunkData.Data data = 5 [lazy = true];
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // uint64 chunk_key = 1;
  if (this->chunk_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chunk_key());
  }

  // bool delta_encoded = 4;
  if (this->delta_encoded() != 0) {
    total_size += 1 + 1;
  }

  // int32 data_tensors_len = 6;
  if (this->data_tensors_len() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_data_tensors_len());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChunkData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  const ChunkData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChunkData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.ChunkData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.ChunkData)
    MergeFrom(*source);
  }
}

void ChunkData::MergeFrom(const ChunkData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.ChunkData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_data_.MergeFrom(from.deprecated_data_);
  if (from.has_sequence_range()) {
    _internal_mutable_sequence_range()->::DRPB::SequenceRange::MergeFrom(from._internal_sequence_range());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::DRPB::ChunkData_Data::MergeFrom(from._internal_data());
  }
  if (from.chunk_key() != 0) {
    _internal_set_chunk_key(from._internal_chunk_key());
  }
  if (from.delta_encoded() != 0) {
    _internal_set_delta_encoded(from._internal_delta_encoded());
  }
  if (from.data_tensors_len() != 0) {
    _internal_set_data_tensors_len(from._internal_data_tensors_len());
  }
}

void ChunkData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChunkData::CopyFrom(const ChunkData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.ChunkData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunkData::IsInitialized() const {
  return true;
}

void ChunkData::InternalSwap(ChunkData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deprecated_data_.InternalSwap(&other->deprecated_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChunkData, data_tensors_len_)
      + sizeof(ChunkData::data_tensors_len_)
      - PROTOBUF_FIELD_OFFSET(ChunkData, sequence_range_)>(
          reinterpret_cast<char*>(&sequence_range_),
          reinterpret_cast<char*>(&other->sequence_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunkData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SliceRange::_Internal {
 public:
};

SliceRange::SliceRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.SliceRange)
}
SliceRange::SliceRange(const SliceRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&offset_, &from.offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:DRPB.SliceRange)
}

void SliceRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&offset_)) + sizeof(length_));
}

SliceRange::~SliceRange() {
  // @@protoc_insertion_point(destructor:DRPB.SliceRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SliceRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SliceRange::ArenaDtor(void* object) {
  SliceRange* _this = reinterpret_cast< SliceRange* >(object);
  (void)_this;
}
void SliceRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SliceRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SliceRange::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.SliceRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&offset_)) + sizeof(length_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SliceRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.SliceRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_offset(), target);
  }

  // int32 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.SliceRange)
  return target;
}

size_t SliceRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.SliceRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 offset = 1;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SliceRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.SliceRange)
  GOOGLE_DCHECK_NE(&from, this);
  const SliceRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SliceRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.SliceRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.SliceRange)
    MergeFrom(*source);
  }
}

void SliceRange::MergeFrom(const SliceRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.SliceRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
}

void SliceRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.SliceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SliceRange::CopyFrom(const SliceRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.SliceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceRange::IsInitialized() const {
  return true;
}

void SliceRange::InternalSwap(SliceRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SliceRange, length_)
      + sizeof(SliceRange::length_)
      - PROTOBUF_FIELD_OFFSET(SliceRange, offset_)>(
          reinterpret_cast<char*>(&offset_),
          reinterpret_cast<char*>(&other->offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SequenceRange::_Internal {
 public:
};

SequenceRange::SequenceRange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.SequenceRange)
}
SequenceRange::SequenceRange(const SequenceRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&episode_id_, &from.episode_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&sparse_) -
    reinterpret_cast<char*>(&episode_id_)) + sizeof(sparse_));
  // @@protoc_insertion_point(copy_constructor:DRPB.SequenceRange)
}

void SequenceRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&episode_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sparse_) -
    reinterpret_cast<char*>(&episode_id_)) + sizeof(sparse_));
}

SequenceRange::~SequenceRange() {
  // @@protoc_insertion_point(destructor:DRPB.SequenceRange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SequenceRange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SequenceRange::ArenaDtor(void* object) {
  SequenceRange* _this = reinterpret_cast< SequenceRange* >(object);
  (void)_this;
}
void SequenceRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SequenceRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SequenceRange::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.SequenceRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&episode_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sparse_) -
      reinterpret_cast<char*>(&episode_id_)) + sizeof(sparse_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SequenceRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 episode_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          episode_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 end = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sparse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          sparse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SequenceRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.SequenceRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 episode_id = 1;
  if (this->episode_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_episode_id(), target);
  }

  // int32 start = 2;
  if (this->start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_start(), target);
  }

  // int32 end = 3;
  if (this->end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_end(), target);
  }

  // bool sparse = 4;
  if (this->sparse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sparse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.SequenceRange)
  return target;
}

size_t SequenceRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.SequenceRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 episode_id = 1;
  if (this->episode_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_episode_id());
  }

  // int32 start = 2;
  if (this->start() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_start());
  }

  // int32 end = 3;
  if (this->end() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_end());
  }

  // bool sparse = 4;
  if (this->sparse() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SequenceRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.SequenceRange)
  GOOGLE_DCHECK_NE(&from, this);
  const SequenceRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SequenceRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.SequenceRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.SequenceRange)
    MergeFrom(*source);
  }
}

void SequenceRange::MergeFrom(const SequenceRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.SequenceRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.episode_id() != 0) {
    _internal_set_episode_id(from._internal_episode_id());
  }
  if (from.start() != 0) {
    _internal_set_start(from._internal_start());
  }
  if (from.end() != 0) {
    _internal_set_end(from._internal_end());
  }
  if (from.sparse() != 0) {
    _internal_set_sparse(from._internal_sparse());
  }
}

void SequenceRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.SequenceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SequenceRange::CopyFrom(const SequenceRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.SequenceRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SequenceRange::IsInitialized() const {
  return true;
}

void SequenceRange::InternalSwap(SequenceRange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SequenceRange, sparse_)
      + sizeof(SequenceRange::sparse_)
      - PROTOBUF_FIELD_OFFSET(SequenceRange, episode_id_)>(
          reinterpret_cast<char*>(&episode_id_),
          reinterpret_cast<char*>(&other->episode_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SequenceRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlatTrajectory_ChunkSlice::_Internal {
 public:
};

FlatTrajectory_ChunkSlice::FlatTrajectory_ChunkSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.FlatTrajectory.ChunkSlice)
}
FlatTrajectory_ChunkSlice::FlatTrajectory_ChunkSlice(const FlatTrajectory_ChunkSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&chunk_key_, &from.chunk_key_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&chunk_key_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:DRPB.FlatTrajectory.ChunkSlice)
}

void FlatTrajectory_ChunkSlice::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chunk_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&chunk_key_)) + sizeof(index_));
}

FlatTrajectory_ChunkSlice::~FlatTrajectory_ChunkSlice() {
  // @@protoc_insertion_point(destructor:DRPB.FlatTrajectory.ChunkSlice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlatTrajectory_ChunkSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlatTrajectory_ChunkSlice::ArenaDtor(void* object) {
  FlatTrajectory_ChunkSlice* _this = reinterpret_cast< FlatTrajectory_ChunkSlice* >(object);
  (void)_this;
}
void FlatTrajectory_ChunkSlice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlatTrajectory_ChunkSlice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlatTrajectory_ChunkSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.FlatTrajectory.ChunkSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&chunk_key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&chunk_key_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatTrajectory_ChunkSlice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 chunk_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          chunk_key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatTrajectory_ChunkSlice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.FlatTrajectory.ChunkSlice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 chunk_key = 1;
  if (this->chunk_key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_chunk_key(), target);
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_offset(), target);
  }

  // int32 length = 3;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_length(), target);
  }

  // int32 index = 4;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.FlatTrajectory.ChunkSlice)
  return target;
}

size_t FlatTrajectory_ChunkSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.FlatTrajectory.ChunkSlice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 chunk_key = 1;
  if (this->chunk_key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_chunk_key());
  }

  // int32 offset = 2;
  if (this->offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_offset());
  }

  // int32 length = 3;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  // int32 index = 4;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlatTrajectory_ChunkSlice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.FlatTrajectory.ChunkSlice)
  GOOGLE_DCHECK_NE(&from, this);
  const FlatTrajectory_ChunkSlice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlatTrajectory_ChunkSlice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.FlatTrajectory.ChunkSlice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.FlatTrajectory.ChunkSlice)
    MergeFrom(*source);
  }
}

void FlatTrajectory_ChunkSlice::MergeFrom(const FlatTrajectory_ChunkSlice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.FlatTrajectory.ChunkSlice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.chunk_key() != 0) {
    _internal_set_chunk_key(from._internal_chunk_key());
  }
  if (from.offset() != 0) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void FlatTrajectory_ChunkSlice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.FlatTrajectory.ChunkSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlatTrajectory_ChunkSlice::CopyFrom(const FlatTrajectory_ChunkSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.FlatTrajectory.ChunkSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatTrajectory_ChunkSlice::IsInitialized() const {
  return true;
}

void FlatTrajectory_ChunkSlice::InternalSwap(FlatTrajectory_ChunkSlice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlatTrajectory_ChunkSlice, index_)
      + sizeof(FlatTrajectory_ChunkSlice::index_)
      - PROTOBUF_FIELD_OFFSET(FlatTrajectory_ChunkSlice, chunk_key_)>(
          reinterpret_cast<char*>(&chunk_key_),
          reinterpret_cast<char*>(&other->chunk_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatTrajectory_ChunkSlice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlatTrajectory_Column::_Internal {
 public:
};

FlatTrajectory_Column::FlatTrajectory_Column(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  chunk_slices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.FlatTrajectory.Column)
}
FlatTrajectory_Column::FlatTrajectory_Column(const FlatTrajectory_Column& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      chunk_slices_(from.chunk_slices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  squeeze_ = from.squeeze_;
  // @@protoc_insertion_point(copy_constructor:DRPB.FlatTrajectory.Column)
}

void FlatTrajectory_Column::SharedCtor() {
squeeze_ = false;
}

FlatTrajectory_Column::~FlatTrajectory_Column() {
  // @@protoc_insertion_point(destructor:DRPB.FlatTrajectory.Column)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlatTrajectory_Column::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlatTrajectory_Column::ArenaDtor(void* object) {
  FlatTrajectory_Column* _this = reinterpret_cast< FlatTrajectory_Column* >(object);
  (void)_this;
}
void FlatTrajectory_Column::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlatTrajectory_Column::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlatTrajectory_Column::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.FlatTrajectory.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunk_slices_.Clear();
  squeeze_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatTrajectory_Column::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.FlatTrajectory.ChunkSlice chunk_slices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunk_slices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool squeeze = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          squeeze_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatTrajectory_Column::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.FlatTrajectory.Column)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.FlatTrajectory.ChunkSlice chunk_slices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_chunk_slices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_chunk_slices(i), target, stream);
  }

  // bool squeeze = 2;
  if (this->squeeze() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_squeeze(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.FlatTrajectory.Column)
  return target;
}

size_t FlatTrajectory_Column::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.FlatTrajectory.Column)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.FlatTrajectory.ChunkSlice chunk_slices = 1;
  total_size += 1UL * this->_internal_chunk_slices_size();
  for (const auto& msg : this->chunk_slices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool squeeze = 2;
  if (this->squeeze() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlatTrajectory_Column::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.FlatTrajectory.Column)
  GOOGLE_DCHECK_NE(&from, this);
  const FlatTrajectory_Column* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlatTrajectory_Column>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.FlatTrajectory.Column)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.FlatTrajectory.Column)
    MergeFrom(*source);
  }
}

void FlatTrajectory_Column::MergeFrom(const FlatTrajectory_Column& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.FlatTrajectory.Column)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunk_slices_.MergeFrom(from.chunk_slices_);
  if (from.squeeze() != 0) {
    _internal_set_squeeze(from._internal_squeeze());
  }
}

void FlatTrajectory_Column::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.FlatTrajectory.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlatTrajectory_Column::CopyFrom(const FlatTrajectory_Column& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.FlatTrajectory.Column)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatTrajectory_Column::IsInitialized() const {
  return true;
}

void FlatTrajectory_Column::InternalSwap(FlatTrajectory_Column* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  chunk_slices_.InternalSwap(&other->chunk_slices_);
  swap(squeeze_, other->squeeze_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatTrajectory_Column::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class FlatTrajectory::_Internal {
 public:
};

FlatTrajectory::FlatTrajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.FlatTrajectory)
}
FlatTrajectory::FlatTrajectory(const FlatTrajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DRPB.FlatTrajectory)
}

void FlatTrajectory::SharedCtor() {
}

FlatTrajectory::~FlatTrajectory() {
  // @@protoc_insertion_point(destructor:DRPB.FlatTrajectory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlatTrajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FlatTrajectory::ArenaDtor(void* object) {
  FlatTrajectory* _this = reinterpret_cast< FlatTrajectory* >(object);
  (void)_this;
}
void FlatTrajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlatTrajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlatTrajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.FlatTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlatTrajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.FlatTrajectory.Column columns = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlatTrajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.FlatTrajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.FlatTrajectory.Column columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.FlatTrajectory)
  return target;
}

size_t FlatTrajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.FlatTrajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.FlatTrajectory.Column columns = 1;
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlatTrajectory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.FlatTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const FlatTrajectory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlatTrajectory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.FlatTrajectory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.FlatTrajectory)
    MergeFrom(*source);
  }
}

void FlatTrajectory::MergeFrom(const FlatTrajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.FlatTrajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
}

void FlatTrajectory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.FlatTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlatTrajectory::CopyFrom(const FlatTrajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.FlatTrajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlatTrajectory::IsInitialized() const {
  return true;
}

void FlatTrajectory::InternalSwap(FlatTrajectory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FlatTrajectory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PrioritizedItem::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& inserted_at(const PrioritizedItem* msg);
  static const ::DRPB::FlatTrajectory& flat_trajectory(const PrioritizedItem* msg);
  static const ::DRPB::SliceRange& deprecated_sequence_range(const PrioritizedItem* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PrioritizedItem::_Internal::inserted_at(const PrioritizedItem* msg) {
  return *msg->inserted_at_;
}
const ::DRPB::FlatTrajectory&
PrioritizedItem::_Internal::flat_trajectory(const PrioritizedItem* msg) {
  return *msg->flat_trajectory_;
}
const ::DRPB::SliceRange&
PrioritizedItem::_Internal::deprecated_sequence_range(const PrioritizedItem* msg) {
  return *msg->deprecated_sequence_range_;
}
void PrioritizedItem::clear_inserted_at() {
  if (GetArena() == nullptr && inserted_at_ != nullptr) {
    delete inserted_at_;
  }
  inserted_at_ = nullptr;
}
PrioritizedItem::PrioritizedItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deprecated_chunk_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.PrioritizedItem)
}
PrioritizedItem::PrioritizedItem(const PrioritizedItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deprecated_chunk_keys_(from.deprecated_chunk_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table().empty()) {
    table_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table(), 
      GetArena());
  }
  if (from._internal_has_deprecated_sequence_range()) {
    deprecated_sequence_range_ = new ::DRPB::SliceRange(*from.deprecated_sequence_range_);
  } else {
    deprecated_sequence_range_ = nullptr;
  }
  if (from._internal_has_inserted_at()) {
    inserted_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.inserted_at_);
  } else {
    inserted_at_ = nullptr;
  }
  if (from._internal_has_flat_trajectory()) {
    flat_trajectory_ = new ::DRPB::FlatTrajectory(*from.flat_trajectory_);
  } else {
    flat_trajectory_ = nullptr;
  }
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_sampled_) -
    reinterpret_cast<char*>(&key_)) + sizeof(times_sampled_));
  // @@protoc_insertion_point(copy_constructor:DRPB.PrioritizedItem)
}

void PrioritizedItem::SharedCtor() {
table_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&deprecated_sequence_range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&times_sampled_) -
    reinterpret_cast<char*>(&deprecated_sequence_range_)) + sizeof(times_sampled_));
}

PrioritizedItem::~PrioritizedItem() {
  // @@protoc_insertion_point(destructor:DRPB.PrioritizedItem)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PrioritizedItem::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete deprecated_sequence_range_;
  if (this != internal_default_instance()) delete inserted_at_;
  if (this != internal_default_instance()) delete flat_trajectory_;
}

void PrioritizedItem::ArenaDtor(void* object) {
  PrioritizedItem* _this = reinterpret_cast< PrioritizedItem* >(object);
  (void)_this;
}
void PrioritizedItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrioritizedItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrioritizedItem::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.PrioritizedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deprecated_chunk_keys_.Clear();
  table_.ClearToEmpty();
  if (GetArena() == nullptr && deprecated_sequence_range_ != nullptr) {
    delete deprecated_sequence_range_;
  }
  deprecated_sequence_range_ = nullptr;
  if (GetArena() == nullptr && inserted_at_ != nullptr) {
    delete inserted_at_;
  }
  inserted_at_ = nullptr;
  if (GetArena() == nullptr && flat_trajectory_ != nullptr) {
    delete flat_trajectory_;
  }
  flat_trajectory_ = nullptr;
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_sampled_) -
      reinterpret_cast<char*>(&key_)) + sizeof(times_sampled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrioritizedItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_table();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.PrioritizedItem.table"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_deprecated_chunk_keys(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_deprecated_chunk_keys(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.SliceRange deprecated_sequence_range = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_sequence_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 times_sampled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          times_sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp inserted_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inserted_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.FlatTrajectory flat_trajectory = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_flat_trajectory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PrioritizedItem::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.PrioritizedItem)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(), target);
  }

  // string table = 2;
  if (this->table().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table().data(), static_cast<int>(this->_internal_table().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.PrioritizedItem.table");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_table(), target);
  }

  // repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
  {
    int byte_size = _deprecated_chunk_keys_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_deprecated_chunk_keys(), byte_size, target);
    }
  }

  // .DRPB.SliceRange deprecated_sequence_range = 4 [deprecated = true];
  if (this->has_deprecated_sequence_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::deprecated_sequence_range(this), target, stream);
  }

  // double priority = 5;
  if (!(this->priority() <= 0 && this->priority() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_priority(), target);
  }

  // int32 times_sampled = 6;
  if (this->times_sampled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_times_sampled(), target);
  }

  // .google.protobuf.Timestamp inserted_at = 7;
  if (this->has_inserted_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::inserted_at(this), target, stream);
  }

  // .DRPB.FlatTrajectory flat_trajectory = 8;
  if (this->has_flat_trajectory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::flat_trajectory(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.PrioritizedItem)
  return target;
}

size_t PrioritizedItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.PrioritizedItem)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->deprecated_chunk_keys_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _deprecated_chunk_keys_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string table = 2;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table());
  }

  // .DRPB.SliceRange deprecated_sequence_range = 4 [deprecated = true];
  if (this->has_deprecated_sequence_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deprecated_sequence_range_);
  }

  // .google.protobuf.Timestamp inserted_at = 7;
  if (this->has_inserted_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *inserted_at_);
  }

  // .DRPB.FlatTrajectory flat_trajectory = 8;
  if (this->has_flat_trajectory()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *flat_trajectory_);
  }

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // double priority = 5;
  if (!(this->priority() <= 0 && this->priority() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 times_sampled = 6;
  if (this->times_sampled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_times_sampled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrioritizedItem::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.PrioritizedItem)
  GOOGLE_DCHECK_NE(&from, this);
  const PrioritizedItem* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PrioritizedItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.PrioritizedItem)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.PrioritizedItem)
    MergeFrom(*source);
  }
}

void PrioritizedItem::MergeFrom(const PrioritizedItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.PrioritizedItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deprecated_chunk_keys_.MergeFrom(from.deprecated_chunk_keys_);
  if (from.table().size() > 0) {
    _internal_set_table(from._internal_table());
  }
  if (from.has_deprecated_sequence_range()) {
    _internal_mutable_deprecated_sequence_range()->::DRPB::SliceRange::MergeFrom(from._internal_deprecated_sequence_range());
  }
  if (from.has_inserted_at()) {
    _internal_mutable_inserted_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_inserted_at());
  }
  if (from.has_flat_trajectory()) {
    _internal_mutable_flat_trajectory()->::DRPB::FlatTrajectory::MergeFrom(from._internal_flat_trajectory());
  }
  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (!(from.priority() <= 0 && from.priority() >= 0)) {
    _internal_set_priority(from._internal_priority());
  }
  if (from.times_sampled() != 0) {
    _internal_set_times_sampled(from._internal_times_sampled());
  }
}

void PrioritizedItem::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.PrioritizedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrioritizedItem::CopyFrom(const PrioritizedItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.PrioritizedItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrioritizedItem::IsInitialized() const {
  return true;
}

void PrioritizedItem::InternalSwap(PrioritizedItem* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deprecated_chunk_keys_.InternalSwap(&other->deprecated_chunk_keys_);
  table_.Swap(&other->table_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrioritizedItem, times_sampled_)
      + sizeof(PrioritizedItem::times_sampled_)
      - PROTOBUF_FIELD_OFFSET(PrioritizedItem, deprecated_sequence_range_)>(
          reinterpret_cast<char*>(&deprecated_sequence_range_),
          reinterpret_cast<char*>(&other->deprecated_sequence_range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrioritizedItem::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyWithPriority::_Internal {
 public:
};

KeyWithPriority::KeyWithPriority(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.KeyWithPriority)
}
KeyWithPriority::KeyWithPriority(const KeyWithPriority& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&key_, &from.key_,
    static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&key_)) + sizeof(priority_));
  // @@protoc_insertion_point(copy_constructor:DRPB.KeyWithPriority)
}

void KeyWithPriority::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&priority_) -
    reinterpret_cast<char*>(&key_)) + sizeof(priority_));
}

KeyWithPriority::~KeyWithPriority() {
  // @@protoc_insertion_point(destructor:DRPB.KeyWithPriority)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyWithPriority::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyWithPriority::ArenaDtor(void* object) {
  KeyWithPriority* _this = reinterpret_cast< KeyWithPriority* >(object);
  (void)_this;
}
void KeyWithPriority::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyWithPriority::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyWithPriority::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.KeyWithPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&key_)) + sizeof(priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyWithPriority::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyWithPriority::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.KeyWithPriority)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_key(), target);
  }

  // double priority = 2;
  if (!(this->priority() <= 0 && this->priority() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.KeyWithPriority)
  return target;
}

size_t KeyWithPriority::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.KeyWithPriority)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 key = 1;
  if (this->key() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_key());
  }

  // double priority = 2;
  if (!(this->priority() <= 0 && this->priority() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyWithPriority::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.KeyWithPriority)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyWithPriority* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyWithPriority>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.KeyWithPriority)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.KeyWithPriority)
    MergeFrom(*source);
  }
}

void KeyWithPriority::MergeFrom(const KeyWithPriority& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.KeyWithPriority)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key() != 0) {
    _internal_set_key(from._internal_key());
  }
  if (!(from.priority() <= 0 && from.priority() >= 0)) {
    _internal_set_priority(from._internal_priority());
  }
}

void KeyWithPriority::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.KeyWithPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyWithPriority::CopyFrom(const KeyWithPriority& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.KeyWithPriority)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyWithPriority::IsInitialized() const {
  return true;
}

void KeyWithPriority::InternalSwap(KeyWithPriority* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyWithPriority, priority_)
      + sizeof(KeyWithPriority::priority_)
      - PROTOBUF_FIELD_OFFSET(KeyWithPriority, key_)>(
          reinterpret_cast<char*>(&key_),
          reinterpret_cast<char*>(&other->key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyWithPriority::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SampleInfo::_Internal {
 public:
  static const ::DRPB::PrioritizedItem& item(const SampleInfo* msg);
};

const ::DRPB::PrioritizedItem&
SampleInfo::_Internal::item(const SampleInfo* msg) {
  return *msg->item_;
}
SampleInfo::SampleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.SampleInfo)
}
SampleInfo::SampleInfo(const SampleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    item_ = new ::DRPB::PrioritizedItem(*from.item_);
  } else {
    item_ = nullptr;
  }
  ::memcpy(&probability_, &from.probability_,
    static_cast<size_t>(reinterpret_cast<char*>(&rate_limited_) -
    reinterpret_cast<char*>(&probability_)) + sizeof(rate_limited_));
  // @@protoc_insertion_point(copy_constructor:DRPB.SampleInfo)
}

void SampleInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&item_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rate_limited_) -
    reinterpret_cast<char*>(&item_)) + sizeof(rate_limited_));
}

SampleInfo::~SampleInfo() {
  // @@protoc_insertion_point(destructor:DRPB.SampleInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SampleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete item_;
}

void SampleInfo::ArenaDtor(void* object) {
  SampleInfo* _this = reinterpret_cast< SampleInfo* >(object);
  (void)_this;
}
void SampleInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SampleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SampleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.SampleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
  ::memset(&probability_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rate_limited_) -
      reinterpret_cast<char*>(&probability_)) + sizeof(rate_limited_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SampleInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.PrioritizedItem item = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double probability = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          probability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 table_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          table_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rate_limited = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rate_limited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SampleInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.SampleInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.PrioritizedItem item = 1;
  if (this->has_item()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::item(this), target, stream);
  }

  // double probability = 2;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_probability(), target);
  }

  // int64 table_size = 3;
  if (this->table_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_table_size(), target);
  }

  // bool rate_limited = 4;
  if (this->rate_limited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_rate_limited(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.SampleInfo)
  return target;
}

size_t SampleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.SampleInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DRPB.PrioritizedItem item = 1;
  if (this->has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *item_);
  }

  // double probability = 2;
  if (!(this->probability() <= 0 && this->probability() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 table_size = 3;
  if (this->table_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_table_size());
  }

  // bool rate_limited = 4;
  if (this->rate_limited() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SampleInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.SampleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SampleInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SampleInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.SampleInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.SampleInfo)
    MergeFrom(*source);
  }
}

void SampleInfo::MergeFrom(const SampleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.SampleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_item()) {
    _internal_mutable_item()->::DRPB::PrioritizedItem::MergeFrom(from._internal_item());
  }
  if (!(from.probability() <= 0 && from.probability() >= 0)) {
    _internal_set_probability(from._internal_probability());
  }
  if (from.table_size() != 0) {
    _internal_set_table_size(from._internal_table_size());
  }
  if (from.rate_limited() != 0) {
    _internal_set_rate_limited(from._internal_rate_limited());
  }
}

void SampleInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.SampleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleInfo::CopyFrom(const SampleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.SampleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleInfo::IsInitialized() const {
  return true;
}

void SampleInfo::InternalSwap(SampleInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SampleInfo, rate_limited_)
      + sizeof(SampleInfo::rate_limited_)
      - PROTOBUF_FIELD_OFFSET(SampleInfo, item_)>(
          reinterpret_cast<char*>(&item_),
          reinterpret_cast<char*>(&other->item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SampleInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TableInfo::_Internal {
 public:
  static const ::DRPB::KeyDistributionOptions& sampler_options(const TableInfo* msg);
  static const ::DRPB::KeyDistributionOptions& remover_options(const TableInfo* msg);
  static const ::DRPB::RateLimiterInfo& rate_limiter_info(const TableInfo* msg);
  static const ::DRPB::StructuredValue& signature(const TableInfo* msg);
};

const ::DRPB::KeyDistributionOptions&
TableInfo::_Internal::sampler_options(const TableInfo* msg) {
  return *msg->sampler_options_;
}
const ::DRPB::KeyDistributionOptions&
TableInfo::_Internal::remover_options(const TableInfo* msg) {
  return *msg->remover_options_;
}
const ::DRPB::RateLimiterInfo&
TableInfo::_Internal::rate_limiter_info(const TableInfo* msg) {
  return *msg->rate_limiter_info_;
}
const ::DRPB::StructuredValue&
TableInfo::_Internal::signature(const TableInfo* msg) {
  return *msg->signature_;
}
TableInfo::TableInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TableInfo)
}
TableInfo::TableInfo(const TableInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_sampler_options()) {
    sampler_options_ = new ::DRPB::KeyDistributionOptions(*from.sampler_options_);
  } else {
    sampler_options_ = nullptr;
  }
  if (from._internal_has_remover_options()) {
    remover_options_ = new ::DRPB::KeyDistributionOptions(*from.remover_options_);
  } else {
    remover_options_ = nullptr;
  }
  if (from._internal_has_rate_limiter_info()) {
    rate_limiter_info_ = new ::DRPB::RateLimiterInfo(*from.rate_limiter_info_);
  } else {
    rate_limiter_info_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::DRPB::StructuredValue(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  ::memcpy(&max_size_, &from.max_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_times_sampled_) -
    reinterpret_cast<char*>(&max_size_)) + sizeof(max_times_sampled_));
  // @@protoc_insertion_point(copy_constructor:DRPB.TableInfo)
}

void TableInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sampler_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_times_sampled_) -
    reinterpret_cast<char*>(&sampler_options_)) + sizeof(max_times_sampled_));
}

TableInfo::~TableInfo() {
  // @@protoc_insertion_point(destructor:DRPB.TableInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TableInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sampler_options_;
  if (this != internal_default_instance()) delete remover_options_;
  if (this != internal_default_instance()) delete rate_limiter_info_;
  if (this != internal_default_instance()) delete signature_;
}

void TableInfo::ArenaDtor(void* object) {
  TableInfo* _this = reinterpret_cast< TableInfo* >(object);
  (void)_this;
}
void TableInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TableInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TableInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && sampler_options_ != nullptr) {
    delete sampler_options_;
  }
  sampler_options_ = nullptr;
  if (GetArena() == nullptr && remover_options_ != nullptr) {
    delete remover_options_;
  }
  remover_options_ = nullptr;
  if (GetArena() == nullptr && rate_limiter_info_ != nullptr) {
    delete rate_limiter_info_;
  }
  rate_limiter_info_ = nullptr;
  if (GetArena() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  ::memset(&max_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_times_sampled_) -
      reinterpret_cast<char*>(&max_size_)) + sizeof(max_times_sampled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.KeyDistributionOptions sampler_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampler_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.KeyDistributionOptions remover_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remover_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 max_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_times_sampled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_times_sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.RateLimiterInfo rate_limiter_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rate_limiter_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.StructuredValue signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 current_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          current_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.TableInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_episodes = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          num_episodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_deleted_episodes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          num_deleted_episodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 num_unique_samples = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          num_unique_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TableInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TableInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.KeyDistributionOptions sampler_options = 1;
  if (this->has_sampler_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::sampler_options(this), target, stream);
  }

  // .DRPB.KeyDistributionOptions remover_options = 2;
  if (this->has_remover_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::remover_options(this), target, stream);
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_max_size(), target);
  }

  // int32 max_times_sampled = 4;
  if (this->max_times_sampled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_times_sampled(), target);
  }

  // .DRPB.RateLimiterInfo rate_limiter_info = 5;
  if (this->has_rate_limiter_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rate_limiter_info(this), target, stream);
  }

  // .DRPB.StructuredValue signature = 6;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::signature(this), target, stream);
  }

  // int64 current_size = 7;
  if (this->current_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_current_size(), target);
  }

  // string name = 8;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.TableInfo.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // int64 num_episodes = 9;
  if (this->num_episodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(9, this->_internal_num_episodes(), target);
  }

  // int64 num_deleted_episodes = 10;
  if (this->num_deleted_episodes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_num_deleted_episodes(), target);
  }

  // int64 num_unique_samples = 11;
  if (this->num_unique_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(11, this->_internal_num_unique_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TableInfo)
  return target;
}

size_t TableInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TableInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 8;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .DRPB.KeyDistributionOptions sampler_options = 1;
  if (this->has_sampler_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sampler_options_);
  }

  // .DRPB.KeyDistributionOptions remover_options = 2;
  if (this->has_remover_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remover_options_);
  }

  // .DRPB.RateLimiterInfo rate_limiter_info = 5;
  if (this->has_rate_limiter_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rate_limiter_info_);
  }

  // .DRPB.StructuredValue signature = 6;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // int64 max_size = 3;
  if (this->max_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_size());
  }

  // int64 current_size = 7;
  if (this->current_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_current_size());
  }

  // int64 num_episodes = 9;
  if (this->num_episodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_episodes());
  }

  // int64 num_deleted_episodes = 10;
  if (this->num_deleted_episodes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_deleted_episodes());
  }

  // int64 num_unique_samples = 11;
  if (this->num_unique_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_num_unique_samples());
  }

  // int32 max_times_sampled = 4;
  if (this->max_times_sampled() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_times_sampled());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TableInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TableInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TableInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TableInfo)
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TableInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_sampler_options()) {
    _internal_mutable_sampler_options()->::DRPB::KeyDistributionOptions::MergeFrom(from._internal_sampler_options());
  }
  if (from.has_remover_options()) {
    _internal_mutable_remover_options()->::DRPB::KeyDistributionOptions::MergeFrom(from._internal_remover_options());
  }
  if (from.has_rate_limiter_info()) {
    _internal_mutable_rate_limiter_info()->::DRPB::RateLimiterInfo::MergeFrom(from._internal_rate_limiter_info());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::DRPB::StructuredValue::MergeFrom(from._internal_signature());
  }
  if (from.max_size() != 0) {
    _internal_set_max_size(from._internal_max_size());
  }
  if (from.current_size() != 0) {
    _internal_set_current_size(from._internal_current_size());
  }
  if (from.num_episodes() != 0) {
    _internal_set_num_episodes(from._internal_num_episodes());
  }
  if (from.num_deleted_episodes() != 0) {
    _internal_set_num_deleted_episodes(from._internal_num_deleted_episodes());
  }
  if (from.num_unique_samples() != 0) {
    _internal_set_num_unique_samples(from._internal_num_unique_samples());
  }
  if (from.max_times_sampled() != 0) {
    _internal_set_max_times_sampled(from._internal_max_times_sampled());
  }
}

void TableInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TableInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {
  return true;
}

void TableInfo::InternalSwap(TableInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableInfo, max_times_sampled_)
      + sizeof(TableInfo::max_times_sampled_)
      - PROTOBUF_FIELD_OFFSET(TableInfo, sampler_options_)>(
          reinterpret_cast<char*>(&sampler_options_),
          reinterpret_cast<char*>(&other->sampler_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StructuredValue::_Internal {
 public:
  static const ::DRPB::NoneValue& none_value(const StructuredValue* msg);
  static const ::DRPB::TensorShapeProto& tensor_shape_value(const StructuredValue* msg);
  static const ::DRPB::TensorSpecProto& tensor_spec_value(const StructuredValue* msg);
  static const ::DRPB::TypeSpecProto& type_spec_value(const StructuredValue* msg);
  static const ::DRPB::BoundedTensorSpecProto& bounded_tensor_spec_value(const StructuredValue* msg);
  static const ::DRPB::ListValue& list_value(const StructuredValue* msg);
  static const ::DRPB::TupleValue& tuple_value(const StructuredValue* msg);
  static const ::DRPB::DictValue& dict_value(const StructuredValue* msg);
  static const ::DRPB::NamedTupleValue& named_tuple_value(const StructuredValue* msg);
};

const ::DRPB::NoneValue&
StructuredValue::_Internal::none_value(const StructuredValue* msg) {
  return *msg->kind_.none_value_;
}
const ::DRPB::TensorShapeProto&
StructuredValue::_Internal::tensor_shape_value(const StructuredValue* msg) {
  return *msg->kind_.tensor_shape_value_;
}
const ::DRPB::TensorSpecProto&
StructuredValue::_Internal::tensor_spec_value(const StructuredValue* msg) {
  return *msg->kind_.tensor_spec_value_;
}
const ::DRPB::TypeSpecProto&
StructuredValue::_Internal::type_spec_value(const StructuredValue* msg) {
  return *msg->kind_.type_spec_value_;
}
const ::DRPB::BoundedTensorSpecProto&
StructuredValue::_Internal::bounded_tensor_spec_value(const StructuredValue* msg) {
  return *msg->kind_.bounded_tensor_spec_value_;
}
const ::DRPB::ListValue&
StructuredValue::_Internal::list_value(const StructuredValue* msg) {
  return *msg->kind_.list_value_;
}
const ::DRPB::TupleValue&
StructuredValue::_Internal::tuple_value(const StructuredValue* msg) {
  return *msg->kind_.tuple_value_;
}
const ::DRPB::DictValue&
StructuredValue::_Internal::dict_value(const StructuredValue* msg) {
  return *msg->kind_.dict_value_;
}
const ::DRPB::NamedTupleValue&
StructuredValue::_Internal::named_tuple_value(const StructuredValue* msg) {
  return *msg->kind_.named_tuple_value_;
}
void StructuredValue::set_allocated_none_value(::DRPB::NoneValue* none_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (none_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(none_value);
    if (message_arena != submessage_arena) {
      none_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none_value, submessage_arena);
    }
    set_has_none_value();
    kind_.none_value_ = none_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.none_value)
}
void StructuredValue::set_allocated_tensor_shape_value(::DRPB::TensorShapeProto* tensor_shape_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (tensor_shape_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor_shape_value);
    if (message_arena != submessage_arena) {
      tensor_shape_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape_value, submessage_arena);
    }
    set_has_tensor_shape_value();
    kind_.tensor_shape_value_ = tensor_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.tensor_shape_value)
}
void StructuredValue::set_allocated_tensor_spec_value(::DRPB::TensorSpecProto* tensor_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (tensor_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor_spec_value);
    if (message_arena != submessage_arena) {
      tensor_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_spec_value, submessage_arena);
    }
    set_has_tensor_spec_value();
    kind_.tensor_spec_value_ = tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.tensor_spec_value)
}
void StructuredValue::set_allocated_type_spec_value(::DRPB::TypeSpecProto* type_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (type_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type_spec_value);
    if (message_arena != submessage_arena) {
      type_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec_value, submessage_arena);
    }
    set_has_type_spec_value();
    kind_.type_spec_value_ = type_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.type_spec_value)
}
void StructuredValue::set_allocated_bounded_tensor_spec_value(::DRPB::BoundedTensorSpecProto* bounded_tensor_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (bounded_tensor_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bounded_tensor_spec_value);
    if (message_arena != submessage_arena) {
      bounded_tensor_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounded_tensor_spec_value, submessage_arena);
    }
    set_has_bounded_tensor_spec_value();
    kind_.bounded_tensor_spec_value_ = bounded_tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.bounded_tensor_spec_value)
}
void StructuredValue::set_allocated_list_value(::DRPB::ListValue* list_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (list_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_value);
    if (message_arena != submessage_arena) {
      list_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value, submessage_arena);
    }
    set_has_list_value();
    kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.list_value)
}
void StructuredValue::set_allocated_tuple_value(::DRPB::TupleValue* tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuple_value);
    if (message_arena != submessage_arena) {
      tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple_value, submessage_arena);
    }
    set_has_tuple_value();
    kind_.tuple_value_ = tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.tuple_value)
}
void StructuredValue::set_allocated_dict_value(::DRPB::DictValue* dict_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (dict_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dict_value);
    if (message_arena != submessage_arena) {
      dict_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict_value, submessage_arena);
    }
    set_has_dict_value();
    kind_.dict_value_ = dict_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.dict_value)
}
void StructuredValue::set_allocated_named_tuple_value(::DRPB::NamedTupleValue* named_tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_kind();
  if (named_tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(named_tuple_value);
    if (message_arena != submessage_arena) {
      named_tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_tuple_value, submessage_arena);
    }
    set_has_named_tuple_value();
    kind_.named_tuple_value_ = named_tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.StructuredValue.named_tuple_value)
}
StructuredValue::StructuredValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.StructuredValue)
}
StructuredValue::StructuredValue(const StructuredValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNoneValue: {
      _internal_mutable_none_value()->::DRPB::NoneValue::MergeFrom(from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _internal_mutable_tensor_shape_value()->::DRPB::TensorShapeProto::MergeFrom(from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _internal_mutable_tensor_spec_value()->::DRPB::TensorSpecProto::MergeFrom(from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _internal_mutable_type_spec_value()->::DRPB::TypeSpecProto::MergeFrom(from._internal_type_spec_value());
      break;
    }
    case kBoundedTensorSpecValue: {
      _internal_mutable_bounded_tensor_spec_value()->::DRPB::BoundedTensorSpecProto::MergeFrom(from._internal_bounded_tensor_spec_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::DRPB::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _internal_mutable_tuple_value()->::DRPB::TupleValue::MergeFrom(from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _internal_mutable_dict_value()->::DRPB::DictValue::MergeFrom(from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _internal_mutable_named_tuple_value()->::DRPB::NamedTupleValue::MergeFrom(from._internal_named_tuple_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DRPB.StructuredValue)
}

void StructuredValue::SharedCtor() {
clear_has_kind();
}

StructuredValue::~StructuredValue() {
  // @@protoc_insertion_point(destructor:DRPB.StructuredValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StructuredValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void StructuredValue::ArenaDtor(void* object) {
  StructuredValue* _this = reinterpret_cast< StructuredValue* >(object);
  (void)_this;
}
void StructuredValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StructuredValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StructuredValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:DRPB.StructuredValue)
  switch (kind_case()) {
    case kNoneValue: {
      if (GetArena() == nullptr) {
        delete kind_.none_value_;
      }
      break;
    }
    case kFloat64Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      kind_.string_value_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kTensorShapeValue: {
      if (GetArena() == nullptr) {
        delete kind_.tensor_shape_value_;
      }
      break;
    }
    case kTensorDtypeValue: {
      // No need to clear
      break;
    }
    case kTensorSpecValue: {
      if (GetArena() == nullptr) {
        delete kind_.tensor_spec_value_;
      }
      break;
    }
    case kTypeSpecValue: {
      if (GetArena() == nullptr) {
        delete kind_.type_spec_value_;
      }
      break;
    }
    case kBoundedTensorSpecValue: {
      if (GetArena() == nullptr) {
        delete kind_.bounded_tensor_spec_value_;
      }
      break;
    }
    case kListValue: {
      if (GetArena() == nullptr) {
        delete kind_.list_value_;
      }
      break;
    }
    case kTupleValue: {
      if (GetArena() == nullptr) {
        delete kind_.tuple_value_;
      }
      break;
    }
    case kDictValue: {
      if (GetArena() == nullptr) {
        delete kind_.dict_value_;
      }
      break;
    }
    case kNamedTupleValue: {
      if (GetArena() == nullptr) {
        delete kind_.named_tuple_value_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void StructuredValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.StructuredValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.NoneValue none_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_none_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double float64_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_float64_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // sint64 int64_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.StructuredValue.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorShapeProto tensor_shape_value = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.DataType tensor_dtype_value = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_dtype_value(static_cast<::DRPB::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorSpecProto tensor_spec_value = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_spec_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TypeSpecProto type_spec_value = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounded_tensor_spec_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.ListValue list_value = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TupleValue tuple_value = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.DictValue dict_value = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dict_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.NamedTupleValue named_tuple_value = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_tuple_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StructuredValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.StructuredValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.NoneValue none_value = 1;
  if (_internal_has_none_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::none_value(this), target, stream);
  }

  // double float64_value = 11;
  if (_internal_has_float64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_float64_value(), target);
  }

  // sint64 int64_value = 12;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(12, this->_internal_int64_value(), target);
  }

  // string string_value = 13;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.StructuredValue.string_value");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_string_value(), target);
  }

  // bool bool_value = 14;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_bool_value(), target);
  }

  // .DRPB.TensorShapeProto tensor_shape_value = 31;
  if (_internal_has_tensor_shape_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::tensor_shape_value(this), target, stream);
  }

  // .DRPB.DataType tensor_dtype_value = 32;
  if (_internal_has_tensor_dtype_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      32, this->_internal_tensor_dtype_value(), target);
  }

  // .DRPB.TensorSpecProto tensor_spec_value = 33;
  if (_internal_has_tensor_spec_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::tensor_spec_value(this), target, stream);
  }

  // .DRPB.TypeSpecProto type_spec_value = 34;
  if (_internal_has_type_spec_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::type_spec_value(this), target, stream);
  }

  // .DRPB.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
  if (_internal_has_bounded_tensor_spec_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::bounded_tensor_spec_value(this), target, stream);
  }

  // .DRPB.ListValue list_value = 51;
  if (_internal_has_list_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        51, _Internal::list_value(this), target, stream);
  }

  // .DRPB.TupleValue tuple_value = 52;
  if (_internal_has_tuple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        52, _Internal::tuple_value(this), target, stream);
  }

  // .DRPB.DictValue dict_value = 53;
  if (_internal_has_dict_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        53, _Internal::dict_value(this), target, stream);
  }

  // .DRPB.NamedTupleValue named_tuple_value = 54;
  if (_internal_has_named_tuple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        54, _Internal::named_tuple_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.StructuredValue)
  return target;
}

size_t StructuredValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.StructuredValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .DRPB.NoneValue none_value = 1;
    case kNoneValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.none_value_);
      break;
    }
    // double float64_value = 11;
    case kFloat64Value: {
      total_size += 1 + 8;
      break;
    }
    // sint64 int64_value = 12;
    case kInt64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_int64_value());
      break;
    }
    // string string_value = 13;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 14;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .DRPB.TensorShapeProto tensor_shape_value = 31;
    case kTensorShapeValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tensor_shape_value_);
      break;
    }
    // .DRPB.DataType tensor_dtype_value = 32;
    case kTensorDtypeValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tensor_dtype_value());
      break;
    }
    // .DRPB.TensorSpecProto tensor_spec_value = 33;
    case kTensorSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tensor_spec_value_);
      break;
    }
    // .DRPB.TypeSpecProto type_spec_value = 34;
    case kTypeSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.type_spec_value_);
      break;
    }
    // .DRPB.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
    case kBoundedTensorSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.bounded_tensor_spec_value_);
      break;
    }
    // .DRPB.ListValue list_value = 51;
    case kListValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.list_value_);
      break;
    }
    // .DRPB.TupleValue tuple_value = 52;
    case kTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.tuple_value_);
      break;
    }
    // .DRPB.DictValue dict_value = 53;
    case kDictValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.dict_value_);
      break;
    }
    // .DRPB.NamedTupleValue named_tuple_value = 54;
    case kNamedTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.named_tuple_value_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StructuredValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.StructuredValue)
  GOOGLE_DCHECK_NE(&from, this);
  const StructuredValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StructuredValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.StructuredValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.StructuredValue)
    MergeFrom(*source);
  }
}

void StructuredValue::MergeFrom(const StructuredValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.StructuredValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNoneValue: {
      _internal_mutable_none_value()->::DRPB::NoneValue::MergeFrom(from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _internal_mutable_tensor_shape_value()->::DRPB::TensorShapeProto::MergeFrom(from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _internal_mutable_tensor_spec_value()->::DRPB::TensorSpecProto::MergeFrom(from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _internal_mutable_type_spec_value()->::DRPB::TypeSpecProto::MergeFrom(from._internal_type_spec_value());
      break;
    }
    case kBoundedTensorSpecValue: {
      _internal_mutable_bounded_tensor_spec_value()->::DRPB::BoundedTensorSpecProto::MergeFrom(from._internal_bounded_tensor_spec_value());
      break;
    }
    case kListValue: {
      _internal_mutable_list_value()->::DRPB::ListValue::MergeFrom(from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _internal_mutable_tuple_value()->::DRPB::TupleValue::MergeFrom(from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _internal_mutable_dict_value()->::DRPB::DictValue::MergeFrom(from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _internal_mutable_named_tuple_value()->::DRPB::NamedTupleValue::MergeFrom(from._internal_named_tuple_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void StructuredValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.StructuredValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StructuredValue::CopyFrom(const StructuredValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.StructuredValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredValue::IsInitialized() const {
  return true;
}

void StructuredValue::InternalSwap(StructuredValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NoneValue::_Internal {
 public:
};

NoneValue::NoneValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.NoneValue)
}
NoneValue::NoneValue(const NoneValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DRPB.NoneValue)
}

void NoneValue::SharedCtor() {
}

NoneValue::~NoneValue() {
  // @@protoc_insertion_point(destructor:DRPB.NoneValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoneValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NoneValue::ArenaDtor(void* object) {
  NoneValue* _this = reinterpret_cast< NoneValue* >(object);
  (void)_this;
}
void NoneValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoneValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NoneValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.NoneValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoneValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoneValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.NoneValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.NoneValue)
  return target;
}

size_t NoneValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.NoneValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoneValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.NoneValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NoneValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoneValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.NoneValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.NoneValue)
    MergeFrom(*source);
  }
}

void NoneValue::MergeFrom(const NoneValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.NoneValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void NoneValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.NoneValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoneValue::CopyFrom(const NoneValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.NoneValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoneValue::IsInitialized() const {
  return true;
}

void NoneValue::InternalSwap(NoneValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NoneValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ListValue::_Internal {
 public:
};

ListValue::ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.ListValue)
}
ListValue::ListValue(const ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DRPB.ListValue)
}

void ListValue::SharedCtor() {
}

ListValue::~ListValue() {
  // @@protoc_insertion_point(destructor:DRPB.ListValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListValue::ArenaDtor(void* object) {
  ListValue* _this = reinterpret_cast< ListValue* >(object);
  (void)_this;
}
void ListValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.ListValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.StructuredValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.ListValue)
  return target;
}

size_t ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.ListValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  const ListValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.ListValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.ListValue)
    MergeFrom(*source);
  }
}

void ListValue::MergeFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.ListValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void ListValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListValue::CopyFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValue::IsInitialized() const {
  return true;
}

void ListValue::InternalSwap(ListValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TupleValue::_Internal {
 public:
};

TupleValue::TupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TupleValue)
}
TupleValue::TupleValue(const TupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DRPB.TupleValue)
}

void TupleValue::SharedCtor() {
}

TupleValue::~TupleValue() {
  // @@protoc_insertion_point(destructor:DRPB.TupleValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TupleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TupleValue::ArenaDtor(void* object) {
  TupleValue* _this = reinterpret_cast< TupleValue* >(object);
  (void)_this;
}
void TupleValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TupleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DRPB.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TupleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DRPB.StructuredValue values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TupleValue)
  return target;
}

size_t TupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TupleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TupleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const TupleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TupleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TupleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TupleValue)
    MergeFrom(*source);
  }
}

void TupleValue::MergeFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void TupleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TupleValue::CopyFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleValue::IsInitialized() const {
  return true;
}

void TupleValue::InternalSwap(TupleValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse() {}
DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DictValue_FieldsEntry_DoNotUse::MergeFrom(const DictValue_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DictValue_FieldsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void DictValue_FieldsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class DictValue::_Internal {
 public:
};

DictValue::DictValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fields_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.DictValue)
}
DictValue::DictValue(const DictValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fields_.MergeFrom(from.fields_);
  // @@protoc_insertion_point(copy_constructor:DRPB.DictValue)
}

void DictValue::SharedCtor() {
}

DictValue::~DictValue() {
  // @@protoc_insertion_point(destructor:DRPB.DictValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DictValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DictValue::ArenaDtor(void* object) {
  DictValue* _this = reinterpret_cast< DictValue* >(object);
  (void)_this;
}
void DictValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DictValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DictValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.DictValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .DRPB.StructuredValue> fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DictValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.DictValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .DRPB.StructuredValue> fields = 1;
  if (!this->_internal_fields().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "DRPB.DictValue.FieldsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_fields().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_fields().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = DictValue_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >::const_iterator
          it = this->_internal_fields().begin();
          it != this->_internal_fields().end(); ++it) {
        target = DictValue_FieldsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.DictValue)
  return target;
}

size_t DictValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.DictValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .DRPB.StructuredValue> fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::DRPB::StructuredValue >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += DictValue_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  const DictValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DictValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.DictValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.DictValue)
    MergeFrom(*source);
  }
}

void DictValue::MergeFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.DictValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
}

void DictValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictValue::CopyFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictValue::IsInitialized() const {
  return true;
}

void DictValue::InternalSwap(DictValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fields_.Swap(&other->fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PairValue::_Internal {
 public:
  static const ::DRPB::StructuredValue& value(const PairValue* msg);
};

const ::DRPB::StructuredValue&
PairValue::_Internal::value(const PairValue* msg) {
  return *msg->value_;
}
PairValue::PairValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.PairValue)
}
PairValue::PairValue(const PairValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_value()) {
    value_ = new ::DRPB::StructuredValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DRPB.PairValue)
}

void PairValue::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
value_ = nullptr;
}

PairValue::~PairValue() {
  // @@protoc_insertion_point(destructor:DRPB.PairValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PairValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void PairValue::ArenaDtor(void* object) {
  PairValue* _this = reinterpret_cast< PairValue* >(object);
  (void)_this;
}
void PairValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PairValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PairValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.PairValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PairValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.PairValue.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.StructuredValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PairValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.PairValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.PairValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .DRPB.StructuredValue value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.PairValue)
  return target;
}

size_t PairValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.PairValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .DRPB.StructuredValue value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PairValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.PairValue)
  GOOGLE_DCHECK_NE(&from, this);
  const PairValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PairValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.PairValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.PairValue)
    MergeFrom(*source);
  }
}

void PairValue::MergeFrom(const PairValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.PairValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::DRPB::StructuredValue::MergeFrom(from._internal_value());
  }
}

void PairValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.PairValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PairValue::CopyFrom(const PairValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.PairValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValue::IsInitialized() const {
  return true;
}

void PairValue::InternalSwap(PairValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class NamedTupleValue::_Internal {
 public:
};

NamedTupleValue::NamedTupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.NamedTupleValue)
}
NamedTupleValue::NamedTupleValue(const NamedTupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:DRPB.NamedTupleValue)
}

void NamedTupleValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NamedTupleValue::~NamedTupleValue() {
  // @@protoc_insertion_point(destructor:DRPB.NamedTupleValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NamedTupleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NamedTupleValue::ArenaDtor(void* object) {
  NamedTupleValue* _this = reinterpret_cast< NamedTupleValue* >(object);
  (void)_this;
}
void NamedTupleValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NamedTupleValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NamedTupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.NamedTupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedTupleValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.NamedTupleValue.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .DRPB.PairValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NamedTupleValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.NamedTupleValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.NamedTupleValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .DRPB.PairValue values = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_values_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_values(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.NamedTupleValue)
  return target;
}

size_t NamedTupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.NamedTupleValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DRPB.PairValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NamedTupleValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.NamedTupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NamedTupleValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NamedTupleValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.NamedTupleValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.NamedTupleValue)
    MergeFrom(*source);
  }
}

void NamedTupleValue::MergeFrom(const NamedTupleValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.NamedTupleValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void NamedTupleValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.NamedTupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NamedTupleValue::CopyFrom(const NamedTupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.NamedTupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedTupleValue::IsInitialized() const {
  return true;
}

void NamedTupleValue::InternalSwap(NamedTupleValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedTupleValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TensorSpecProto::_Internal {
 public:
  static const ::DRPB::TensorShapeProto& shape(const TensorSpecProto* msg);
};

const ::DRPB::TensorShapeProto&
TensorSpecProto::_Internal::shape(const TensorSpecProto* msg) {
  return *msg->shape_;
}
TensorSpecProto::TensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TensorSpecProto)
}
TensorSpecProto::TensorSpecProto(const TensorSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::DRPB::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:DRPB.TensorSpecProto)
}

void TensorSpecProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

TensorSpecProto::~TensorSpecProto() {
  // @@protoc_insertion_point(destructor:DRPB.TensorSpecProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TensorSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
}

void TensorSpecProto::ArenaDtor(void* object) {
  TensorSpecProto* _this = reinterpret_cast< TensorSpecProto* >(object);
  (void)_this;
}
void TensorSpecProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TensorSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TensorSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.TensorSpecProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::DRPB::DataType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TensorSpecProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.TensorSpecProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // .DRPB.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TensorSpecProto)
  return target;
}

size_t TensorSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TensorSpecProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .DRPB.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TensorSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TensorSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TensorSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TensorSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TensorSpecProto)
    MergeFrom(*source);
  }
}

void TensorSpecProto::MergeFrom(const TensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::DRPB::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void TensorSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorSpecProto::CopyFrom(const TensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorSpecProto::IsInitialized() const {
  return true;
}

void TensorSpecProto::InternalSwap(TensorSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorSpecProto, dtype_)
      + sizeof(TensorSpecProto::dtype_)
      - PROTOBUF_FIELD_OFFSET(TensorSpecProto, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BoundedTensorSpecProto::_Internal {
 public:
  static const ::DRPB::TensorShapeProto& shape(const BoundedTensorSpecProto* msg);
  static const ::DRPB::TensorProto& minimum(const BoundedTensorSpecProto* msg);
  static const ::DRPB::TensorProto& maximum(const BoundedTensorSpecProto* msg);
};

const ::DRPB::TensorShapeProto&
BoundedTensorSpecProto::_Internal::shape(const BoundedTensorSpecProto* msg) {
  return *msg->shape_;
}
const ::DRPB::TensorProto&
BoundedTensorSpecProto::_Internal::minimum(const BoundedTensorSpecProto* msg) {
  return *msg->minimum_;
}
const ::DRPB::TensorProto&
BoundedTensorSpecProto::_Internal::maximum(const BoundedTensorSpecProto* msg) {
  return *msg->maximum_;
}
BoundedTensorSpecProto::BoundedTensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.BoundedTensorSpecProto)
}
BoundedTensorSpecProto::BoundedTensorSpecProto(const BoundedTensorSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_shape()) {
    shape_ = new ::DRPB::TensorShapeProto(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  if (from._internal_has_minimum()) {
    minimum_ = new ::DRPB::TensorProto(*from.minimum_);
  } else {
    minimum_ = nullptr;
  }
  if (from._internal_has_maximum()) {
    maximum_ = new ::DRPB::TensorProto(*from.maximum_);
  } else {
    maximum_ = nullptr;
  }
  dtype_ = from.dtype_;
  // @@protoc_insertion_point(copy_constructor:DRPB.BoundedTensorSpecProto)
}

void BoundedTensorSpecProto::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&shape_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dtype_) -
    reinterpret_cast<char*>(&shape_)) + sizeof(dtype_));
}

BoundedTensorSpecProto::~BoundedTensorSpecProto() {
  // @@protoc_insertion_point(destructor:DRPB.BoundedTensorSpecProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundedTensorSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shape_;
  if (this != internal_default_instance()) delete minimum_;
  if (this != internal_default_instance()) delete maximum_;
}

void BoundedTensorSpecProto::ArenaDtor(void* object) {
  BoundedTensorSpecProto* _this = reinterpret_cast< BoundedTensorSpecProto* >(object);
  (void)_this;
}
void BoundedTensorSpecProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundedTensorSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoundedTensorSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.BoundedTensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && shape_ != nullptr) {
    delete shape_;
  }
  shape_ = nullptr;
  if (GetArena() == nullptr && minimum_ != nullptr) {
    delete minimum_;
  }
  minimum_ = nullptr;
  if (GetArena() == nullptr && maximum_ != nullptr) {
    delete maximum_;
  }
  maximum_ = nullptr;
  dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundedTensorSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.BoundedTensorSpecProto.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::DRPB::DataType>(val));
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorProto minimum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.TensorProto maximum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundedTensorSpecProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.BoundedTensorSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.BoundedTensorSpecProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::shape(this), target, stream);
  }

  // .DRPB.DataType dtype = 3;
  if (this->dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  // .DRPB.TensorProto minimum = 4;
  if (this->has_minimum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::minimum(this), target, stream);
  }

  // .DRPB.TensorProto maximum = 5;
  if (this->has_maximum()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::maximum(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.BoundedTensorSpecProto)
  return target;
}

size_t BoundedTensorSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.BoundedTensorSpecProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .DRPB.TensorShapeProto shape = 2;
  if (this->has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shape_);
  }

  // .DRPB.TensorProto minimum = 4;
  if (this->has_minimum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *minimum_);
  }

  // .DRPB.TensorProto maximum = 5;
  if (this->has_maximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *maximum_);
  }

  // .DRPB.DataType dtype = 3;
  if (this->dtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundedTensorSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.BoundedTensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundedTensorSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundedTensorSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.BoundedTensorSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.BoundedTensorSpecProto)
    MergeFrom(*source);
  }
}

void BoundedTensorSpecProto::MergeFrom(const BoundedTensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.BoundedTensorSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_shape()) {
    _internal_mutable_shape()->::DRPB::TensorShapeProto::MergeFrom(from._internal_shape());
  }
  if (from.has_minimum()) {
    _internal_mutable_minimum()->::DRPB::TensorProto::MergeFrom(from._internal_minimum());
  }
  if (from.has_maximum()) {
    _internal_mutable_maximum()->::DRPB::TensorProto::MergeFrom(from._internal_maximum());
  }
  if (from.dtype() != 0) {
    _internal_set_dtype(from._internal_dtype());
  }
}

void BoundedTensorSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.BoundedTensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundedTensorSpecProto::CopyFrom(const BoundedTensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.BoundedTensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundedTensorSpecProto::IsInitialized() const {
  return true;
}

void BoundedTensorSpecProto::InternalSwap(BoundedTensorSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundedTensorSpecProto, dtype_)
      + sizeof(BoundedTensorSpecProto::dtype_)
      - PROTOBUF_FIELD_OFFSET(BoundedTensorSpecProto, shape_)>(
          reinterpret_cast<char*>(&shape_),
          reinterpret_cast<char*>(&other->shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundedTensorSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TypeSpecProto::_Internal {
 public:
  static const ::DRPB::StructuredValue& type_state(const TypeSpecProto* msg);
};

const ::DRPB::StructuredValue&
TypeSpecProto::_Internal::type_state(const TypeSpecProto* msg) {
  return *msg->type_state_;
}
TypeSpecProto::TypeSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.TypeSpecProto)
}
TypeSpecProto::TypeSpecProto(const TypeSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_spec_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type_spec_class_name().empty()) {
    type_spec_class_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_spec_class_name(), 
      GetArena());
  }
  if (from._internal_has_type_state()) {
    type_state_ = new ::DRPB::StructuredValue(*from.type_state_);
  } else {
    type_state_ = nullptr;
  }
  type_spec_class_ = from.type_spec_class_;
  // @@protoc_insertion_point(copy_constructor:DRPB.TypeSpecProto)
}

void TypeSpecProto::SharedCtor() {
type_spec_class_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_state_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_spec_class_) -
    reinterpret_cast<char*>(&type_state_)) + sizeof(type_spec_class_));
}

TypeSpecProto::~TypeSpecProto() {
  // @@protoc_insertion_point(destructor:DRPB.TypeSpecProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TypeSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_spec_class_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_state_;
}

void TypeSpecProto::ArenaDtor(void* object) {
  TypeSpecProto* _this = reinterpret_cast< TypeSpecProto* >(object);
  (void)_this;
}
void TypeSpecProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeSpecProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.TypeSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_spec_class_name_.ClearToEmpty();
  if (GetArena() == nullptr && type_state_ != nullptr) {
    delete type_state_;
  }
  type_state_ = nullptr;
  type_spec_class_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeSpecProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DRPB.TypeSpecProto.TypeSpecClass type_spec_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_spec_class(static_cast<::DRPB::TypeSpecProto_TypeSpecClass>(val));
        } else goto handle_unusual;
        continue;
      // .DRPB.StructuredValue type_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_spec_class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type_spec_class_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DRPB.TypeSpecProto.type_spec_class_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeSpecProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.TypeSpecProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DRPB.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->type_spec_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_spec_class(), target);
  }

  // .DRPB.StructuredValue type_state = 2;
  if (this->has_type_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type_state(this), target, stream);
  }

  // string type_spec_class_name = 3;
  if (this->type_spec_class_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_spec_class_name().data(), static_cast<int>(this->_internal_type_spec_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DRPB.TypeSpecProto.type_spec_class_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_spec_class_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.TypeSpecProto)
  return target;
}

size_t TypeSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.TypeSpecProto)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_spec_class_name = 3;
  if (this->type_spec_class_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_spec_class_name());
  }

  // .DRPB.StructuredValue type_state = 2;
  if (this->has_type_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_state_);
  }

  // .DRPB.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->type_spec_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_spec_class());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TypeSpecProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.TypeSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  const TypeSpecProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TypeSpecProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.TypeSpecProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.TypeSpecProto)
    MergeFrom(*source);
  }
}

void TypeSpecProto::MergeFrom(const TypeSpecProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.TypeSpecProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type_spec_class_name().size() > 0) {
    _internal_set_type_spec_class_name(from._internal_type_spec_class_name());
  }
  if (from.has_type_state()) {
    _internal_mutable_type_state()->::DRPB::StructuredValue::MergeFrom(from._internal_type_state());
  }
  if (from.type_spec_class() != 0) {
    _internal_set_type_spec_class(from._internal_type_spec_class());
  }
}

void TypeSpecProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.TypeSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeSpecProto::CopyFrom(const TypeSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.TypeSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeSpecProto::IsInitialized() const {
  return true;
}

void TypeSpecProto::InternalSwap(TypeSpecProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_spec_class_name_.Swap(&other->type_spec_class_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeSpecProto, type_spec_class_)
      + sizeof(TypeSpecProto::type_spec_class_)
      - PROTOBUF_FIELD_OFFSET(TypeSpecProto, type_state_)>(
          reinterpret_cast<char*>(&type_state_),
          reinterpret_cast<char*>(&other->type_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeSpecProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RateLimiterCallStats::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& completed_wait_time(const RateLimiterCallStats* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& pending_wait_time(const RateLimiterCallStats* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
RateLimiterCallStats::_Internal::completed_wait_time(const RateLimiterCallStats* msg) {
  return *msg->completed_wait_time_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
RateLimiterCallStats::_Internal::pending_wait_time(const RateLimiterCallStats* msg) {
  return *msg->pending_wait_time_;
}
void RateLimiterCallStats::clear_completed_wait_time() {
  if (GetArena() == nullptr && completed_wait_time_ != nullptr) {
    delete completed_wait_time_;
  }
  completed_wait_time_ = nullptr;
}
void RateLimiterCallStats::clear_pending_wait_time() {
  if (GetArena() == nullptr && pending_wait_time_ != nullptr) {
    delete pending_wait_time_;
  }
  pending_wait_time_ = nullptr;
}
RateLimiterCallStats::RateLimiterCallStats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.RateLimiterCallStats)
}
RateLimiterCallStats::RateLimiterCallStats(const RateLimiterCallStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_completed_wait_time()) {
    completed_wait_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.completed_wait_time_);
  } else {
    completed_wait_time_ = nullptr;
  }
  if (from._internal_has_pending_wait_time()) {
    pending_wait_time_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.pending_wait_time_);
  } else {
    pending_wait_time_ = nullptr;
  }
  ::memcpy(&pending_, &from.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&limited_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(limited_));
  // @@protoc_insertion_point(copy_constructor:DRPB.RateLimiterCallStats)
}

void RateLimiterCallStats::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&completed_wait_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&limited_) -
    reinterpret_cast<char*>(&completed_wait_time_)) + sizeof(limited_));
}

RateLimiterCallStats::~RateLimiterCallStats() {
  // @@protoc_insertion_point(destructor:DRPB.RateLimiterCallStats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RateLimiterCallStats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete completed_wait_time_;
  if (this != internal_default_instance()) delete pending_wait_time_;
}

void RateLimiterCallStats::ArenaDtor(void* object) {
  RateLimiterCallStats* _this = reinterpret_cast< RateLimiterCallStats* >(object);
  (void)_this;
}
void RateLimiterCallStats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateLimiterCallStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateLimiterCallStats::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.RateLimiterCallStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && completed_wait_time_ != nullptr) {
    delete completed_wait_time_;
  }
  completed_wait_time_ = nullptr;
  if (GetArena() == nullptr && pending_wait_time_ != nullptr) {
    delete pending_wait_time_;
  }
  pending_wait_time_ = nullptr;
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limited_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(limited_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimiterCallStats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 pending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 completed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 limited = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          limited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration completed_wait_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_completed_wait_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration pending_wait_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pending_wait_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RateLimiterCallStats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.RateLimiterCallStats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 pending = 1;
  if (this->pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_pending(), target);
  }

  // int64 completed = 2;
  if (this->completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_completed(), target);
  }

  // int64 limited = 3;
  if (this->limited() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_limited(), target);
  }

  // .google.protobuf.Duration completed_wait_time = 4;
  if (this->has_completed_wait_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::completed_wait_time(this), target, stream);
  }

  // .google.protobuf.Duration pending_wait_time = 5;
  if (this->has_pending_wait_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pending_wait_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.RateLimiterCallStats)
  return target;
}

size_t RateLimiterCallStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.RateLimiterCallStats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration completed_wait_time = 4;
  if (this->has_completed_wait_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *completed_wait_time_);
  }

  // .google.protobuf.Duration pending_wait_time = 5;
  if (this->has_pending_wait_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pending_wait_time_);
  }

  // int64 pending = 1;
  if (this->pending() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pending());
  }

  // int64 completed = 2;
  if (this->completed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_completed());
  }

  // int64 limited = 3;
  if (this->limited() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_limited());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateLimiterCallStats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.RateLimiterCallStats)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimiterCallStats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RateLimiterCallStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.RateLimiterCallStats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.RateLimiterCallStats)
    MergeFrom(*source);
  }
}

void RateLimiterCallStats::MergeFrom(const RateLimiterCallStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.RateLimiterCallStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_completed_wait_time()) {
    _internal_mutable_completed_wait_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_completed_wait_time());
  }
  if (from.has_pending_wait_time()) {
    _internal_mutable_pending_wait_time()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_pending_wait_time());
  }
  if (from.pending() != 0) {
    _internal_set_pending(from._internal_pending());
  }
  if (from.completed() != 0) {
    _internal_set_completed(from._internal_completed());
  }
  if (from.limited() != 0) {
    _internal_set_limited(from._internal_limited());
  }
}

void RateLimiterCallStats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.RateLimiterCallStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimiterCallStats::CopyFrom(const RateLimiterCallStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.RateLimiterCallStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimiterCallStats::IsInitialized() const {
  return true;
}

void RateLimiterCallStats::InternalSwap(RateLimiterCallStats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateLimiterCallStats, limited_)
      + sizeof(RateLimiterCallStats::limited_)
      - PROTOBUF_FIELD_OFFSET(RateLimiterCallStats, completed_wait_time_)>(
          reinterpret_cast<char*>(&completed_wait_time_),
          reinterpret_cast<char*>(&other->completed_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimiterCallStats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RateLimiterInfo::_Internal {
 public:
  static const ::DRPB::RateLimiterCallStats& insert_stats(const RateLimiterInfo* msg);
  static const ::DRPB::RateLimiterCallStats& sample_stats(const RateLimiterInfo* msg);
};

const ::DRPB::RateLimiterCallStats&
RateLimiterInfo::_Internal::insert_stats(const RateLimiterInfo* msg) {
  return *msg->insert_stats_;
}
const ::DRPB::RateLimiterCallStats&
RateLimiterInfo::_Internal::sample_stats(const RateLimiterInfo* msg) {
  return *msg->sample_stats_;
}
RateLimiterInfo::RateLimiterInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.RateLimiterInfo)
}
RateLimiterInfo::RateLimiterInfo(const RateLimiterInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_insert_stats()) {
    insert_stats_ = new ::DRPB::RateLimiterCallStats(*from.insert_stats_);
  } else {
    insert_stats_ = nullptr;
  }
  if (from._internal_has_sample_stats()) {
    sample_stats_ = new ::DRPB::RateLimiterCallStats(*from.sample_stats_);
  } else {
    sample_stats_ = nullptr;
  }
  ::memcpy(&samples_per_insert_, &from.samples_per_insert_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_size_to_sample_) -
    reinterpret_cast<char*>(&samples_per_insert_)) + sizeof(min_size_to_sample_));
  // @@protoc_insertion_point(copy_constructor:DRPB.RateLimiterInfo)
}

void RateLimiterInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&insert_stats_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_size_to_sample_) -
    reinterpret_cast<char*>(&insert_stats_)) + sizeof(min_size_to_sample_));
}

RateLimiterInfo::~RateLimiterInfo() {
  // @@protoc_insertion_point(destructor:DRPB.RateLimiterInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RateLimiterInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete insert_stats_;
  if (this != internal_default_instance()) delete sample_stats_;
}

void RateLimiterInfo::ArenaDtor(void* object) {
  RateLimiterInfo* _this = reinterpret_cast< RateLimiterInfo* >(object);
  (void)_this;
}
void RateLimiterInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RateLimiterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RateLimiterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.RateLimiterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && insert_stats_ != nullptr) {
    delete insert_stats_;
  }
  insert_stats_ = nullptr;
  if (GetArena() == nullptr && sample_stats_ != nullptr) {
    delete sample_stats_;
  }
  sample_stats_ = nullptr;
  ::memset(&samples_per_insert_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_size_to_sample_) -
      reinterpret_cast<char*>(&samples_per_insert_)) + sizeof(min_size_to_sample_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RateLimiterInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double samples_per_insert = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          samples_per_insert_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double min_diff = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          min_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int64 min_size_to_sample = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          min_size_to_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.RateLimiterCallStats insert_stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.RateLimiterCallStats sample_stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sample_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RateLimiterInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.RateLimiterInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double samples_per_insert = 1;
  if (!(this->samples_per_insert() <= 0 && this->samples_per_insert() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_samples_per_insert(), target);
  }

  // double min_diff = 2;
  if (!(this->min_diff() <= 0 && this->min_diff() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_min_diff(), target);
  }

  // double max_diff = 3;
  if (!(this->max_diff() <= 0 && this->max_diff() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_diff(), target);
  }

  // int64 min_size_to_sample = 4;
  if (this->min_size_to_sample() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_min_size_to_sample(), target);
  }

  // .DRPB.RateLimiterCallStats insert_stats = 5;
  if (this->has_insert_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::insert_stats(this), target, stream);
  }

  // .DRPB.RateLimiterCallStats sample_stats = 6;
  if (this->has_sample_stats()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sample_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.RateLimiterInfo)
  return target;
}

size_t RateLimiterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.RateLimiterInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DRPB.RateLimiterCallStats insert_stats = 5;
  if (this->has_insert_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *insert_stats_);
  }

  // .DRPB.RateLimiterCallStats sample_stats = 6;
  if (this->has_sample_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sample_stats_);
  }

  // double samples_per_insert = 1;
  if (!(this->samples_per_insert() <= 0 && this->samples_per_insert() >= 0)) {
    total_size += 1 + 8;
  }

  // double min_diff = 2;
  if (!(this->min_diff() <= 0 && this->min_diff() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_diff = 3;
  if (!(this->max_diff() <= 0 && this->max_diff() >= 0)) {
    total_size += 1 + 8;
  }

  // int64 min_size_to_sample = 4;
  if (this->min_size_to_sample() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_min_size_to_sample());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RateLimiterInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.RateLimiterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RateLimiterInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RateLimiterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.RateLimiterInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.RateLimiterInfo)
    MergeFrom(*source);
  }
}

void RateLimiterInfo::MergeFrom(const RateLimiterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.RateLimiterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_insert_stats()) {
    _internal_mutable_insert_stats()->::DRPB::RateLimiterCallStats::MergeFrom(from._internal_insert_stats());
  }
  if (from.has_sample_stats()) {
    _internal_mutable_sample_stats()->::DRPB::RateLimiterCallStats::MergeFrom(from._internal_sample_stats());
  }
  if (!(from.samples_per_insert() <= 0 && from.samples_per_insert() >= 0)) {
    _internal_set_samples_per_insert(from._internal_samples_per_insert());
  }
  if (!(from.min_diff() <= 0 && from.min_diff() >= 0)) {
    _internal_set_min_diff(from._internal_min_diff());
  }
  if (!(from.max_diff() <= 0 && from.max_diff() >= 0)) {
    _internal_set_max_diff(from._internal_max_diff());
  }
  if (from.min_size_to_sample() != 0) {
    _internal_set_min_size_to_sample(from._internal_min_size_to_sample());
  }
}

void RateLimiterInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.RateLimiterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RateLimiterInfo::CopyFrom(const RateLimiterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.RateLimiterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RateLimiterInfo::IsInitialized() const {
  return true;
}

void RateLimiterInfo::InternalSwap(RateLimiterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RateLimiterInfo, min_size_to_sample_)
      + sizeof(RateLimiterInfo::min_size_to_sample_)
      - PROTOBUF_FIELD_OFFSET(RateLimiterInfo, insert_stats_)>(
          reinterpret_cast<char*>(&insert_stats_),
          reinterpret_cast<char*>(&other->insert_stats_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RateLimiterInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyDistributionOptions_Prioritized::_Internal {
 public:
};

KeyDistributionOptions_Prioritized::KeyDistributionOptions_Prioritized(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.KeyDistributionOptions.Prioritized)
}
KeyDistributionOptions_Prioritized::KeyDistributionOptions_Prioritized(const KeyDistributionOptions_Prioritized& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  priority_exponent_ = from.priority_exponent_;
  // @@protoc_insertion_point(copy_constructor:DRPB.KeyDistributionOptions.Prioritized)
}

void KeyDistributionOptions_Prioritized::SharedCtor() {
priority_exponent_ = 0;
}

KeyDistributionOptions_Prioritized::~KeyDistributionOptions_Prioritized() {
  // @@protoc_insertion_point(destructor:DRPB.KeyDistributionOptions.Prioritized)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyDistributionOptions_Prioritized::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyDistributionOptions_Prioritized::ArenaDtor(void* object) {
  KeyDistributionOptions_Prioritized* _this = reinterpret_cast< KeyDistributionOptions_Prioritized* >(object);
  (void)_this;
}
void KeyDistributionOptions_Prioritized::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyDistributionOptions_Prioritized::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyDistributionOptions_Prioritized::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.KeyDistributionOptions.Prioritized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  priority_exponent_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDistributionOptions_Prioritized::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double priority_exponent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          priority_exponent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDistributionOptions_Prioritized::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.KeyDistributionOptions.Prioritized)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double priority_exponent = 1;
  if (!(this->priority_exponent() <= 0 && this->priority_exponent() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_priority_exponent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.KeyDistributionOptions.Prioritized)
  return target;
}

size_t KeyDistributionOptions_Prioritized::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.KeyDistributionOptions.Prioritized)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double priority_exponent = 1;
  if (!(this->priority_exponent() <= 0 && this->priority_exponent() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDistributionOptions_Prioritized::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.KeyDistributionOptions.Prioritized)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDistributionOptions_Prioritized* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDistributionOptions_Prioritized>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.KeyDistributionOptions.Prioritized)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.KeyDistributionOptions.Prioritized)
    MergeFrom(*source);
  }
}

void KeyDistributionOptions_Prioritized::MergeFrom(const KeyDistributionOptions_Prioritized& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.KeyDistributionOptions.Prioritized)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.priority_exponent() <= 0 && from.priority_exponent() >= 0)) {
    _internal_set_priority_exponent(from._internal_priority_exponent());
  }
}

void KeyDistributionOptions_Prioritized::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.KeyDistributionOptions.Prioritized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDistributionOptions_Prioritized::CopyFrom(const KeyDistributionOptions_Prioritized& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.KeyDistributionOptions.Prioritized)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDistributionOptions_Prioritized::IsInitialized() const {
  return true;
}

void KeyDistributionOptions_Prioritized::InternalSwap(KeyDistributionOptions_Prioritized* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(priority_exponent_, other->priority_exponent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDistributionOptions_Prioritized::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyDistributionOptions_Heap::_Internal {
 public:
};

KeyDistributionOptions_Heap::KeyDistributionOptions_Heap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.KeyDistributionOptions.Heap)
}
KeyDistributionOptions_Heap::KeyDistributionOptions_Heap(const KeyDistributionOptions_Heap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  min_heap_ = from.min_heap_;
  // @@protoc_insertion_point(copy_constructor:DRPB.KeyDistributionOptions.Heap)
}

void KeyDistributionOptions_Heap::SharedCtor() {
min_heap_ = false;
}

KeyDistributionOptions_Heap::~KeyDistributionOptions_Heap() {
  // @@protoc_insertion_point(destructor:DRPB.KeyDistributionOptions.Heap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyDistributionOptions_Heap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyDistributionOptions_Heap::ArenaDtor(void* object) {
  KeyDistributionOptions_Heap* _this = reinterpret_cast< KeyDistributionOptions_Heap* >(object);
  (void)_this;
}
void KeyDistributionOptions_Heap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyDistributionOptions_Heap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyDistributionOptions_Heap::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.KeyDistributionOptions.Heap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_heap_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDistributionOptions_Heap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool min_heap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_heap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDistributionOptions_Heap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.KeyDistributionOptions.Heap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool min_heap = 1;
  if (this->min_heap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_min_heap(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.KeyDistributionOptions.Heap)
  return target;
}

size_t KeyDistributionOptions_Heap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.KeyDistributionOptions.Heap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool min_heap = 1;
  if (this->min_heap() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDistributionOptions_Heap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.KeyDistributionOptions.Heap)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDistributionOptions_Heap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDistributionOptions_Heap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.KeyDistributionOptions.Heap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.KeyDistributionOptions.Heap)
    MergeFrom(*source);
  }
}

void KeyDistributionOptions_Heap::MergeFrom(const KeyDistributionOptions_Heap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.KeyDistributionOptions.Heap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_heap() != 0) {
    _internal_set_min_heap(from._internal_min_heap());
  }
}

void KeyDistributionOptions_Heap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.KeyDistributionOptions.Heap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDistributionOptions_Heap::CopyFrom(const KeyDistributionOptions_Heap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.KeyDistributionOptions.Heap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDistributionOptions_Heap::IsInitialized() const {
  return true;
}

void KeyDistributionOptions_Heap::InternalSwap(KeyDistributionOptions_Heap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(min_heap_, other->min_heap_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDistributionOptions_Heap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class KeyDistributionOptions::_Internal {
 public:
  static const ::DRPB::KeyDistributionOptions_Prioritized& prioritized(const KeyDistributionOptions* msg);
  static const ::DRPB::KeyDistributionOptions_Heap& heap(const KeyDistributionOptions* msg);
};

const ::DRPB::KeyDistributionOptions_Prioritized&
KeyDistributionOptions::_Internal::prioritized(const KeyDistributionOptions* msg) {
  return *msg->distribution_.prioritized_;
}
const ::DRPB::KeyDistributionOptions_Heap&
KeyDistributionOptions::_Internal::heap(const KeyDistributionOptions* msg) {
  return *msg->distribution_.heap_;
}
void KeyDistributionOptions::set_allocated_prioritized(::DRPB::KeyDistributionOptions_Prioritized* prioritized) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_distribution();
  if (prioritized) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(prioritized);
    if (message_arena != submessage_arena) {
      prioritized = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prioritized, submessage_arena);
    }
    set_has_prioritized();
    distribution_.prioritized_ = prioritized;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.KeyDistributionOptions.prioritized)
}
void KeyDistributionOptions::set_allocated_heap(::DRPB::KeyDistributionOptions_Heap* heap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_distribution();
  if (heap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(heap);
    if (message_arena != submessage_arena) {
      heap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heap, submessage_arena);
    }
    set_has_heap();
    distribution_.heap_ = heap;
  }
  // @@protoc_insertion_point(field_set_allocated:DRPB.KeyDistributionOptions.heap)
}
KeyDistributionOptions::KeyDistributionOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.KeyDistributionOptions)
}
KeyDistributionOptions::KeyDistributionOptions(const KeyDistributionOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_deterministic_ = from.is_deterministic_;
  clear_has_distribution();
  switch (from.distribution_case()) {
    case kFifo: {
      _internal_set_fifo(from._internal_fifo());
      break;
    }
    case kUniform: {
      _internal_set_uniform(from._internal_uniform());
      break;
    }
    case kPrioritized: {
      _internal_mutable_prioritized()->::DRPB::KeyDistributionOptions_Prioritized::MergeFrom(from._internal_prioritized());
      break;
    }
    case kHeap: {
      _internal_mutable_heap()->::DRPB::KeyDistributionOptions_Heap::MergeFrom(from._internal_heap());
      break;
    }
    case kLifo: {
      _internal_set_lifo(from._internal_lifo());
      break;
    }
    case DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:DRPB.KeyDistributionOptions)
}

void KeyDistributionOptions::SharedCtor() {
is_deterministic_ = false;
clear_has_distribution();
}

KeyDistributionOptions::~KeyDistributionOptions() {
  // @@protoc_insertion_point(destructor:DRPB.KeyDistributionOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyDistributionOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_distribution()) {
    clear_distribution();
  }
}

void KeyDistributionOptions::ArenaDtor(void* object) {
  KeyDistributionOptions* _this = reinterpret_cast< KeyDistributionOptions* >(object);
  (void)_this;
}
void KeyDistributionOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyDistributionOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KeyDistributionOptions::clear_distribution() {
// @@protoc_insertion_point(one_of_clear_start:DRPB.KeyDistributionOptions)
  switch (distribution_case()) {
    case kFifo: {
      // No need to clear
      break;
    }
    case kUniform: {
      // No need to clear
      break;
    }
    case kPrioritized: {
      if (GetArena() == nullptr) {
        delete distribution_.prioritized_;
      }
      break;
    }
    case kHeap: {
      if (GetArena() == nullptr) {
        delete distribution_.heap_;
      }
      break;
    }
    case kLifo: {
      // No need to clear
      break;
    }
    case DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DISTRIBUTION_NOT_SET;
}


void KeyDistributionOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.KeyDistributionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_deterministic_ = false;
  clear_distribution();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyDistributionOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool fifo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_fifo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool uniform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_uniform(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.KeyDistributionOptions.Prioritized prioritized = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prioritized(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DRPB.KeyDistributionOptions.Heap heap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_heap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool lifo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_lifo(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_deterministic = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_deterministic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyDistributionOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.KeyDistributionOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool fifo = 1;
  if (_internal_has_fifo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_fifo(), target);
  }

  // bool uniform = 2;
  if (_internal_has_uniform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_uniform(), target);
  }

  // .DRPB.KeyDistributionOptions.Prioritized prioritized = 3;
  if (_internal_has_prioritized()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::prioritized(this), target, stream);
  }

  // .DRPB.KeyDistributionOptions.Heap heap = 4;
  if (_internal_has_heap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::heap(this), target, stream);
  }

  // bool lifo = 6;
  if (_internal_has_lifo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_lifo(), target);
  }

  // bool is_deterministic = 7;
  if (this->is_deterministic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_is_deterministic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.KeyDistributionOptions)
  return target;
}

size_t KeyDistributionOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.KeyDistributionOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_deterministic = 7;
  if (this->is_deterministic() != 0) {
    total_size += 1 + 1;
  }

  switch (distribution_case()) {
    // bool fifo = 1;
    case kFifo: {
      total_size += 1 + 1;
      break;
    }
    // bool uniform = 2;
    case kUniform: {
      total_size += 1 + 1;
      break;
    }
    // .DRPB.KeyDistributionOptions.Prioritized prioritized = 3;
    case kPrioritized: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distribution_.prioritized_);
      break;
    }
    // .DRPB.KeyDistributionOptions.Heap heap = 4;
    case kHeap: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *distribution_.heap_);
      break;
    }
    // bool lifo = 6;
    case kLifo: {
      total_size += 1 + 1;
      break;
    }
    case DISTRIBUTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyDistributionOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.KeyDistributionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyDistributionOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyDistributionOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.KeyDistributionOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.KeyDistributionOptions)
    MergeFrom(*source);
  }
}

void KeyDistributionOptions::MergeFrom(const KeyDistributionOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.KeyDistributionOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_deterministic() != 0) {
    _internal_set_is_deterministic(from._internal_is_deterministic());
  }
  switch (from.distribution_case()) {
    case kFifo: {
      _internal_set_fifo(from._internal_fifo());
      break;
    }
    case kUniform: {
      _internal_set_uniform(from._internal_uniform());
      break;
    }
    case kPrioritized: {
      _internal_mutable_prioritized()->::DRPB::KeyDistributionOptions_Prioritized::MergeFrom(from._internal_prioritized());
      break;
    }
    case kHeap: {
      _internal_mutable_heap()->::DRPB::KeyDistributionOptions_Heap::MergeFrom(from._internal_heap());
      break;
    }
    case kLifo: {
      _internal_set_lifo(from._internal_lifo());
      break;
    }
    case DISTRIBUTION_NOT_SET: {
      break;
    }
  }
}

void KeyDistributionOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.KeyDistributionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyDistributionOptions::CopyFrom(const KeyDistributionOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.KeyDistributionOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyDistributionOptions::IsInitialized() const {
  return true;
}

void KeyDistributionOptions::InternalSwap(KeyDistributionOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(is_deterministic_, other->is_deterministic_);
  swap(distribution_, other->distribution_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyDistributionOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Uint128::_Internal {
 public:
};

Uint128::Uint128(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.Uint128)
}
Uint128::Uint128(const Uint128& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&high_, &from.high_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
  // @@protoc_insertion_point(copy_constructor:DRPB.Uint128)
}

void Uint128::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_) -
    reinterpret_cast<char*>(&high_)) + sizeof(low_));
}

Uint128::~Uint128() {
  // @@protoc_insertion_point(destructor:DRPB.Uint128)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Uint128::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Uint128::ArenaDtor(void* object) {
  Uint128* _this = reinterpret_cast< Uint128* >(object);
  (void)_this;
}
void Uint128::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Uint128::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Uint128::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&high_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_) -
      reinterpret_cast<char*>(&high_)) + sizeof(low_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Uint128::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 high = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 low = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint128::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.Uint128)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high(), target);
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.Uint128)
  return target;
}

size_t Uint128::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.Uint128)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 high = 1;
  if (this->high() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_high());
  }

  // uint64 low = 2;
  if (this->low() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_low());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint128::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint128* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint128>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.Uint128)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.Uint128)
    MergeFrom(*source);
  }
}

void Uint128::MergeFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.Uint128)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.high() != 0) {
    _internal_set_high(from._internal_high());
  }
  if (from.low() != 0) {
    _internal_set_low(from._internal_low());
  }
}

void Uint128::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint128::CopyFrom(const Uint128& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.Uint128)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint128::IsInitialized() const {
  return true;
}

void Uint128::InternalSwap(Uint128* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Uint128, low_)
      + sizeof(Uint128::low_)
      - PROTOBUF_FIELD_OFFSET(Uint128, high_)>(
          reinterpret_cast<char*>(&high_),
          reinterpret_cast<char*>(&other->high_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint128::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Timeout::_Internal {
 public:
};

Timeout::Timeout(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DRPB.Timeout)
}
Timeout::Timeout(const Timeout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  milliseconds_ = from.milliseconds_;
  // @@protoc_insertion_point(copy_constructor:DRPB.Timeout)
}

void Timeout::SharedCtor() {
milliseconds_ = PROTOBUF_LONGLONG(0);
}

Timeout::~Timeout() {
  // @@protoc_insertion_point(destructor:DRPB.Timeout)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Timeout::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Timeout::ArenaDtor(void* object) {
  Timeout* _this = reinterpret_cast< Timeout* >(object);
  (void)_this;
}
void Timeout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Timeout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Timeout::Clear() {
// @@protoc_insertion_point(message_clear_start:DRPB.Timeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  milliseconds_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Timeout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 milliseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Timeout::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DRPB.Timeout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 milliseconds = 1;
  if (this->milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DRPB.Timeout)
  return target;
}

size_t Timeout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DRPB.Timeout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 milliseconds = 1;
  if (this->milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_milliseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Timeout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DRPB.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  const Timeout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Timeout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DRPB.Timeout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DRPB.Timeout)
    MergeFrom(*source);
  }
}

void Timeout::MergeFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DRPB.Timeout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.milliseconds() != 0) {
    _internal_set_milliseconds(from._internal_milliseconds());
  }
}

void Timeout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DRPB.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timeout::CopyFrom(const Timeout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DRPB.Timeout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timeout::IsInitialized() const {
  return true;
}

void Timeout::InternalSwap(Timeout* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(milliseconds_, other->milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Timeout::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DRPB
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DRPB::TensorProto* Arena::CreateMaybeMessage< ::DRPB::TensorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TensorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::VariantTensorDataProto* Arena::CreateMaybeMessage< ::DRPB::VariantTensorDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::VariantTensorDataProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TensorShapeProto_Dim* Arena::CreateMaybeMessage< ::DRPB::TensorShapeProto_Dim >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TensorShapeProto_Dim >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TensorShapeProto* Arena::CreateMaybeMessage< ::DRPB::TensorShapeProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TensorShapeProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::ResourceHandleProto_DtypeAndShape* Arena::CreateMaybeMessage< ::DRPB::ResourceHandleProto_DtypeAndShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::ResourceHandleProto_DtypeAndShape >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::ResourceHandleProto* Arena::CreateMaybeMessage< ::DRPB::ResourceHandleProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::ResourceHandleProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::ChunkData_Data* Arena::CreateMaybeMessage< ::DRPB::ChunkData_Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::ChunkData_Data >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::ChunkData* Arena::CreateMaybeMessage< ::DRPB::ChunkData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::ChunkData >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::SliceRange* Arena::CreateMaybeMessage< ::DRPB::SliceRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::SliceRange >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::SequenceRange* Arena::CreateMaybeMessage< ::DRPB::SequenceRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::SequenceRange >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::FlatTrajectory_ChunkSlice* Arena::CreateMaybeMessage< ::DRPB::FlatTrajectory_ChunkSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::FlatTrajectory_ChunkSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::FlatTrajectory_Column* Arena::CreateMaybeMessage< ::DRPB::FlatTrajectory_Column >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::FlatTrajectory_Column >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::FlatTrajectory* Arena::CreateMaybeMessage< ::DRPB::FlatTrajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::FlatTrajectory >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::PrioritizedItem* Arena::CreateMaybeMessage< ::DRPB::PrioritizedItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::PrioritizedItem >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::KeyWithPriority* Arena::CreateMaybeMessage< ::DRPB::KeyWithPriority >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::KeyWithPriority >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::SampleInfo* Arena::CreateMaybeMessage< ::DRPB::SampleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::SampleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TableInfo* Arena::CreateMaybeMessage< ::DRPB::TableInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TableInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::StructuredValue* Arena::CreateMaybeMessage< ::DRPB::StructuredValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::StructuredValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::NoneValue* Arena::CreateMaybeMessage< ::DRPB::NoneValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::NoneValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::ListValue* Arena::CreateMaybeMessage< ::DRPB::ListValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TupleValue* Arena::CreateMaybeMessage< ::DRPB::TupleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::DictValue_FieldsEntry_DoNotUse* Arena::CreateMaybeMessage< ::DRPB::DictValue_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::DictValue_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::DictValue* Arena::CreateMaybeMessage< ::DRPB::DictValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::DictValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::PairValue* Arena::CreateMaybeMessage< ::DRPB::PairValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::PairValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::NamedTupleValue* Arena::CreateMaybeMessage< ::DRPB::NamedTupleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::NamedTupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TensorSpecProto* Arena::CreateMaybeMessage< ::DRPB::TensorSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TensorSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::BoundedTensorSpecProto* Arena::CreateMaybeMessage< ::DRPB::BoundedTensorSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::BoundedTensorSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::TypeSpecProto* Arena::CreateMaybeMessage< ::DRPB::TypeSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::TypeSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::RateLimiterCallStats* Arena::CreateMaybeMessage< ::DRPB::RateLimiterCallStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::RateLimiterCallStats >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::RateLimiterInfo* Arena::CreateMaybeMessage< ::DRPB::RateLimiterInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::RateLimiterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::KeyDistributionOptions_Prioritized* Arena::CreateMaybeMessage< ::DRPB::KeyDistributionOptions_Prioritized >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::KeyDistributionOptions_Prioritized >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::KeyDistributionOptions_Heap* Arena::CreateMaybeMessage< ::DRPB::KeyDistributionOptions_Heap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::KeyDistributionOptions_Heap >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::KeyDistributionOptions* Arena::CreateMaybeMessage< ::DRPB::KeyDistributionOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::KeyDistributionOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::Uint128* Arena::CreateMaybeMessage< ::DRPB::Uint128 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::Uint128 >(arena);
}
template<> PROTOBUF_NOINLINE ::DRPB::Timeout* Arena::CreateMaybeMessage< ::DRPB::Timeout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DRPB::Timeout >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
