//Modified by wangjun 2021.10.18

syntax = "proto3";

package DRPB.DATA;

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "types.proto";


message TensorProto {
  DataType dtype = 1;

  // Shape of the tensor.  TODO(touts): sort out the 0-rank issues.
  TensorShapeProto tensor_shape = 2;

  // Only one of the representations below is set, one of "tensor_contents" and
  // the "xxx_val" attributes.  We are not using oneof because as oneofs cannot
  // contain repeated fields it would require another extra set of messages.

  // Version number.
  //
  // In version 0, if the "repeated xxx" representations contain only one
  // element, that element is repeated to fill the shape.  This makes it easy
  // to represent a constant Tensor with a single value.
  int32 version_number = 3;

  // Serialized raw tensor content from either Tensor::AsProtoTensorContent or
  // memcpy in tensorflow::grpc::EncodeTensorToByteBuffer. This representation
  // can be used for all tensor types. The purpose of this representation is to
  // reduce serialization overhead during RPC call by avoiding serialization of
  // many repeated small items.
  bytes tensor_content = 4;

  // Type specific representations that make it easy to create tensor protos in
  // all languages.  Only the representation corresponding to "dtype" can
  // be set.  The values hold the flattened representation of the tensor in
  // row major order.

  // DT_HALF, DT_BFLOAT16. Note that since protobuf has no int16 type, we'll
  // have some pointless zero padding for each value here.
  repeated int32 half_val = 13 [packed = true];

  // DT_FLOAT.
  repeated float float_val = 5 [packed = true];

  // DT_DOUBLE.
  repeated double double_val = 6 [packed = true];

  // DT_INT32, DT_INT16, DT_UINT16, DT_INT8, DT_UINT8.
  repeated int32 int_val = 7 [packed = true];

  // DT_STRING
  repeated bytes string_val = 8;

  // DT_COMPLEX64. scomplex_val(2*i) and scomplex_val(2*i+1) are real
  // and imaginary parts of i-th single precision complex.
  repeated float scomplex_val = 9 [packed = true];

  // DT_INT64
  repeated int64 int64_val = 10 [packed = true];

  // DT_BOOL
  repeated bool bool_val = 11 [packed = true];

  // DT_COMPLEX128. dcomplex_val(2*i) and dcomplex_val(2*i+1) are real
  // and imaginary parts of i-th double precision complex.
  repeated double dcomplex_val = 12 [packed = true];

  // DT_RESOURCE
  repeated ResourceHandleProto resource_handle_val = 14;

  // DT_VARIANT
  repeated VariantTensorDataProto variant_val = 15;

  // DT_UINT32
  repeated uint32 uint32_val = 16 [packed = true];

  // DT_UINT64
  repeated uint64 uint64_val = 17 [packed = true];
}

message VariantTensorDataProto {
  // Name of the type of objects being serialized.
  string type_name = 1;
  // Portions of the object that are not Tensors.
  bytes metadata = 2;
  // Tensors contained within objects being serialized.
  repeated TensorProto tensors = 3;
}

// Dimensions of a tensor.
message TensorShapeProto {
  // One dimension of the tensor.
  message Dim {
    // Size of the tensor in that dimension.
    // This value must be >= -1, but values of -1 are reserved for "unknown"
    // shapes (values of -1 mean "unknown" dimension).  Certain wrappers
    // that work with TensorShapeProto may fail at runtime when deserializing
    // a TensorShapeProto containing a dim value of -1.
    int64 size = 1;

    // Optional name of the tensor dimension.
    string name = 2;
  };

  // Dimensions of the tensor, such as {"input", 30}, {"output", 40}
  // for a 30 x 40 2D tensor.  If an entry has size -1, this
  // corresponds to a dimension of unknown size. The names are
  // optional.
  //
  // The order of entries in "dim" matters: It indicates the layout of the
  // values in the tensor in-memory representation.
  //
  // The first entry in "dim" is the outermost dimension used to layout the
  // values, the last entry is the innermost dimension.  This matches the
  // in-memory layout of RowMajor Eigen tensors.
  //
  // If "dim.size()" > 0, "unknown_rank" must be false.
  repeated Dim dim = 2;

  // If true, the number of dimensions in the shape is unknown.
  // If true, "dim.size()" must be 0.
  bool unknown_rank = 3;
};

// Protocol buffer representing a handle to a tensorflow resource. Handles are
// not valid across executions, but can be serialized back and forth from within
// a single run.
message ResourceHandleProto {
  // Unique name for the device containing the resource.
  string device = 1;

  // Container in which this resource is placed.
  string container = 2;

  // Unique name of this resource.
  string name = 3;

  // Hash code for the type of the resource. Is only valid in the same device
  // and in the same execution.
  uint64 hash_code = 4;

  // For debug-only, the name of the type pointed to by this handle, if
  // available.
  string maybe_type_name = 5;

  // Protocol buffer representing a pair of (data type, tensor shape).
  message DtypeAndShape {
    DataType dtype = 1;
    TensorShapeProto shape = 2;
  }

  // Data types and shapes for the underlying resource.
  repeated DtypeAndShape dtypes_and_shapes = 6;

  reserved 7;
}

// The actual data is stored in chunks. The data can be arbitrary tensors. We do
// not interpret the bytes data of the tensors on the server side. It is up to
// the client to compress the bytes blob within the tensors.
message ChunkData {
  // Unique identifier of the chunk.
  uint64 chunk_key = 1;

  // The timesteps within the episode that the chunk covers.
  SequenceRange sequence_range = 2;

  // Actual tensor data.
  message Data {
    repeated TensorProto tensors = 1; //need to be modified by wangjun
  }
  Data data = 5 [lazy = true];

  // Number of tensors in the data field. Set explicitly so that Reverb server
  // can check it without accessing lazy data field (which is expensive to
  // parse).
  int32 data_tensors_len = 6;

  // True if delta encoding has been applied before compressing data.
  bool delta_encoded = 4;

  // Deprecated December 2020 and retained to provide backward
  // compatibility with checkpoints created before this point.
  repeated TensorProto deprecated_data = 3 [deprecated = true];
}

// A range that specifies which items to slice out from a sequence of chunks.
// The length of all chunks must at least be `offset`+`length`.
message SliceRange {
  // Offset where the slice should start.
  int32 offset = 1;

  // Length of the slice. Can span multiple chunks.
  int32 length = 2;
}

message SequenceRange {
  // Globally unique identifier of the episode the sequence belongs to.
  uint64 episode_id = 1;

  // Index within the episode of the first timestep covered by the range.
  int32 start = 2;

  // Index within the episode of the last timestep covered by the range.
  // Must be >= start_index.
  int32 end = 3;

  // If set then at least one step is missing from the data. The number of steps
  // (i.e batch size) present in the data is unknown and thus must be manually
  // checked. However, the `start` and `end` step is guaranteed to be at first
  // and last position in the data.
  bool sparse = 4;
}

message FlatTrajectory {
  message ChunkSlice {
    // Unique identifier of the ChunkData which owns the compressed data.
    uint64 chunk_key = 1;

    // Index of the first element in the chunk to include.
    int32 offset = 2;

    // Number of elements from the chunk to include.
    int32 length = 3;

    // Tensor index of the tensor within the chunk.
    int32 index = 4;
  }

  message Column {
    // Chunk slices to concat.
    repeated ChunkSlice chunk_slices = 1;

    // If true then the batch dim (must be 1) is emitted when unpacked.
    // Requires that column is made up of exactly one ChunkSlice of length 1.
    bool squeeze = 2;
  }

  // Flattened columns of the trajectory.
  repeated Column columns = 1;
}

// A prioritized item is part of a table and references a chunk of
// data. Sampling happens based on the priority of items.
//
// Next ID: 9.
// LINT.IfChange
message PrioritizedItem {
  // Unique identifier of this item.
  uint64 key = 1;

  // Priority table that the item belongs to.
  string table = 2;

  // Priority used for sampling.
  double priority = 5;

  // The number of times the item has been sampled.
  int32 times_sampled = 6;

  // The time when the item was first inserted.
  google.protobuf.Timestamp inserted_at = 7;

  // Flattened representation of item's trajectory.
  FlatTrajectory flat_trajectory = 8;

  // Deprecated January 2021 and retained to provide backward compatibility
  // with checkpoints created before this point.
  repeated uint64 deprecated_chunk_keys = 3 [deprecated = true];
  SliceRange deprecated_sequence_range = 4 [deprecated = true];
}
// LINT.ThenChange(reverb_service_impl.cc)

// Used for updating an existing PrioritizedItem.
message KeyWithPriority {
  // Identifier of the PrioritizedItem.
  uint64 key = 1;

  // Priority used for sampling.
  double priority = 2;
}

message SampleInfo {
  // Item from that was sampled from the table.
  PrioritizedItem item = 1;

  // Probability that this item had at sampling time. Useful for importance
  // sampling.
  double probability = 2;

  // Number of items in the table at the time of the sample operation.
  int64 table_size = 3;

  // Whether the sample was delayed due to rate limiting of the sampler.
  bool rate_limited = 4;
}

// LINT.IfChange
// Metadata about the table, including (optional) data signature.
//
// These fields correspond to initialization arguments of the
// `Table` class, unless noted otherwise.
//
// Next ID: 12.
message TableInfo {
  // Table's name.
  string name = 8;

  // Sampler and remover metadata.
  KeyDistributionOptions sampler_options = 1;
  KeyDistributionOptions remover_options = 2;

  // Max size of the table.
  int64 max_size = 3;

  // Max number of times an element can be sampled before being
  // removed.
  int32 max_times_sampled = 4;

  // How data read/write is rate limited.
  RateLimiterInfo rate_limiter_info = 5;

  // Optional data signature for tensors stored in the table.  Note
  // that this data type is more flexible than we use.  For example,
  // we only store tensors (TensorSpecProto, TypeSpecProto) and not
  // any special data types (no NoneValue or other special fixed values).
  StructuredValue signature = 6;

  // Current size of table.
  int64 current_size = 7;

  // Number of episodes referenced by the items in the table.
  int64 num_episodes = 9;

  // Number of episodes once referenced by items in the table but no longer is.
  // The total number of episodes thus is `num_episodes + num_deleted_episodes`.
  int64 num_deleted_episodes = 10;

  // Number of unique items sampled from the table since the last reset.
  int64 num_unique_samples = 11;
}
// LINT.ThenChange(../py/reverb/reverb_types.py)

message StructuredValue {
  // The kind of value.
  oneof kind {
    // Represents None.
    NoneValue none_value = 1;

    // Represents a double-precision floating-point value (a Python `float`).
    double float64_value = 11;
    // Represents a signed integer value, limited to 64 bits.
    // Larger values from Python's arbitrary-precision integers are unsupported.
    sint64 int64_value = 12;
    // Represents a string of Unicode characters stored in a Python `str`.
    // In Python 3, this is exactly what type `str` is.
    // In Python 2, this is the UTF-8 encoding of the characters.
    // For strings with ASCII characters only (as often used in TensorFlow code)
    // there is effectively no difference between the language versions.
    // The obsolescent `unicode` type of Python 2 is not supported here.
    string string_value = 13;
    // Represents a boolean value.
    bool bool_value = 14;

    // Represents a TensorShape.
    TensorShapeProto tensor_shape_value = 31;
    // Represents an enum value for dtype.
    DataType tensor_dtype_value = 32;
    // Represents a value for tf.TensorSpec.
    TensorSpecProto tensor_spec_value = 33;
    // Represents a value for tf.TypeSpec.
    TypeSpecProto type_spec_value = 34;
    // Represents a value for tf.BoundedTensorSpec.
    BoundedTensorSpecProto bounded_tensor_spec_value = 35;

    // Represents a list of `Value`.
    ListValue list_value = 51;
    // Represents a tuple of `Value`.
    TupleValue tuple_value = 52;
    // Represents a dict `Value`.
    DictValue dict_value = 53;
    // Represents Python's namedtuple.
    NamedTupleValue named_tuple_value = 54;
  }
}

// Represents None.
message NoneValue {}

// Represents a Python list.
message ListValue {
  repeated StructuredValue values = 1;
}

// Represents a Python tuple.
message TupleValue {
  repeated StructuredValue values = 1;
}

// Represents a Python dict keyed by `str`.
// The comment on Unicode from Value.string_value applies analogously.
message DictValue {
  map<string, StructuredValue> fields = 1;
}

// Represents a (key, value) pair.
message PairValue {
  string key = 1;
  StructuredValue value = 2;
}

// Represents Python's namedtuple.
message NamedTupleValue {
  string name = 1;
  repeated PairValue values = 2;
}

// A protobuf to represent tf.TensorSpec.
message TensorSpecProto {
  string name = 1;
  TensorShapeProto shape = 2;
  DataType dtype = 3;
}

// A protobuf to represent tf.BoundedTensorSpec.
message BoundedTensorSpecProto {
  string name = 1;
  TensorShapeProto shape = 2;
  DataType dtype = 3;
  TensorProto minimum = 4;
  TensorProto maximum = 5;
}

// Represents a tf.TypeSpec
message TypeSpecProto {
  enum TypeSpecClass {
    UNKNOWN = 0;
    SPARSE_TENSOR_SPEC = 1;   // tf.SparseTensorSpec
    INDEXED_SLICES_SPEC = 2;  // tf.IndexedSlicesSpec
    RAGGED_TENSOR_SPEC = 3;   // tf.RaggedTensorSpec
    TENSOR_ARRAY_SPEC = 4;    // tf.TensorArraySpec
    DATA_DATASET_SPEC = 5;    // tf.data.DatasetSpec
    DATA_ITERATOR_SPEC = 6;   // IteratorSpec from data/ops/iterator_ops.py
    OPTIONAL_SPEC = 7;        // tf.OptionalSpec
    PER_REPLICA_SPEC = 8;     // PerReplicaSpec from distribute/values.py
    VARIABLE_SPEC = 9;        // tf.VariableSpec
    ROW_PARTITION_SPEC = 10;  // RowPartitionSpec from ragged/row_partition.py
    reserved 11;
    REGISTERED_TYPE_SPEC = 12;  // The type registered as type_spec_class_name.
    EXTENSION_TYPE_SPEC = 13;   // Subclasses of tf.ExtensionType
  }
  TypeSpecClass type_spec_class = 1;

  // The value returned by TypeSpec._serialize().
  StructuredValue type_state = 2;

  // The name of the TypeSpec class.
  //  * If type_spec_class == REGISTERED_TYPE_SPEC, the TypeSpec class is
  //    the one registered under this name. For types registered outside
  //    core TensorFlow by an add-on library, that library must be loaded
  //    before this value can be deserialized by StructureCoder.
  //  * If type_spec_class specifies a particular TypeSpec class, this field is
  //    redundant with the type_spec_class enum, and is only used for error
  //    reporting in older binaries that do not know the tupe_spec_class enum.
  string type_spec_class_name = 3;
}

message RateLimiterCallStats {
  // The number of calls that are currently blocked.
  int64 pending = 1;

  // The total number of completed calls.
  int64 completed = 2;

  // Out of the completed calls, how many of these were blocked for any amount
  // of time.
  int64 limited = 3;

  // Total waiting time for all the COMPLETED calls.
  google.protobuf.Duration completed_wait_time = 4;

  // Total waiting time for all calls that are pending right now.
  google.protobuf.Duration pending_wait_time = 5;
}

message RateLimiterInfo {
  // The average number of times each item should be sampled during its
  // lifetime.
  double samples_per_insert = 1;

  // The minimum and maximum values the cursor is allowed to reach. The cursor
  // value is calculated as `insert_count * samples_per_insert -
  // sample_count`. If the value would go beyond these limits then the call is
  // blocked until it can proceed without violating the constraints.
  double min_diff = 2;
  double max_diff = 3;

  // The minimum number of inserts required before any sample operation.
  int64 min_size_to_sample = 4;

  // Stats regarding the limiting of insert calls.
  RateLimiterCallStats insert_stats = 5;

  // Stats regarding the limiting of sample calls.
  RateLimiterCallStats sample_stats = 6;
}

// Metadata about sampler or remover.  Describes its configuration.
message KeyDistributionOptions {
  message Prioritized {
    double priority_exponent = 1;
  }

  message Heap {
    bool min_heap = 1;
  }

  oneof distribution {
    bool fifo = 1;
    bool uniform = 2;
    Prioritized prioritized = 3;
    Heap heap = 4;
    bool lifo = 6;
  }
  reserved 5;
  bool is_deterministic = 7;
}

// Uint128 representation.  Can be used for unique identifiers.
message Uint128 {
  uint64 high = 1;
  uint64 low = 2;
}

// Representation of a timeout.  A value < 0 means never time out.
message Timeout {
  int64 milliseconds = 1;
}
